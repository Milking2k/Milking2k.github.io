<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jelech的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jelech.gitee.io/"/>
  <updated>2019-11-21T10:24:46.486Z</updated>
  <id>https://jelech.gitee.io/</id>
  
  <author>
    <name>Jelech</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一起学GO(二)</title>
    <link href="https://jelech.gitee.io/posts/25028/"/>
    <id>https://jelech.gitee.io/posts/25028/</id>
    <published>2019-11-07T09:01:02.000Z</published>
    <updated>2019-11-21T10:24:46.486Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="一些内置函数"><a href="#一些内置函数" class="headerlink" title="一些内置函数"></a>一些内置函数</h2><ul><li><code>close</code> 主要用来关闭channel</li><li><code>len</code> 求长度</li><li><code>new</code> 用于分配基础类型的内存</li><li><code>make</code> 用于分配引用类型的内存：<code>chan, map, slice</code></li><li><code>append</code> 用于追加元素到slice中</li><li><code>panic, recover</code> 用于做错误处理</li></ul><p><code>panic</code> 像raise一样会主动拉出错误，可以用<code>defer</code> 语句处理，用 <code>err := recover()</code> 可以获取错误，并且recover了，则会恢复现场，但是这个现场是跳出了panic的函数的</p><h3 id="strconv包"><a href="#strconv包" class="headerlink" title="strconv包"></a>strconv包</h3><p>把字符串转换为相应类型。比如strconv.Atoi(s)</p><p>返回实体类型，与err编号</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> newName oldName</span><br></pre></td></tr></table></figure><h3 id="结构体-1"><a href="#结构体-1" class="headerlink" title="结构体"></a>结构体</h3><p>和C++中的struct类似，相较于class类来说：</p><ul><li>结构体中的变量值在内存中的位置和C++类似，会有内存对齐</li><li>一般定义为大写开始的变量为共有，小写开始的为私有</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age <span class="keyword">int</span></span><br><span class="line">    hight <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>struct可以添加函数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span> <span class="title">SayHI</span><span class="params">()</span> <span class="params">(ret <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"hi"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造函数约定new开头，返回结构体指针</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> *<span class="title">Person</span></span>&#123; <span class="comment">// 注意返回一个指针</span></span><br><span class="line">    <span class="keyword">return</span> &amp;Person&#123;</span><br><span class="line">        Name:name,</span><br><span class="line">        Age:age, <span class="comment">// 最后需要加上逗号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体匿名字段"><a href="#结构体匿名字段" class="headerlink" title="结构体匿名字段"></a>结构体匿名字段</h3><p>字段类型作为了名字, 但是一般都不会定义<code>int,string</code>这类的匿名，而是一个新的类型，这样有利于提取出公共部分可理解， 而外部访问的时候又可以更直观：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> address <span class="keyword">struct</span>&#123;</span><br><span class="line">    city <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    address <span class="comment">// 嵌套后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p := <span class="built_in">new</span>(person)</span><br><span class="line">p.city <span class="comment">// 从address中自动找到了city</span></span><br></pre></td></tr></table></figure><h3 id="继承机制"><a href="#继承机制" class="headerlink" title="继承机制"></a>继承机制</h3><p>嵌套其他struct的时候同时也会把函数也嵌套过来，当然，如果函数名重复的话会忽略，自己声明的优先级更高</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> animal <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *anival)</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"move"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cat <span class="keyword">struct</span>&#123;</span><br><span class="line">    animal <span class="comment">// cat中嵌套了animal</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cat)</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"say"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">c := <span class="built_in">new</span>(cat)</span><br><span class="line">c.say()</span><br><span class="line">c.move() <span class="comment">// 会从嵌套类中找到move()</span></span><br></pre></td></tr></table></figure><h3 id="结构体与json"><a href="#结构体与json" class="headerlink" title="结构体与json"></a>结构体与json</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"encoding/json"</span></span><br><span class="line"></span><br><span class="line">p = newPerson(<span class="string">"je"</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">s, err := json.Marshal(p) <span class="comment">//转为json</span></span><br><span class="line"></span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(s), &amp;p) <span class="comment">// 记住传指针</span></span><br></pre></td></tr></table></figure><p>但是json访问的时候需要p为首字母大写，但有的json需要小写。</p><p>此时就要就需要在struct后加反引号，在包解析的时候会自动转换<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span>&#123;</span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`json:"name", db:"name", ini:"name`</span> <span class="comment">// 在json的名字，db中的名字，init.conf中的名字等。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>用于抽象化一些类型的共有部分。比如猫狗都能叫，可以抽象出一个类型speak函数，那么在之后调用的时候能直接使用speak，而传入参数能的多种类型的</p><p>而其他的struct只要实现了interface中的方法，那么就能传入后调用出来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> animal <span class="keyword">interface</span>&#123;</span><br><span class="line">    speak()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> cat <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cat)</span> <span class="title">speak</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *dog)</span> <span class="title">speak</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(a *animal)</span></span> &#123;</span><br><span class="line">    a.speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use ... 这样就能动态的使用相应的speak函数了</span></span><br><span class="line">do(<span class="built_in">new</span>(cat))</span><br><span class="line">do(<span class="built_in">new</span>(dog))</span><br></pre></td></tr></table></figure><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>空接口是所有类型的父接口，这样做是为了传入一种类型，比如在map中存动态的类型，一个函数接收所有的类型。</p><p>注意有一个大括号 <code>interface{}</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">10</span>)</span><br><span class="line">m1[<span class="string">"name"</span>] = <span class="string">"je"</span></span><br><span class="line">m1[<span class="string">"age"</span>] = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use</span></span><br><span class="line">show(<span class="keyword">bool</span>)</span><br><span class="line">show(<span class="string">"hi"</span>)</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><ul><li>x: 表示为interface{}的变量</li><li>T: 表示断言x可能的类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isTrue, err := x.(T)</span><br></pre></td></tr></table></figure><h2 id="package包"><a href="#package包" class="headerlink" title="package包"></a>package包</h2><p>包内的变量/函数需要首字母大写才能在外部调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    别名 jelech.top/PackName</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里说明一下，一个go包在运行的时候会进行：</p><ul><li>全局声明</li><li>运行init()函数。init函数是内置的，和main类似</li><li>运行main()函数</li></ul><p>在 A import B，B import C时，会先运行initC，再initB和initA。</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p><code>import &quot;os&quot;</code></p><ul><li><code>os.Open()</code>返回一个*File，对这个指针进行操作</li><li><code>len, err = os.Read([]byte)</code> 读取一个文件，返回长度和错误标识</li></ul><p><code>import &quot;bufio&quot;</code></p><ul><li><code>line, err := reader.ReadString(&#39;\n&#39;)</code>一直读取直到遇到某个字符</li></ul><p><code>import &quot;ioutil&quot;</code></p><ul><li><code>ret, err := ioutil.ReadFile(path)</code> 直接打开文件全部读取到ret中</li></ul><blockquote><p>… 有待补充</p></blockquote><h2 id="time包"><a href="#time包" class="headerlink" title="time包"></a>time包</h2><ul><li><code>ntime := time.Now()</code> 获取当前时间</li><li><code>ntime.Year(), ntime.Month()...</code> 获取时间的详细部分</li></ul><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><ul><li><code>ntime.Unix()</code> 获取时间戳</li><li><code>ntime.Unix(time int64)</code> 将时间戳转换为标准格式时间</li><li><code>ntime.UnixNano()</code> 纳秒时间戳</li></ul><h3 id="时间操作"><a href="#时间操作" class="headerlink" title="时间操作"></a>时间操作</h3><p>时间间隔在go中已经用常量定义，类型为Duration，纳秒为最小单位1(time.Nanosecond)</p><p><code>Add(d Duration)</code> 时间加上一个间隔</p><p><code>Sub(u Time)</code> 返回距离u时间多久。结果为 <code>t-u</code></p><p><code>Equal(u Time)</code> 判断时间是否相同，会有时区的影响</p><p><code>Before(u Time), After(u Time)</code> 判断是否在u之前、之后。</p><p><code>time.Tick(d Duration)</code> 设置一个定时器，本质上是一个通道</p><p><code>ntime.Format(%s)</code> 时间格式化，但是格式化的形式是GO诞生时间…[2006/01/02 15:04:05]</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>程序在运行期间对程序本身进行访问和修改的能力。Go语言使用reflect包提供程序的反射信息。</p><p>现有的使用场景可以举个例子：加载ini文件时，需要动态判断某个字符是什么类型的，这个定义是再代码中的。</p><p><strong>需要注意的是</strong>反射性能并不高，需要尽量少用</p><h3 id="reflect"><a href="#reflect" class="headerlink" title="reflect"></a>reflect</h3><p>每一个对象都又Type,Value两个属性。分别对应reflect.Type 和 reflect.Value。</p><p>也可以使用 <code>TypeOf()</code> 和 <code>ValueOf()</code>两个函数进行对对象的属性获取</p><p>而类型又可以分为：类型Name, 种类Kind类型。比如一个结构体的Name是我们取的名字，而kind是struct类型</p><p><code>t := reflect.Type; t.Name, t.Kind()</code></p><p><code>Elem()</code> 在函数中通过反射的方法修改变量的值，可以使用这个函数来获取对应的指针</p><p><code>IsNil(), IsValid()</code> 判断v持有的值是否为nil，比如指针是否为空。valid判断v是否持有一个值，这个值是否有效</p><blockquote><p>…这里需要再加强学习一下</p></blockquote><h3 id="结构体反射"><a href="#结构体反射" class="headerlink" title="结构体反射"></a>结构体反射</h3><p><code>Field(i int)</code> 用于获取第i个字段的信息，当然也包括<code>.Name</code>, <code>.Index</code>, <code>.Type</code>, <code>.Tag</code> tag是结构体内变量的附加信息，参考json</p><p><code>NumField()</code> 获取结构体中的变量个数</p><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><blockquote><p>Go天生支持并发，这一章对于Go非常重要，我之后会单独起一篇来记录一下他的原理，这里简要说明一下</p></blockquote><p>goroutine类似与线程，属于用户态的线程。当你需要让某个任务并发执行的时候，只需要把这个任务包装为一个函数，开启<code>goroutine</code>去执行这个函数就可以了。使用方法是在函数前加一个 <code>go</code> 就可以了</p><p>Go语言提供了channel在多个goroutine之间进行通信。</p><p><strong>注意闭包的情况</strong>，在go并发的时候，内部的匿名函数如果使用了外部的变量，那么在真正调用的时候会使得结果并不是我们想要的结果。详细参考一下闭包</p><h3 id="结束等待wait"><a href="#结束等待wait" class="headerlink" title="结束等待wait"></a>结束等待wait</h3><p><code>sync.WaitGroup</code> 是一个线程结束标记，类似一个channel，在新建一个线程时候将其加1，每个线程结束都defer一个<code>wg.Done()</code> 这样做直到线程全部结束时，<code>wg.wait()</code>就能通过了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        <span class="built_in">println</span>(i)</span><br><span class="line">    &#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure><h3 id="GMP调度"><a href="#GMP调度" class="headerlink" title="GMP调度"></a>GMP调度</h3><p>OS线程一般都固定的栈内存为2MB，而goroutine的栈一开始设置为2KB，但是并不是固定的，之后可以增大和缩小。</p><ul><li><code>G</code> 存放goroutine的信息，以及和P的绑定等信息</li><li><code>M</code> 是Go运行时对操作系统内核线程的虚拟，M和内核线程一般是1to1的</li><li><code>p</code> 管理一组goroutine队列，其中存放当前goroutine运行的上下文环境，并且自带又自己的队列调度机制。P与M一般也是一一对应的。</li></ul><p>会把m个goroutine分配给n个操作系统线程来执行</p><p><code>runtime.GOMAXPROCS()</code> 可以限制当前进程可以使用的线程个数。默认的是CPU的逻辑核心数，会默认跑满整个CPU</p><p>更加详细的可以参考其他博客 <a href=""></a></p><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p>Go的并发模型是CSP，提倡通过通信共享内存，而不是通过同共享内存来进行通信</p><p>通道像一个传送带或者队列。FIFO的顺序，每个通道需要一个具体的类型指定传输的元素类型</p><p>channel是一个引用类型，需要先初始化才能使用，所以是使用make来进行初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">// 不带缓冲的</span></span><br><span class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>) <span class="comment">// 带缓冲的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把10发送到ch中</span></span><br><span class="line">ch &lt;- <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从ch中拿出到cur中</span></span><br><span class="line">cur := &lt;- ch</span><br></pre></td></tr></table></figure><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p>如果channel没有设置缓冲区，那么在发送的时候会一直等待，直到有人接收。</p><p><code>close(ch)</code> 关闭一个通道，只有在通知方goroutine所有的数据发送完毕了才需要关闭通道，他是可以被GC回收的，因此关闭通道这个操作并不是必须的。</p><pre><code>- 对关闭了的通道进行读会返回0</code></pre><p><code>for range</code> range支持了从通道中取值</p><h3 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h3><ul><li><code>func f1(ch1 chan&lt;- int)</code> 声明一个单向通道，这里是声明了只能进行<strong>写入</strong></li><li><code>func f1(ch1 &lt;-chan int)</code> 声明一个单向通道，这里是声明了只能进行<strong>读出</strong></li></ul><h2 id="多路复用select"><a href="#多路复用select" class="headerlink" title="多路复用select"></a>多路复用select</h2><p>从多个通道里进行取值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ch1:</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">case</span> data := &lt;-ch2:</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>go使用包<code>regexp</code>包进行正则表达式的使用。</p><p>这里有正则的常用规则：</p><p><img src="../../assets/golangREGEX.jpg" alt="golangREGEX"></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="GO" scheme="https://jelech.gitee.io/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>一起学GO(一)</title>
    <link href="https://jelech.gitee.io/posts/41312/"/>
    <id>https://jelech.gitee.io/posts/41312/</id>
    <published>2019-11-03T10:09:33.000Z</published>
    <updated>2019-12-05T04:10:27.040Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="开始前准备一下"><a href="#开始前准备一下" class="headerlink" title="开始前准备一下"></a>开始前准备一下</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">下载连接</a></p><p>windows 版本安装到一个比较好找的目录,比如 F:/Go</p><h3 id="配置Go-PATH"><a href="#配置Go-PATH" class="headerlink" title="配置Go PATH"></a>配置Go PATH</h3><p>添加环境变量GOPATH，写入一个路径，这里是你写代码的地方，用户变量下也有GOPATH【有默认值】，需要更新一下</p><p>新建 bin, pkg, src.</p><p>bin路径加入PATH</p><p>添加GOROOT 并设置为GO安装的目录（这里是自己出了问题才加上的）</p><blockquote><p>使用 <code>go env</code> 检查环境配置是否正确</p></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li>bin 存放编译后的二进制文件</li><li>pkg存放编译后的库文件</li><li>src是放源代码的地方</li></ul><p>再src下以网站的形式构建文件夹：<br>比如创建 jelech.top 名字的文件夹。 这里实际上是写的仓库连接名，所以可以写入github的连接地址</p><p>在jelech.top下创建作者名，比如jelech</p><p>在作者名下创建项目名</p><h2 id="IDE，用VSCODE，不多说了"><a href="#IDE，用VSCODE，不多说了" class="headerlink" title="IDE，用VSCODE，不多说了"></a>IDE，用VSCODE，不多说了</h2><ul><li>安装中文插件</li><li>安装GO插件<ul><li>在写go时候，vscode会提示安装各种插件。而由于墙的原因会下载失败。需手动下载安装</li><li><a href="https://github.com/golang/tools/releases" target="_blank" rel="noopener">从release下载src包</a></li><li>再额外从lint直接拉取 <code>git clone https://github.com/golang/lint.git</code></li><li>到src的根目录，也就是GOPATH上运行 <code>go install golang.org/x/lint</code></li><li>重新运行的时候安装就能成功。还是不行就手动复制到cmd中</li></ul></li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><code>go build</code> 编译到当前目录 -o 重新定义名字，默认名为项目名【文件夹】</p><p><code>go run path</code> 可以直接编译完成后直接运行，但没有保存</p><p><code>go install</code> 编译完成后放到GOPATH/bin路径下</p><h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><p>交叉编译代表在一个平台编译其他平台的代码，需要设置一些东西：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SET</span> CGO_ENABLED=<span class="number">0</span>   # 禁用CGO</span><br><span class="line"><span class="built_in">SET</span> GOOS=linux      # 目标平台</span><br><span class="line"><span class="built_in">SET</span> GOARCH=amd64    # 目标处理架构为amd64</span><br></pre></td></tr></table></figure></p><h2 id="GO辅助命令"><a href="#GO辅助命令" class="headerlink" title="GO辅助命令"></a>GO辅助命令</h2><p><code>go doc builtin.delete</code> 查看内置的go文档</p><h1 id="GO基础"><a href="#GO基础" class="headerlink" title="GO基础"></a>GO基础</h1><p><code>package main</code> 当前包名</p><p><code>import &quot;name&quot;</code> 导入其他包</p><p>只可以可设置全局变量、函数。和python<strong>不一样</strong>, 他是和c++一样，main函数等。</p><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><blockquote><p>标识符和其他语言一样</p></blockquote><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>大部分和其他语言差不多，有一些特殊的，比如<code>select, defer, func, chan...</code></p><h3 id="变量声明再使用"><a href="#变量声明再使用" class="headerlink" title="变量声明再使用"></a>变量声明再使用</h3><p>go语言中变量声明后<strong>必须使用</strong></p><p><code>var name string</code> 声明一个保存字符串类型的变量，名字为name</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量声明</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">    man <span class="keyword">bool</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 声明自动赋值【这里等号前的类型可以省略】</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">"hi"</span></span><br><span class="line"><span class="keyword">var</span> i1 = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// **函数内**使用简短变量声明</span></span><br><span class="line">s3 := <span class="string">"hahah"</span></span><br><span class="line">i2 := <span class="number">15</span></span><br><span class="line">s1, s2 := <span class="number">1</span>, <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3><p>一个下划线, 他不会占用空间，不会分配内存，所以不存在重复声明</p><h3 id="常量-const"><a href="#常量-const" class="headerlink" title="常量 const"></a>常量 const</h3><p>就是普通的常量，和c++类似性质<br>如果某一行没有写值，则表示和上面是一样的。这个只有在const的批量声明时可用</p><h4 id="iota常量计数器"><a href="#iota常量计数器" class="headerlink" title="iota常量计数器"></a>iota常量计数器</h4><p>也就是可用代表为从0开始的enum, 一般使用在const批量声明中，每新增的一行时候，iota会自动+1<br>来用列子检测学习一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    b1 = <span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">    b2 = <span class="literal">iota</span> <span class="comment">//1</span></span><br><span class="line">    _</span><br><span class="line">    b3        <span class="comment">// 3</span></span><br><span class="line">    b4 = <span class="number">100</span>  <span class="comment">// 100</span></span><br><span class="line">    b5        <span class="comment">// 100  记住和上面一样</span></span><br><span class="line">    b6 = <span class="literal">iota</span> <span class="comment">// 6    记住iota是const每新增一行就+1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ul><li>int8</li><li>int16</li><li>int32</li><li>int64</li><li>以上对应无符号uint**</li><li>uintptr 存放指针</li></ul><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><p>无法直接定义二进制，八进制前为0，16进制前为0x</p><h3 id="浮点"><a href="#浮点" class="headerlink" title="浮点"></a>浮点</h3><p>32长度和64长度，默认为float64。不能直接赋值，需要强转函数</p><p><code>f1 := 123.123</code></p><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>complex64 / complex128</p><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>Go中不能将整形转为布尔类型，不能参与数值运算</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>UTF-8编码，天然自动支持中文，<strong>只能用双引号</strong>包括，单引号包括是字符</p><blockquote><p>注意名字是strings，有个s</p></blockquote><ul><li><code>\</code> 为转义字符</li><li><p><code>&quot;`&quot;</code> esc下面的字符用于表示多行字符串和整个转义, 注意这个前缀会加入</p></li><li><p><code>+</code> 进行字符串拼接</p></li><li><code>strings.Split(string, str)</code> 按照str进行分割</li><li><code>strings.Contains(string, str)</code> 包含</li><li><code>strings.HasPrefix</code></li><li><code>strings.HasSuffix</code></li><li><code>strings.Index(str, c)</code> 某个字符的位置，从前往后第一个</li><li><code>strings.LastIndex(str, c)</code> 从后往前第一个</li><li><code>strings.Join(ret[], c)</code> 字符串数组用c进行拼接起来</li><li>string 不可修改，必须强转为 <code>[]byte 或 []rune</code> 类型后再做修改</li><li>单引号存的是int32的整数（中文字符）  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"%T %T\n"</span>, <span class="string">'c'</span>, <span class="string">'测'</span>) <span class="comment">// int32 int32</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p>打印的时候对应 %b:2 %d:10 %o:8 %x:16 %T:类型 %v:打印值(任何类型)<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line">fmt.Printf(<span class="string">"name:%s"</span>, name) <span class="comment">//可以格式化</span></span><br><span class="line"><span class="built_in">println</span>(<span class="string">"name:"</span>, name) <span class="comment">// 只能序列打印</span></span><br><span class="line">s1 := fmt.Sprintf() <span class="comment">// 格式化后返回为字符串</span></span><br></pre></td></tr></table></figure></p><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><p>语句是python和c++的结合体，没有小括号，但有大括号<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Hello! Let's Go0!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="number">2</span> &gt; <span class="number">1</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Hello! Let's Go1!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Hello! Let's Go2!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age := <span class="number">19</span>; age &gt; <span class="number">18</span> &#123;</span><br><span class="line">    <span class="comment">// 临时的age进行判断， 作用域只在if中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环语句只有for语句，但是有很多的变种。break, continue正常使用<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123; <span class="comment">// go中没有++i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// 无限循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s := <span class="string">"123hihi"</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> s &#123; <span class="comment">// 遍历数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> variable:=<span class="number">3</span>;variable &#123; <span class="comment">// 赋值特性和上面的if所说的类似</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">"1"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">"2"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">println</span>(<span class="string">"default"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> age &lt; <span class="number">25</span>:</span><br><span class="line">        <span class="built_in">println</span>(<span class="number">25</span>)</span><br><span class="line">    <span class="keyword">case</span> age &gt; <span class="number">60</span>:</span><br><span class="line">        <span class="built_in">println</span>(<span class="number">60</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fallthrough</span> <span class="comment">// 兼容c语言中的case穿透，意思是执行多个case</span></span><br></pre></td></tr></table></figure><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><blockquote><p>不鼓励使用</p></blockquote><p>设置一个标志位进行跳转</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><code>+ - * / %</code> 基本运算符</p><p><code>++, --</code> 是语句，不能放到=右侧</p><p><code>== != &gt; &gt;= &lt; &lt;=</code> 返回布尔值</p><p><code>&amp;&amp; || !</code> 基本逻辑运算</p><p><code>&amp; | ^ &lt;&lt; &gt;&gt;</code> 位运算符</p><p><code>= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |= ^=</code> 基本赋值运算符</p><h2 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是值类型，赋值时会赋值一个新的过去</p><p><code>len()</code> 求长度</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span> <span class="comment">// 存放大小为10，类型为int的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">a = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">//末尾补0</span></span><br><span class="line">b := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment">// 根据初始值自动推断</span></span><br><span class="line">c := [<span class="number">5</span>]<span class="keyword">int</span> &#123;<span class="number">0</span>:<span class="number">1</span>, <span class="number">4</span>:<span class="number">2</span>&#125; <span class="comment">// 1,0,0,0,2 用【位置：值】赋值</span></span><br><span class="line">x := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>: <span class="number">1</span>, <span class="number">5</span>: <span class="number">2</span>&#125; <span class="comment">// 中间自动添0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维数组</span></span><br><span class="line">d := [<span class="number">1</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">    [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">&#125; <span class="comment">// 3*2 的数组， 3行2列</span></span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><blockquote><p>数组上做的一层封装，是一个可变长度的序列</p></blockquote><ul><li>切片本质就是框住了一块<strong>连续</strong>的内存，所以在对切片的任何修改时，会影响到整个内存映射的数组上</li><li>切片不能直接比较</li><li>声明没初始化才是nil，len()和cap()为0时候并不一定是nil</li><li><strong>注意</strong> 切片是一个<strong>引用</strong>类型，都指向了底层的一个数组</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本和数组一样，但是中括号中没有任何东西</span></span><br><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span> <span class="comment">// s默认值为nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本初始化和数组一样， 可以由数组来初始化</span></span><br><span class="line">s1 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">//不可超过原来的大小，类似python，可省略</span></span><br><span class="line">s2 := s1[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">//左闭右开</span></span><br></pre></td></tr></table></figure><p>切片长度用len()， 可扩充容量为cap()<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="built_in">len</span>(s2)) <span class="comment">// 2 len为长度 取当前切片的长度</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(s2)) <span class="comment">// 3 cap为容量 取当前切片的第一个到切片源最后</span></span><br></pre></td></tr></table></figure></p><p>切片再切片<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s3 := s2[<span class="number">2</span>:] <span class="comment">// 一个元素，3</span></span><br></pre></td></tr></table></figure></p><p><strong>make函数构造切片</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>) <span class="comment">// int类型，长度5，容量5的切片</span></span><br></pre></td></tr></table></figure></p><p><strong>切片的append() 与 copy()</strong></p><p><code>s = append(s, 1)</code> 用于切片元素的添加，必须有接收变量</p><p><code>s = append(s, s1...)</code> 将s1切片拆开添加到s中</p><p>切片的赋值<code>=</code>是引用赋值, 而copy是深拷贝 <code>copy(des, src)</code></p><p><strong>没有删除函数, 需要自定义</strong></p><p><code>a1 = append(a1[:1], a1[2:]...)</code> 删除第一个</p><p><strong>sort函数对切片进行排序</strong></p><p><strong>cap如果不够了会自动增倍.策略为:</strong></p><ul><li>切片item不同类型的处理方式不一样</li><li>新申请容量大于原来 2*old.cap, 最终容量就是新申请的</li><li>如果旧的小于1024则新的翻倍</li><li>如大于1024,则一直增加旧的1/4,直到大于需要的</li><li>如果最终容量计算溢出,则最终容量就是新申请的</li></ul><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><code>&amp;</code> 取地址</p><p><code>*</code> 根据地址取值</p><h4 id="new-make区别"><a href="#new-make区别" class="headerlink" title="new, make区别"></a>new, make区别</h4><ol><li>两者都是申请内存的</li><li>new很少用,用于对基本数据<code>int, string</code>声明</li><li>make只用于slice, map, channel的初始化</li></ol><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map[keyType]valueType</code></p><p>map需要初始化后才能使用 <code>mapname = make(map[keyType]valueType, len)</code> 。尽量再开始就估算好容量，避免在之后进行动态的扩容</p><p>返回值是value值与ok是否能查到值 <code>v, ok := mapNmae[key]</code>， 取不到会返回0值</p><p><code>for k,v := range mapName</code> 遍历key值与value值</p><p>删除不存在的key值时会直接跳过</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funName</span><span class="params">(参数)</span><span class="params">(返回值)</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果返回值有值，则一定要写return，返回值代表在函数中提前声明了一个遍历，如果是命名了的返回值，则return后可以不写。</p><p>参数简写：如果多个参数的类型一致，可以把前面的进行省略<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(x,y,z <span class="keyword">int</span>, a,b <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可变长参数：<code>func f(a int, b ...string)</code> 可以传多个同类型的。<strong>b的类型是切片</strong>。必须放在最后</p><p>函数不可重载，意思是必须名字不一样</p><p>函数中不嫩声明函数</p><h3 id="defer语句"><a href="#defer语句" class="headerlink" title="defer语句"></a>defer语句</h3><p>把后面的跟着的函数延迟到函数即将返回的时候再执行</p><p>比如说可以先用defer关闭一个文件、关闭数据库等操作。他会自动再推出函数的时候自动运行</p><p>执行的顺序是逆序的，也就是说多个defer之间，先声明的defer会后执行</p><h4 id="机制："><a href="#机制：" class="headerlink" title="机制："></a>机制：</h4><p>return语句不是原子操作，他会先返回值赋值，再RET指令，<strong>而defer语句就发生在这里两个操作之间</strong>。</p><p><strong>这里需要提醒一点</strong>，在返回值是在函数名后声明的，那么返回值是这个变量，而如果在defer语句对这个变量操作，会影响到返回值！而如果没有声明名字，是匿名的返回值，或者是在函数内声明的变量进行返回，这样返回值是赋值在其他地方的，defer并不会影响到返回值。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span> <span class="params">(x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span></span> &#123;x++&#125; <span class="comment">// 会修改</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    x := <span class="number">1</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span></span> &#123;x++&#125; <span class="comment">// 不会修改</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="函数类型与变量"><a href="#函数类型与变量" class="headerlink" title="函数类型与变量"></a>函数类型与变量</h3><p>函数作为参数传入,也可以作为返回值：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(ft <span class="keyword">func</span>()</span><span class="title">int</span>)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(x <span class="keyword">func</span>()</span><span class="title">int</span>) <span class="params">(<span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>有匿名函数</strong>，用法是直接省略函数名的声明，这样可以在函数内部声明一个函数。如果是直调用一次的函数，还可以简写成立即执行函数</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>一个函数包含了他外部作用域的其他变量的引用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        x += y</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ret := adder(<span class="number">100</span>)</span><br><span class="line">ret2 := ret(<span class="number">200</span>) <span class="comment">// 300</span></span><br><span class="line">ret3 := ret(<span class="number">3</span>) <span class="comment">// 303</span></span><br><span class="line"><span class="comment">// 注意这里x是封装到了函数内部，这个函数就能带有一定的记忆性了</span></span><br></pre></td></tr></table></figure><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p><code>zip [-AcdDfFghjJKlLmoqrSTuvVwXyz$][-b &lt;工作目录&gt;][-ll][-n &lt;字尾字符串&gt;][-t &lt;日期时间&gt;][-&lt;压缩效率&gt;][压缩文件][文件...][-i &lt;范本样式&gt;][-x &lt;范本样式&gt;]</code></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="GO" scheme="https://jelech.gitee.io/tags/GO/"/>
    
  </entry>
  
  <entry>
    <title>一种高性能的消息传递机制</title>
    <link href="https://jelech.gitee.io/posts/2954/"/>
    <id>https://jelech.gitee.io/posts/2954/</id>
    <published>2019-09-15T11:44:47.000Z</published>
    <updated>2019-10-28T13:40:08.816Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="消息协议与传输【msg-id篇】"><a href="#消息协议与传输【msg-id篇】" class="headerlink" title="消息协议与传输【msg_id篇】"></a>消息协议与传输【msg_id篇】</h1><h2 id="消息流程图解"><a href="#消息流程图解" class="headerlink" title="消息流程图解"></a>消息流程图解</h2><p><img src="../../assets/1568866908982.png" alt="1568866908982"></p><h2 id="消息定义与数据类型"><a href="#消息定义与数据类型" class="headerlink" title="消息定义与数据类型"></a>消息定义与数据类型</h2><h3 id="消息定义"><a href="#消息定义" class="headerlink" title="消息定义"></a>消息定义</h3><blockquote><p><strong>消息</strong>定义+<strong>消息结构</strong>定义，能让底层传输的数据仅仅只有数据，而没有数据类型、名字、分类。两边通过消息id来区分该消息的结构，一边压缩，一边解析。极大的减少了传输的数据量。</p></blockquote><ul><li><p>const常量表</p><p>  定义一些在之后的消息定义中会使用到的常量。比如GS的最大数量、密码的长度、角色名的长度。</p></li><li><p>角色事件</p><p>  定义玩家的一些操作事件，这里的操作包括了在服务器中流转的消息和在客户端内玩家操作需要服务器进一步处理的消息。</p></li><li><p>角色使用物品事件</p></li><li><p>确认取消框</p><p>  服务器通过传送这类消息来让客户端显示某种类型的按钮显示框，客户端接收到这类消息后会自动将用户的选择结果返回给服务器。</p></li><li><p>服务器与服务器之间的公共消息</p><p>  这类的消息是最多的，一般会用是哪两种服务器之间的通信进行定义消息分类名。</p></li><li><p>通用消息</p><p>  一些事件可能是临时加的、或者是非常特殊的消息，或者是所有服务器都能使用的公用消息。这类的消息分类不明显，可以放到通用消息结构内。但是这类消息应注意不要和其他类型的消息<strong>值冲突</strong>在判定消息时可能会引起错误。</p></li><li><p>各类消息结构定义</p><p>  消息结构定义了某种消息的传递结构，比如“id=i,count=i”。其中等号左侧为类型名，用于将消息进行压缩和解压时候的分类，右侧为值的类型。比如(u)short、(u)int、(u)char、string以\0结尾</p></li></ul><h3 id="lua到c-传输数据转换"><a href="#lua到c-传输数据转换" class="headerlink" title="lua到c++传输数据转换"></a>lua到c++传输数据转换</h3><table><thead><tr><th>lua层适用</th><th>c++层对应</th><th>类型定义</th></tr></thead><tbody><tr><td>i</td><td>int</td><td></td></tr><tr><td>I(upper i)</td><td>unsigned int, DWORD</td><td></td></tr><tr><td>w</td><td>short</td><td></td></tr><tr><td>W</td><td>unsigned short, WORD</td><td></td></tr><tr><td>b</td><td>char</td><td></td></tr><tr><td>B</td><td>unsigned char, BYTE</td><td></td></tr><tr><td>f</td><td>float</td><td></td></tr><tr><td>d</td><td>double</td><td></td></tr><tr><td>s</td><td>*char</td><td>不定长字符串，单个消息内只能出现一次，且必须放在末尾</td></tr><tr><td>l(lower L)</td><td>boll</td><td></td></tr><tr><td>N</td><td>字节流数据，在手机端使用</td><td></td></tr><tr><td>S(upper s)</td><td>*char with \0</td><td>字符串数据，末尾带有\0, 定长</td></tr><tr><td>M</td><td></td><td>特殊类型， 转发消息时，使用前一个消息id的定义</td></tr><tr><td>$<typeid></typeid></td><td>复合类型</td><td>比如table</td></tr><tr><td><type>[len]</type></td><td>数组类型</td><td>该type类型的消息重复长度len次</td></tr></tbody></table><h3 id="消息的转换过程"><a href="#消息的转换过程" class="headerlink" title="消息的转换过程"></a>消息的转换过程</h3><h4 id="消息注册"><a href="#消息注册" class="headerlink" title="消息注册"></a>消息注册</h4><p>lua层定义的消息有一个格式，列表中{msgid, base, defstring} 对应了某个msgid应该对应的解析字符串是什么。当然每个进程的c++会将对应的服务器之间的消息保存到对相应的数据内存中。python伪代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># c++存储对应表的变量 vector&lt;vector&lt;pair&lt;string, FieldValue*&gt;&gt;&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_all_common_for_process</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="keyword">for</span> r_def <span class="keyword">in</span> all_def:</span><br><span class="line">       main_server.register_type(r_def.id, r_def.<span class="keyword">def</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># c++层进行注册</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main_server</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_type</span><span class="params">(self, id, defstr)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> check_exist(id):</span><br><span class="line">add_new_msg(id, defstr) <span class="comment"># 对defstr字符串进行解析，保存到对应的解析字段类中</span></span><br></pre></td></tr></table></figure><h4 id="消息转换"><a href="#消息转换" class="headerlink" title="消息转换"></a>消息转换</h4><p>每一个lua消息需要发送的时候，msgid是关键，每个msgid对应的数据串的结构。假设有个服务器需要发送某个msgid值的msg_table到另一个服务器。</p><ul><li><p>消息判断。首先判断一下当前的msgid是否存在。</p></li><li><p>获取用msgid来解析msg_table，将其转换为单纯的c++数据字符串，用递归重复的判断数据。python伪代码如下：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_msg_buffer</span><span class="params">(msgid: int, index: int, retbuffer)</span> -&gt; int:</span></span><br><span class="line">    retlen = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> name, c <span class="keyword">in</span> typedef[msgid]:</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">'i'</span>:</span><br><span class="line">            lua_get_field(L, index, name) <span class="comment"># 通过名字获取table中的一个字段值</span></span><br><span class="line">            retbuffer += lua_toint(L,<span class="number">1</span>) <span class="comment"># 加到返回buffer中（c++中是分开为两次做）</span></span><br><span class="line">            retlen += len(int) <span class="comment"># 更新长度</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'$'</span>:</span><br><span class="line">            retlen += get_msg_buffer(msgid, get_new_index(index), retbuffer)</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line"><span class="keyword">return</span> retlen</span><br></pre></td></tr></table></figure></li></ul><pre><code>通过这样一层一层每一种数据，读取固定的数据，将其转化为固定长度。整个消息结构遍历完毕后，就能得到整个retbuffer字符串，这个字符串中存的全部是数据，没有多余的名字等字段。</code></pre><ul><li><p>在上一步完成后，现在有的数据就是需要传输的数据的msg实体与这个msg的长度</p></li><li><p>然后，在写到输出缓冲区时，还需要包装上msgid和连接id，一条完整的消息结构如下：</p><p>  | 连接id(最外层) | 消息长度 | 消息id | 消息字符串(最内层) |<br>  | ————– | ——– | —— | —————— |<br>  | conn_id        | msg_len  | msg_id | msg                |</p></li><li><p>然后就可以发送了。但是不同的地方是这里的数据没有压缩，也没有加密。那么如果有很长的数据，会进行压缩。而有的数据也需要进行加密。以下我们继续介绍这两部分。</p></li></ul><h4 id="消息压缩"><a href="#消息压缩" class="headerlink" title="消息压缩"></a>消息压缩</h4><p>数据过长也就是字符串过长，压缩的方法有很多种，压缩的效率和压缩的效果成反比，常用的有 <a href="http://en.wikipedia.org/wiki/LZ77_and_LZ78" target="_blank" rel="noopener">LZ77</a> 和 <a href="https://github.com/lz4/lz4" target="_blank" rel="noopener">LZ4</a> 压缩算法。现在的服务器使用的是LZ4算法中的快速版本。总而言之，这两个算法就是是字典查重复字符串，在用滑动窗口的情况下，记录位置长度。</p><h5 id="LZ77-压缩算法是当今最常用的无损压缩算法，是基于字典的带滑动窗口的。"><a href="#LZ77-压缩算法是当今最常用的无损压缩算法，是基于字典的带滑动窗口的。" class="headerlink" title="LZ77 压缩算法是当今最常用的无损压缩算法，是基于字典的带滑动窗口的。"></a>LZ77 压缩算法是当今最常用的无损压缩算法，是基于字典的带滑动窗口的。</h5><ul><li>LZ77 压缩算法的原理 <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wusp/fb98aa28-5cd7-407f-8869-a6cef1ff1ccb?redirectedfrom=MSDN" target="_blank" rel="noopener">微软LZ77文档</a></li></ul><p>假设有一串字符串AABCBBABC，当前这个字符串的长度为9。假设我们读到了第二个字符A，此时程序会记录 <code>(1,1)</code> 代表了距离上一个字符串距离为1，字符的长度为1。而如果读到了第二个B，那么值就会是<code>(2,1)</code> 。</p><p>这样做的话有个问题，对于刚刚的列子来说，串中只有3个字符，存的字典中可能就只有3个。而如果字符数很多，匹配的字符串长度不一定为1的话，这个字典就会非常大。那么匹配一个字符串是否是字典中出现的时候复杂的会异常的高。</p><p>LZ77引入了搜索缓冲区和待检查区。搜索缓冲区代表的是字典字符串，负责的是被检查串的匹配对象。待检查缓冲区代表的是检查窗口，这个窗口当然是滑动的。这也保证了每次LZ77匹配的时候不会匹配过多的字符串导致复杂度急剧上升。</p><ul><li><p>LZ77 压缩算法模拟</p><p>  假设还是刚刚举例子的字符串“AABCBBABC”，现在我们来对其进行编码。</p><p>  一开始，窗口滑入如图位置:</p><p>  <img src="../../assets/1568774174234.png" alt="1568774174234"></p><p>  由图可见，待编码缓冲区有“AAB”三个字符，此时搜索缓冲区还是空的。所以在编码第一个字符时，由于搜索区为空，因此找不到匹配串，输出(0,0, A),。<br>  窗口右移一个单位，如下图</p></li></ul><p><img src="../../assets/1568774230675.png" alt="1568774230675"></p><p>此时待编码区有“ABC”。开始编码。最先编码”A”，在搜索区找到”A”。由于没有超过待编码区，故开始编码”AB”，但在搜索区没有找到匹配字符串，故无法编码。因此只能编码”A”。</p><p>输出(1, 1)。即为相对于待编码区，偏移一个单位，匹配长度为1。窗口右滑动匹配长度，即移动1个单位。如下图</p><p>  <img src="../../assets/1568774716228-1572269822311.png" alt="1568774716228"></p><p>  一样，没找到，输出(0, 0, B),右移1个单号，如下图</p><p>  <img src="../../assets/1568774736504.png" alt="1568774736504"></p><p>  输出（0， 0， C）,右移1个单位，如下图</p><p>  <img src="../../assets/1568774763919.png" alt="1568774763919"></p><p>  输出(2, 1),右移1个单位，如下图</p><p>  <img src="../../assets/1568774781103.png" alt="1568774781103"></p><p>  输出(3, 1)， 右移1个单位，如下图</p><p>  <img src="../../assets/1568774829212.png" alt="1568774829212"></p><p>  开始编码”A”，在搜索缓冲区查找到匹配字符串。由于待编码缓冲区没有超过，继续编码。开始编码”AB”,也搜索到。不要停止，继续编码“ABC”，找到匹配字符串。由于继续编码，则超过了窗口，故只编码“ABC”，输出(5, 3),偏移5，长度3。右移3个单位，如下图</p><p>  <img src="../../assets/1568774868492.png" alt="1568774868492"></p><p>  此时待编码缓冲区为空，停止编码。</p><ul><li><p>字符串的匹配算法 - KMP</p><p>  kmp算法是字符串算法的入门算法。它能在O(n+m)时间里获得一个P模式串在S原串中出现的位置。这里大概讲一下它的原理。</p><p>  假设有字符串BBCABCDABCDABD, 匹配串为ABCDABD。那么一开始匹配会是如下图</p><p>  <img src="../../assets/1568776738553.png" alt="1568776738553"></p><p>  如果是旧方法，那么一定会有对于每一个S串的字符，P串都一个一个的区匹配，这样的复杂度是O(n*m)的。我们从例子中引出算法。假设匹配到了如下的情况，如下图：</p><p>  <img src="../../assets/1568776659022.png" alt="1568776659022"></p><p>  此时P串的前面ABCDAB都匹配成功了，但是最后一个D匹配失败了，如果是老方法，那么整个字符串就只会向后移动一位，从P串的头开始重新匹配。</p><p>  <strong>但是</strong>，如果我们能做到让他每次移动的距离不是1，而是更多，那么就能降低非常多的复杂度。<br>  观察一下模式串P，其中的AB与后面的AB是相等的那么我们移动的位置同样可以是这样的：</p><p>  <img src="../../assets/1568777386708.png" alt="1568777386708"></p><p>  比较一下上面的两个图，由第一个图一直移动需要有AB存在的时候才能继续匹配，这样的情况只能在第二个图里出现，而这个AB在模式串P里是已经能判断了的，并且可以重复利用。那我们就能先处理好模式串P中的自匹配，在利用这个数组，来辅助匹配字符串S。</p><p>  Next数组求的方式就是字符串的前缀和后缀的匹配，这里不详细讲了。<a href="https://blog.csdn.net/starstar1992/article/details/54913261" target="_blank" rel="noopener">可以继续在网上了解一下</a></p><p>  字符串匹配算法里我们常用的还有<strong>字典树，AC自动机，后缀自动机…</strong> 等等。</p></li></ul><h5 id="LZ4是基于LZ77的基础上修改了一些实现方法和存储表使用空间，简化了，但是变得非常的快。"><a href="#LZ4是基于LZ77的基础上修改了一些实现方法和存储表使用空间，简化了，但是变得非常的快。" class="headerlink" title="LZ4是基于LZ77的基础上修改了一些实现方法和存储表使用空间，简化了，但是变得非常的快。"></a>LZ4是基于LZ77的基础上修改了一些实现方法和存储表使用空间，简化了，但是变得非常的快。</h5><ul><li><p>LZ4 压缩算法原理</p><p>  LZ77算法中使用的是搜索缓冲区，实际上并没有额外开其他的空间，这个搜索缓冲区来源于源字符串的位置，被当做了字典使用。</p><p>  而LZ4算法中的字典是用的hash表进行查询，现在的快速版本是：每4个字节进行hash表查询，每种hash值只对应一个槽。这个hash字典中key对应的是一个4字节的字符串，而value则对应的这个字符串的位置。</p></li><li><p>LZ4 压缩算法图解</p><p>  一开始字典中是空的，我们假设现在的待检查区，也就是滑动区块的大小是6。xxhash这段的结果，由于是4字节4字节进行哈希，xxhash会得到一个key值，lz4会在字典中设置这个值的value为当前的字符串的位置：</p><p>  <img src="../../assets/1568791808150.png" alt="1568791808150"></p><p>  假设CABD的hash值为1234，那么表中就会记录下当前的这个位置。</p><p>  下一步会继续读取4个字节，同样是CABD，hash值同样是1234，此时会更新位置5，由于两个的值对应上了。此时会输出这次匹配和上次匹配之间的字符串，再输出值5，比如CABD5</p><p>  <img src="../../assets/1568792003724.png" alt="1568792003724"></p></li></ul><h4 id="消息加密"><a href="#消息加密" class="headerlink" title="消息加密"></a>消息加密</h4><p>Client到BCS的数据有些数据类型是需要加密传输的，比如最简单的例子：密码。但是密码加密可以用不可逆算法MD5处理，而有的数据类型需要通过解密得到其中的数据。</p><p>密钥和公钥</p><h2 id="消息传输"><a href="#消息传输" class="headerlink" title="消息传输"></a>消息传输</h2><h3 id="io模型"><a href="#io模型" class="headerlink" title="io模型"></a>io模型</h3><p>unix下有以下5中io模型。</p><h5 id="1-blocking-IO-阻塞IO"><a href="#1-blocking-IO-阻塞IO" class="headerlink" title="[1] blocking IO - 阻塞IO"></a>[1] blocking IO - 阻塞IO</h5><h5 id="2-nonblocking-IO-非阻塞IO"><a href="#2-nonblocking-IO-非阻塞IO" class="headerlink" title="[2] nonblocking IO - 非阻塞IO"></a>[2] nonblocking IO - 非阻塞IO</h5><h5 id="3-IO-multiplexing-IO多路复用"><a href="#3-IO-multiplexing-IO多路复用" class="headerlink" title="[3] IO multiplexing - IO多路复用"></a>[3] IO multiplexing - IO多路复用</h5><h5 id="4-signal-driven-IO-信号驱动IO"><a href="#4-signal-driven-IO-信号驱动IO" class="headerlink" title="[4] signal driven IO - 信号驱动IO"></a>[4] signal driven IO - 信号驱动IO</h5><h5 id="5-asynchronous-IO-异步IO"><a href="#5-asynchronous-IO-异步IO" class="headerlink" title="[5] asynchronous IO - 异步IO"></a>[5] asynchronous IO - 异步IO</h5><p>“真正”的异步IO需要操作系统更强的支持。在IO多路复用模型中，事件循环将文件句柄的状态事件通知给用户线程，由用户线程自行读取数据、处理数据。而在异步IO模型中，当用户线程收到通知时，数据已经被内核读取完毕，并放在了用户线程指定的缓冲区内，内核在IO完成后通知用户线程直接使用即可。</p><p><img src="../../assets/142333511475767-1572269892400.png" alt="142333511475767"></p><p>相比于IO多路复用模型，异步IO并不十分常用，不少高性能并发服务程序使用IO多路复用模型+多线程任务处理的架构基本可以满足需求。况且目前操作系统对异步IO的支持并非特别完善，更多的是采用IO多路复用模型模拟异步IO的方式（IO事件触发时不直接通知用户线程，而是将数据读写完毕后放到用户指定的缓冲区中）。Java7之后已经支持了异步IO，感兴趣的读者可以尝试使用。</p><p>其中前面4种IO都可以归类为同步IO，而select、poll、epoll本质上也都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。</p><h3 id="epoll与IOCP"><a href="#epoll与IOCP" class="headerlink" title="epoll与IOCP"></a>epoll与IOCP</h3><p>epoll和IOCP都是作为IO复用的代表，在单线程下能进行多个IO的同时监听，相较于select/poll来说，他们复杂度更加优秀。epoll是linux独有的，而IOCP则是用在windows下的。这里我介绍以下epoll。</p><h4 id="epoll原理"><a href="#epoll原理" class="headerlink" title="epoll原理"></a>epoll原理</h4><p>说起epoll就需要简单说一下io问题。我们在socket读取数据的时候，<code>socket.accept()</code>函数会一直阻塞，直到有新的数据到来，底层cpu会同时用户可以进行接收数据了。很明显，如果让进程一直等在这里阻塞，就浪费了大量的事件，况且有的服务器会连接多个服务器，那处理完一遍所有服务器的请求，时间就是<code>服务器个数*处理时间 + 阻塞时间</code>。这里我们假设的是在处理一个数据的时候，其他数据都到来了。</p><p>select解决的是在同一时间监听多个io，并且能自己设置等待时间。这样我们现在的逻辑就能变成：如果等待一定的时间后都没有数据到来，就跳出来处理其他的东西，而此时，select实际上仍然是在监听是否有数据到来。如果有数据到来，select会将这个socket，或者说是文件描述符标记为可读状态，当然一个io可读同时也可写。</p><p><strong>但是select有缺点</strong><br>第一点是他监听的io数量有上限，这个上限是1024。poll解决了这个问题。<br>第二点poll没能解决，每次用户态需要将内核态的数据复制过来，一个一个检查当前这个io是否可以读或者写。这大大降低了select在监听大量io时候的效率。以下是select/poll/epoll在监听io数量上的性能变化：</p><p><img src="../../assets/ioMulti4.png" alt="ioMulti4"></p><h5 id="epoll的快速"><a href="#epoll的快速" class="headerlink" title="epoll的快速"></a>epoll的快速</h5><p>第一点是epoll在被内核初始化时，同时会开辟出epoll自己的内核高速cache区，用于安置每一个我们想监控的socket，这些socket会以红黑树的形式保存在内核cache里，以支持快速的查找、插入、删除。<br>第二点是我们在调用epoll_create时，内核除了帮我们在epoll文件系统里建了个file结点，在内核cache里建了个红黑树用于存储以后epoll_ctl传来的socket外，还会再建立一个list链表，用于存储准备就绪的事件，当epoll_wait调用时，仅仅观察这个list链表里有没有数据即可。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。</p><h5 id="list链表"><a href="#list链表" class="headerlink" title="list链表"></a>list链表</h5><p>list链表中的数据是通过内核的中断来写入的。当我们执行epoll_ctl时，除了把socket放到epoll文件系统里file对象对应的红黑树上之外，还会给内核中断处理程序注册一个回调函数，告诉内核，如果这个句柄的中断到了，就把它放到准备就绪list链表里。所以，当一个socket上有数据到了，内核在把网卡上的数据copy到内核中后就来把socket插入到准备就绪链表里了。</p><h5 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h5><p>红黑树是一棵平衡树，但相较于AVL平衡树的完全平衡来说，红黑树的左右两端的平衡差并不一定是一。</p><blockquote><p>总结一下，epoll的高效是建立在一棵红黑树、一个句柄链表、以及少量内核cache上的。</p></blockquote><h4 id="服务器的监听架构"><a href="#服务器的监听架构" class="headerlink" title="服务器的监听架构"></a>服务器的监听架构</h4><p><img src="../../assets/1568863813336.png" alt="1568863813336"></p><h4 id="创建监听"><a href="#创建监听" class="headerlink" title="创建监听"></a>创建监听</h4><p>在底层，每一个进程都会创建一个epoll监听，再创建一个线程，让线程阻塞地运行epoll进行io的读取。</p><ul><li><p><code>Create()</code> 创建一个新的epoll。</p><ul><li><p>基本socket创建初始化。</p></li><li><p>epoll创建初始化。</p></li><li><p>端口重用，让TIME_WAIT的时间设置为立刻重用。</p></li><li><p>linger字段设置，让socket套接字在关闭时等待套接字内的数据发送完毕再关闭。</p><ul><li><p>so_linger字段</p><p>  <code>iOptValue.l_onoff</code></p><p>  <code>iOptValue.l_linger</code></p><p>  <code>setsockopt(mysock, SOL_SOCKET, SO_LINGER, (char*)&amp;iOptValue, iOptLen)</code></p></li><li><p>设置 l_onoff为0，则该选项关闭，l_linger的值被忽略，等于内核缺省情况，close调用会立即返回给调用者，如果可能将会传输任何未发送的数据；</p></li><li><p>设置 l_onoff为非0，l_linger为0，则套接口关闭时TCP夭折连接，TCP将丢弃保留在套接口发送缓冲区中的任何数据并发送一个RST给对方，而不是通常的四分组终止序列，这避免了TIME_WAIT状态；</p></li><li><p>设置 l_onoff 为非0，l_linger为非0，当套接口关闭时内核将拖延一段时间（由l_linger决定）。如果套接口缓冲区中仍残留数据，进程将处于睡眠状态，直 到（a）所有数据发送完且被对方确认，之后进行正常的终止序列（描述字访问计数为0）或（b）延迟时间到。此种情况下，应用程序检查close的返回值是非常重要的，如果在数据发送完并被确认前时间到，close将返回EWOULDBLOCK错误且套接口发送缓冲区中的任何数据都丢失。close的成功返回仅告诉我们发送的数据（和FIN）已由对方TCP确认，它并不能告诉我们对方应用进程是否已读了数据。如果套接口设为非阻塞的，它将不等待close完成。</p></li></ul></li><li><p>不使用Nagle算法，不会将小包拼接成大包，直接将小包发送出去。</p></li></ul></li></ul><h4 id="线程运行"><a href="#线程运行" class="headerlink" title="线程运行"></a>线程运行</h4><ul><li>创建线程来开始epoll的阻塞等操作，linux下线程创建后会立即运行。线程调用的函数中<ul><li>有epoll_wate的调用，每次获取信息判断为：</li><li>新监听类型：初始化新的sockaddr_in等，进行accept。创建一个新的pConn客户端类，add到服务器的pEpoll监听队列中。</li><li>读类型：调用读函数，写入缓冲区。<ul><li>实现了一个缓冲区类，进行对数据的存储。在其上进行读写操作。<ul><li>读之前会声明一个char*，并同时初始化可以存储的缓冲区大小。判断有空间存储，再开始读取。</li><li>指针的位置来自于缓冲区类得到的空闲空间的首地址。</li></ul></li><li>如果读取的大小大于零。需要更新缓冲区类的属性。</li><li>如果小于等于零。需要判断是否有错误信息。</li></ul></li><li>写类型：调用写函数，从缓冲区中读数据发送出去，和读类中缓冲区操作类似。</li><li>错误类型：错误打印。退出客户端</li></ul></li><li><code>Release()</code> 判断是否已经退出。等待线程退出，关闭各种套接字、epoll。</li></ul><h3 id="读写流"><a href="#读写流" class="headerlink" title="读写流"></a>读写流</h3><blockquote><p>服务器实体和EPOLL层都能作为读者和写者，缓冲区分类为读入、写出两种。m_RBuffer负责接收的数据，m_SRbuffer负责写的数据</p><p><strong>相当于每个服务器一般对应两类线程，一类专门处理epoll阻塞的io请求， 另一类只有一个，专注处理逻辑处理与分发</strong></p></blockquote><h4 id="读写指针图解"><a href="#读写指针图解" class="headerlink" title="读写指针图解"></a>读写指针图解</h4><p>一般情况下，程序运行的时候，在buffer中有读和写两种指针，以下是<strong>读缓冲区</strong>（也就是从外部程序到本程序的数据）：</p><p><img src="../../assets/1568859006435.png" alt="1568859006435"></p><p>在有新的数据来的时候，epoll会在写指针的后面写东西，但此时并不会动写指针，只有当写的数据写完毕了才原子性地修改写指针的位置。这样能保证读指针读取的数据一定是写好了的。<br>epoll读取数据的时候，会让buffer申请一个数据块进行写，如果这个数据块正在被读，那么就会重新申请一个。</p><p>此时的写端为epoll线程，读端为逻辑处理区，要注意的是不同的服务器连接用的是不同的epoll连接对象，每个对象都会有自己的buffer区，这样保证了不同的buffer区存储的一定都是固定的两个服务器的某个方向的数据。</p><p>以下是<strong>写缓冲区</strong>（也就是从本程序到外部程序的数据）：</p><p><img src="../../assets/1568858972162.png" alt="1568858972162"></p><p>最开始，写出数据中有两个队列。一个buffer队列。其中写的有要发送出去的数据，另一个为请求队列，放的是要发送的客户实例指针。在发送数据的时候，就会在两个队列中取出数据，将buffer中的数据使用对应的客户端实例的epoll来发送这个数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="技术探析" scheme="https://jelech.gitee.io/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E6%9E%90/"/>
    
    
      <category term="服务器" scheme="https://jelech.gitee.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="消息传递" scheme="https://jelech.gitee.io/tags/%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92/"/>
    
  </entry>
  
  <entry>
    <title>linux基础篇【转】</title>
    <link href="https://jelech.gitee.io/posts/34317/"/>
    <id>https://jelech.gitee.io/posts/34317/</id>
    <published>2019-09-14T04:09:33.000Z</published>
    <updated>2019-09-14T15:06:33.155Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>只有光头才能变强 <strong>这篇文章是转载自 <a href="https://zhuanlan.zhihu.com/p/36801617" target="_blank" rel="noopener">知乎</a></strong> 虽然很基础，但是感觉基础篇的总览很全。文中主要整体是介绍了linux 的常用命令的使用。</p></blockquote><h1 id="一、为什么我们要学习Linux"><a href="#一、为什么我们要学习Linux" class="headerlink" title="一、为什么我们要学习Linux"></a>一、为什么我们要学习Linux</h1><p>相信<strong>大部分人</strong>的PC端都是用Windows系统的，那我们为什么要学习Linux这个操作系统呢？？？Windows图形化界面做得这么好，日常基本使用的话，学习成本几乎为零。</p><p>而Linux不一样，<strong>可能</strong>刚接触Linux的人会认为：Linux好麻烦哦，不好玩，都是字符界面。不直观、这个破系统是用来干嘛的</p><p>日常用的话Windows是比较顺手的，但是我们要知道的是：我们开发出来的程序<strong>一般都是放在Linux下运行</strong>的。</p><p>那可能就会有人提出疑问了：Windows同样是操作系统，<strong>为啥要放在Linux下，而不放在Windows下呢</strong>？？相信Windows也是可以运行我们写出来的程序的。</p><p>我总结了Linux的<strong>几个优点</strong>：</p><ol><li>免费</li><li>很多软件原生是在Linux下运行的，庞大的社区支持，<strong>生态环境好</strong>。</li><li><strong>开源</strong>，可被定制，开放，<strong>多用户的网络操作系统</strong>。</li><li><strong>相对安全稳定</strong></li></ol><p>参考资料：</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//link.juejin.im/%3Ftarget%3Dhttps%253A%252F%252Fwww.zhihu.com%252Fquestion%252F19738282" target="_blank" rel="noopener">www.zhihu.com/question/19…</a></li></ul><p>所以开发者<strong>选择了Linux</strong>来跑我们自己写出来的程序。</p><h1 id="二、Linux的基础知识"><a href="#二、Linux的基础知识" class="headerlink" title="二、Linux的基础知识"></a>二、Linux的基础知识</h1><p><strong>Linux系统的组成</strong>：</p><ol><li><strong>linux内核</strong>（linus 团队管理）</li><li><strong>shell</strong>：用户与内核交互的接口</li><li><strong>文件系统</strong>：ext3、ext4等。windows 有 fat32 、ntfs</li><li><strong>第三方应用软件</strong></li></ol><h2 id="2-1Shell的基本知识"><a href="#2-1Shell的基本知识" class="headerlink" title="2.1Shell的基本知识"></a>2.1Shell的基本知识</h2><p>除了Shell、其他的都应该挺好懂的，那么<strong>Shell是什么东西呢</strong>？？？</p><blockquote><p>Shell是系统的用户界面，提供了<strong>用户与内核进行交互操作的一种接口</strong>(命令解释器)</p></blockquote><p>Shell可以执行：</p><ul><li><strong>内部命令</strong></li><li><strong>应用程序</strong></li><li><strong>shell脚本</strong></li></ul><p><img src="../../assets/v2-4fcde8239ff2880bfb031a06d9fe1252_hd.jpg" alt="img"></p><p>使用<code>type</code>命令可以<strong>区分</strong>内部命令和外部命令</p><p>于是乎，我们利用Shell就可以干下面这些事了：</p><ul><li><strong>命令行解释(这是用得最多的！)</strong></li><li>命令的多种执行顺序</li><li>通配符（ wild-card characters ）</li><li>命令补全、别名机制、命令历史</li><li>I/O重定向（ Input/output redirection ）</li><li>管道（ pipes ）</li><li>命令替换（ 或$( ) ）</li><li>Shell编程语言（ Shell Script ）</li></ul><p>Shell的主要版本有以下这么多：</p><ul><li>我们<strong>常用(默认)的就是bash</strong>(bourne again shell)</li></ul><p><img src="../../assets/v2-cd92e075aa7969547ea21350c884f1e6_hd.jpg" alt="img"></p><p>使用<code>ps</code>命令观察正在执行的shell</p><p><img src="../../assets/v2-ec001bde288437d0aef5324c5a638382_hd.jpg" alt="img"></p><h2 id="2-2Linux基本目录结构"><a href="#2-2Linux基本目录结构" class="headerlink" title="2.2Linux基本目录结构"></a>2.2Linux基本目录结构</h2><p>在Windows下，会有<strong>基本的目录结构</strong>的：</p><p><img src="../../assets/v2-a91b527c13491c3668b3ab3dd2315810_hd.jpg" alt="img"></p><p><img src="../../assets/v2-e7a0c6942a78a3e13f1b5fe0eac2cc2c_hd.jpg" alt="img"></p><p>Linux下也不例外了，也是有基本的目录结构的：</p><p><img src="../../assets/v2-1f6cdbc3e0765ae8484624eaa2a08ab9_hd.jpg" alt="img"></p><p>Linux 文件系统是一个<strong>目录树的结构</strong>，文件系统结构从一个根目录开始，根目录下可以有任意多个文件和子目录，子目录中又可以有任意多个文件和子目录</p><ul><li><strong>bin 存放二进制可执行文件(ls,cat,mkdir等)</strong></li><li>boot 存放用于系统引导时使用的各种文件</li><li>dev 用于存放设备文件</li><li><strong>etc 存放系统配置文件</strong></li><li>home 存放所有用户文件的根目录</li><li>lib 存放跟文件系统中的程序运行所需要的共享库及内核模块</li><li>mnt 系统管理员安装临时文件系统的安装点</li><li><strong>opt 额外安装的可选应用程序包所放置的位置</strong></li><li>proc 虚拟文件系统，存放当前内存的映射</li><li><strong>root 超级用户目录</strong></li><li>sbin 存放二进制可执行文件，只有root才能访问</li><li>tmp 用于存放各种临时文件</li><li>usr 用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录</li><li>var 用于存放运行时需要改变数据的文件</li></ul><h2 id="2-3命令基本格式"><a href="#2-3命令基本格式" class="headerlink" title="2.3命令基本格式"></a>2.3命令基本格式</h2><p><code>cmd [options] [arguments]</code>，options称为选项，arguments称为参数</p><p>选项和参数都作为Shell命令执行时的输入，它们<strong>之间用空格分隔开</strong>。</p><ul><li>Linux是<strong>区分大小</strong>写的</li></ul><p><strong>一般来说</strong>，后面跟的选项如果<strong>单字符</strong>选项前使用<strong>一个</strong><code>减号-</code>。<strong>单词选项</strong>前使用两个<code>减号--</code></p><ul><li>这是一般的情况，有些命令还是不归属这种规律的(相对较少)</li><li>例子：<code>ls -a</code>和<code>ls -all</code>，<code>a</code> 单个字符使用一个<code>-</code>，一个单词<code>all</code> 使用两个<code>--</code></li></ul><p>在Linux中，<strong>可执行的文件</strong>也进行了分类：</p><ul><li><strong>内置命令</strong>：出于效率的考虑，将一些常用命令的解释程序<strong>构造在Shell内部</strong>。</li><li><strong>外置命令</strong>：存放在/bin、/sbin目录下的命令</li><li><strong>实用程序</strong>：存放在/usr/bin、/usr/sbin、/usr/share、/usr/local/bin等目录下的实用程序</li><li><strong>用户程序</strong>：用户程序经过编译生成可执行文件后，可作为Shell命令运行</li><li><strong>Shell脚本</strong>：由Shell语言编写的批处理文件，可作为Shell命令运行</li></ul><h2 id="2-4通配符"><a href="#2-4通配符" class="headerlink" title="2.4通配符"></a>2.4通配符</h2><p>学过一些正则表达式的或者有点基础的同学对通配符应该就不陌生的了，在Linux也有通配符(在搜索的时候挺有用的)</p><ul><li>*：匹配任何字符和任何数目的字符</li><li>?：匹配单一数目的任何字符</li><li style="list-style: none"><input type="checkbox"> ：匹配[ ]之内的任意一个字符</li><li>[! ]：匹配除了[! ]之外的任意一个字符，!表示非的意思</li></ul><h2 id="2-5文件的类型"><a href="#2-5文件的类型" class="headerlink" title="2.5文件的类型"></a>2.5文件的类型</h2><p>在Linux下文件的类型有这么多：</p><ul><li><p><strong>普通文件</strong><code>-</code></p></li><li><p><strong>目录</strong><code>d</code></p></li><li><p><strong>符号链接</strong><code>l</code></p></li><li><ul><li>硬链接： 与普通文件没什么不同，inode 都指向同一个文件在硬盘中的区块<ul><li>软链接： 保存了其代表的文件的绝对路径，是另外一种文件，在硬盘上有独立的区块，访问时替换自身路径(简单地理解为 Windows 中常见的快捷方式)。</li></ul></li></ul></li><li><p>字符设备文件 <code>c</code></p></li><li><p>块设备文件<code>b</code></p></li><li><p>套接字<code>s</code></p></li><li><p>命名管道<code>p</code></p></li></ul><p>我们常见的就是普通文件，目录和符号链接。其他的了解一下即可</p><p>符号链接参考资料：</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//link.juejin.im/%3Ftarget%3Dhttps%253A%252F%252Fwww.jianshu.com%252Fp%252Fdde6a01c4094" target="_blank" rel="noopener">www.jianshu.com/p/dde6a01c4…</a></li></ul><h3 id="2-5-1用户主目录"><a href="#2-5-1用户主目录" class="headerlink" title="2.5.1用户主目录"></a>2.5.1用户主目录</h3><p>可能在网上查阅资料的时候会出现<strong>用户主目录</strong>这么一个名词，那他是什么呢？？？</p><p>前面已经说了，我们的Linux是<strong>多用户的网络系统</strong>！所以，我们可以在Linux下创建多个用户，<strong>每个用户都会有自己专属的空间</strong>。</p><ul><li>所以，在创建用户时，系统管理员<strong>会给每个用户建立一个主目录</strong>，通常在<code>/home/</code>目录下</li><li>比如：用户osmond的主目录为：<code>/home/osmond</code></li></ul><p>用户<strong>对自己主目录的文件拥有所有权</strong>，可以在自己的主目录下进行相关操作。</p><h1 id="三、常用的命令"><a href="#三、常用的命令" class="headerlink" title="三、常用的命令"></a>三、常用的命令</h1><p>上面说了一堆的基础概念，这是给我们敲命令之前打了一点基础，在敲命令的同时也会遇到一些比较重要的知识点的。那就到时候再说说了</p><h2 id="3-1常用的文件、目录操作命令"><a href="#3-1常用的文件、目录操作命令" class="headerlink" title="3.1常用的文件、目录操作命令"></a>3.1常用的文件、目录操作命令</h2><p>这是我们<strong>使用得最多</strong>的命令了，<strong>Linux最基础的命令</strong>！</p><ul><li>可用 <code>pwd</code>命令查看用户的当前目录</li><li>可用 <code>cd</code> 命令来切换目录</li><li><code>.</code>表示当前目录</li><li><code>..</code> 表示当前目录的上一级目录（父目录）</li><li><code>-</code>表示用 cd 命令切换目录<strong>前</strong>所在的目录</li><li><code>~</code> 表示<strong>用户主目录</strong>的绝对路径名</li></ul><p><strong>绝对路径：</strong></p><ul><li>以斜线（/）开头 ，描述到文件位置的<strong>完整说明</strong> ，任何时候你想指定文件名的时候都可以使用</li></ul><p><strong>相对路径 ：</strong></p><ul><li>不以斜线（/）开头 ，指定<strong>相对于你的当前工作目录而言的位置</strong> ，可以被用作指定文件名的简捷方式</li></ul><p>tips:<strong>输入命令的时候要常用tab键来补全</strong></p><ul><li><code>ls</code>：显示文件或目录信息</li><li><code>mkdir</code>：当前目录下创建一个空目录</li><li><code>rmdir</code>：要求目录为空</li><li><code>touch</code>：生成一个空文件或更改文件的时间</li><li><code>cp</code>：复制文件或目录</li><li><code>mv</code>：移动文件或目录、文件或目录改名</li><li><code>rm</code>：删除文件或目录</li><li><code>ln</code>：建立链接文件</li><li><code>find</code>：查找文件</li><li><code>file/stat</code>：查看文件类型或文件属性信息</li><li><code>cat：</code>查看文本文件内容</li><li><code>more：</code>可以分页看</li><li><code>less：</code>不仅可以分页，还可以方便地搜索，回翻等操作</li><li><code>tail -10</code>： 查看文件的尾部的10行</li><li><code>head -20</code>：查看文件的头部20行</li><li><code>echo</code>：把内容重定向到指定的文件中 ，有则打开，无则创建</li><li><code>管道命令 |</code> ：将前面的结果给后面的命令，例如：<code>ls -la | wc</code>，将ls的结果加油wc命令来统计字数</li><li><code>重定向 &gt; 是覆盖模式，&gt;&gt; 是追加模式</code>，例如：<code>echo &quot;Java3y,zhen de hen xihuan ni&quot; &gt; qingshu.txt</code>把左边的输出放到右边的文件里去</li></ul><p>学了这些命令我们能干嘛？<strong>其实就是在Windows下复制文件、粘贴文件、创建文件、查看文件这几种</strong></p><h3 id="3-1-1常用的文件、目录操作练习题"><a href="#3-1-1常用的文件、目录操作练习题" class="headerlink" title="3.1.1常用的文件、目录操作练习题"></a>3.1.1常用的文件、目录操作练习题</h3><p>巩固一下基础，<strong>来做做题目：</strong></p><ul><li>（1）Linux的shell程序默认是<code>bash 程序</code>；</li><li>（2）Linux命令格式包含三个部分，分别是： <code>命令</code> 、 <code>选项</code> 、 <code>参数</code> ；</li><li>（3）Linux命令选项前为单个减号（-），后面一般为 <code>单字符</code> ，选项前为双减号（–），后面一般为 <code>单词</code>；</li><li>（4）Linux命令中使用的通配符有 <code>？ * []</code> ；</li><li>（5）命令 ls /usr/bin/w* 的效果是 <code>列出指定目录下的所有以w开头的文件或目录</code> ；</li><li>（6）命令 ls /usr/bin/w?? 的效果是 <code>列出指定目录下的以w开头名称长度为3的所有文件或目录</code> ；</li><li>（7）命令 ls /usr/bin/[xyz]* 的效果是 <code>列出指定目录下的文件名以x或y或z开头的所有文件或目录</code> ；</li><li>（8）命令 ls /usr/bin/[!a-h]* 的效果是 <code>列出指定目录下的文件名不以a到h区间字母开头的所有文件或目录</code> ；</li><li>（9）目录操作时，“.” 表示 <code>当前目录</code> ；</li><li>（10）目录操作时，“..” 表示 <code>上一级目录</code> ；</li><li>（11）目录操作时，“-” 表示 <code>上一次工作目录</code> ；</li><li>（12）目录操作时，“~” 表示 <code>用户主目录</code> ；</li><li>（13）命令ln可以建立文件链接，这种链接分为： <code>硬链接</code> 和 <code>软链接</code> ；</li><li>（14）命令touch可以改变文件的三种时间，分别是： <code>access time</code> 、 <code>modify time</code> 、 <code>change time</code> ；</li></ul><blockquote><p>进入/tmp目录，建立一个文件，goldXX（XX为学号的末两位），查看文件的时间</p></blockquote><p><img src="../../assets/v2-083b189266df3b4763c61bbc7660f6e1_hd.jpg" alt="img"></p><blockquote><p>在账户的主目录中，建立一个dog目录，进入dog目录后，建立一个catXX（XX为学号的末两位）目录,进入catXX目录，显示当前目录；然后返回上一级目录，删除catXX目录；</p></blockquote><p><img src="../../assets/v2-8a1edbd12153628e63823d7c2e60a215_hd.jpg" alt="img"></p><blockquote><p>复制/etc/passwd文件到账户主目录，修改账户主目录下passwd为passwdXX（XX为学号的末两位）</p></blockquote><p><img src="../../assets/v2-6ea2d285a98552810b985d3ed1d22468_hd.jpg" alt="img"></p><blockquote><p>查找文件名叫做zcat的文件；复制该文件到/tmp目录；用长格式列出该文件；然后删除/tmp目录下的所有文件，并检查文件是否已被删除</p></blockquote><p><img src="../../assets/v2-c32992a735b62cf8ff3d7547a3f70c60_hd.jpg" alt="img"></p><blockquote><p>复制/etc/hosts文件到账户主目录下；在账户主目录中建立一个硬链接文件（文件名为hostsYYY（YYY为学生姓名拼音缩写）），链接到主目录下的hosts文件；分别查看hosts和hostsYYY的文件的inode信息</p></blockquote><p><img src="../../assets/v2-d464ba90e2a8df38d62e77fac3577a44_hd.jpg" alt="img"></p><blockquote><p>复制/usr/bin/vdir文件到账户主目录下；在账户主目录中建立一个软链接文件（文件名为newdir），链接到主目录下的vdir文件；分别查看vdir和newdir的文件的inode信息</p></blockquote><p><img src="../../assets/v2-b50e7976668eb88b0e873a985aa596e3_hd.jpg" alt="img"></p><blockquote><p>用长格式列出目录/usr/bin目录下的所有文件，输出重新定向到文件outXX（XX为学生学号末两位），检查结果；用长格式列出目录/etc目录下的所有文件，输出结果补充到文件outXX末尾</p></blockquote><p><img src="../../assets/v2-e49b9ac69b467c80f54d02f66c5bac2e_hd.jpg" alt="img"></p><blockquote><p>用长格式列出/usr/bin目录下的所有文件，通过管道与more命令连接，实现对文件列表的浏览</p></blockquote><p><img src="../../assets/v2-663ec64831c48ac2d3c1937a41a18efa_hd.jpg" alt="img"></p><blockquote><p><code>&gt;和&gt;&gt;</code>有何区别？</p></blockquote><p>答：<code>&gt;</code>是<strong>覆盖</strong>方式重定向到新的文件；<code>&gt;&gt;</code>是以<strong>补充</strong>方式，添加到原文件的末尾。</p><blockquote><p>通过管道和more命令，浏览文件列表方便在哪里？</p></blockquote><p>答：对于文件列表超出一个屏幕显示的情况，这种方式可以<strong>分屏浏览，比较方便</strong>。</p><h2 id="3-2文件打包和压缩命令"><a href="#3-2文件打包和压缩命令" class="headerlink" title="3.2文件打包和压缩命令"></a>3.2文件打包和压缩命令</h2><p>在Windows操作系统下，我们会使用WinRAR或者快压等等的压缩软件来进行压缩或者解压。</p><p>在Linux下<strong>当然也存在压缩或解压的操作咯</strong>，下面我们就来学习一下在Linux下是怎么压缩和解压的！</p><p><img src="../../assets/v2-ac115c134dd032a5435e7f9cc5db65a9_hd.jpg" alt="img"></p><p><img src="../../assets/v2-6efeebf101ba6c482b29a74e7b1b5f11_hd.jpg" alt="img"></p><p>压缩的方式也是有好几种，我们<strong>常用</strong>的有下面这三种：</p><ul><li>gzip</li><li>bzip2</li><li>tar</li></ul><p>常用的压缩的命令就有：</p><ul><li><code>gzip filename</code></li><li><code>bzip2 filename</code></li><li><code>tar -czvf filename</code></li></ul><p>常用的解压命令有：</p><ul><li><code>gzip -d filename.gz</code></li><li><code>bzip2 -d filename.bz2</code></li><li><code>tar -xzvf filename.tar.gz</code></li></ul><h2 id="3-3正则表达式-grep"><a href="#3-3正则表达式-grep" class="headerlink" title="3.3正则表达式+grep"></a>3.3正则表达式+grep</h2><p>上面我们已经学过了<code>cat、more、less、tail</code>这些查看文本文件的命令了，但是我想<strong>快速查看这个文本文件下的某些关键字是否存在</strong>，那怎么办？？？</p><p>在Windows下就比较简单的，几乎所有的文本编辑器(记事本)都支持<code>CTRL+F</code>，往里面输入关键字就可查找出来：</p><p><img src="../../assets/v2-6c6f7925d93540e8ca587ae49d9ba206_hd.jpg" alt="img"></p><p>那在Linux下，没有图形界面，没有<code>CTRL+F</code>的情况下，<strong>如果不懂一些命令的话，那还真是难找对应的字符出来</strong>。下面我就来说说如何快速<strong>查找一个文本文件下的某些字符</strong>。</p><h3 id="3-3-1正则表达式"><a href="#3-3-1正则表达式" class="headerlink" title="3.3.1正则表达式"></a>3.3.1正则表达式</h3><p>首先我们就来说说正则表达式，如果接触过的同学就知道：这玩意并不好记。一旦不用就很容易就忘记了，所以只能在用的时候查查了所以下面我就直接给出一些规则了，不多说啦。</p><p><img src="../../assets/v2-ed48988ece4c23cd1ad865e4b5bb87d8_hd.jpg" alt="img"></p><p><img src="../../assets/v2-dc43daa14f6beb7a20d9abbee2bdc8b8_hd.jpg" alt="img"></p><h3 id="3-3-2grep命令"><a href="#3-3-2grep命令" class="headerlink" title="3.3.2grep命令"></a>3.3.2grep命令</h3><p>grep(global search regular expression)是一个<strong>强大的文本搜索工具</strong>。grep 使用正则表达式搜索文本，并把匹配的行打印出来。</p><p>格式：<code>grep [options] PATTERN [FILE...]</code></p><ul><li>PATTERN 是查找条件：<strong>可以是普通字符串、可以是正则表达式</strong>，通常用单引号将RE括起来。</li><li>FILE 是要查找的文件，可以是用空格间隔的多个文件，也可是使用Shell的通配符在多个文件中查找PATTERN，省略时表示在标准输入中查找。</li><li>grep命令不会对输入文件进行任何修改或影响，可以使用输出重定向将结果存为文件</li></ul><p>例子：</p><ul><li><p>在文件 myfile 中查找包含字符串 mystr的行</p></li><li><ul><li><code>grep -n mystr myfile</code></li></ul></li><li><p>显示 myfile 中第一个字符为字母的所有行</p></li><li><ul><li><code>grep &#39;^[a-zA-Z]&#39; myfile</code></li></ul></li><li><p>在文件 myfile 中查找首字符不是 # 的行（<strong>即过滤掉注释行</strong>）</p></li><li><ul><li><code>grep -v &#39;^#&#39; myfile</code></li></ul></li><li><p>列出/etc目录（包括子目录）下所有文件内容中包含字符串“root”的文件名</p></li><li><ul><li><code>grep -lr root /etc/*</code></li></ul></li></ul><blockquote><p>用grep查找/etc/passwd文件中以a开头的行，要求显示行号；查找/etc/passwd文件中以login结束的行；</p></blockquote><p><img src="../../assets/v2-3a50ef99672b7609fbd2413133d136d4_hd.jpg" alt="img"></p><h2 id="3-4几种提高工作效率的方法"><a href="#3-4几种提高工作效率的方法" class="headerlink" title="3.4几种提高工作效率的方法"></a>3.4几种提高工作效率的方法</h2><ul><li><p><strong>自动补全命令</strong></p></li><li><ul><li>TAB键</li></ul></li><li><p><strong>历史命令</strong></p></li><li><ul><li>上下箭头键</li></ul></li><li><p><strong>别名alias</strong></p></li></ul><p>这里感觉要说说的就只有别名alias了，我们下面看看例子就懂了！</p><blockquote><p>显示shell当前已经定义的别名；执行其中的两个定义别名的命令；定义一个别名grep，要求其采用彩色方式显示结果</p></blockquote><p><img src="../../assets/v2-8253211dd5d05c2af9f6837f3f7fe9ef_hd.jpg" alt="img"></p><p><img src="../../assets/v2-7d2d2d68cf968e11dc1141ce2aff1047_hd.jpg" alt="img"></p><h2 id="3-5Shell变量-和-Shell环境"><a href="#3-5Shell变量-和-Shell环境" class="headerlink" title="3.5Shell变量 和 Shell环境"></a>3.5Shell变量 和 Shell环境</h2><p>在Windows下有用户的环境变量，系统的环境变量。在Linux一样也是有的。</p><p><img src="../../assets/v2-ccb5b8c6ec82e3cc9adb2f5988c52205_hd.jpg" alt="img"></p><p>Shell 变量大致可以<strong>分为三类</strong>：</p><ul><li><p><strong>内部变量</strong>：由系统提供，用户只能使用不能修改。</p></li><li><ul><li>?<ul><li>GROUPS</li></ul></li></ul></li><li><p><strong>环境变量</strong>：这些变量决定了用户工作的环境，它们不需要用户去定义，可以直接在 shell 中使用，其中某些变量用户可以修改。</p></li><li><p><strong>用户变量</strong>：由用户建立和修改，在 shell 脚本编写中会经常用到。</p></li><li><ul><li><p>变量赋值（定义变量）</p><ul><li><ul><li><code>varName=Value</code><ul><li><code>export varName=Value</code></li></ul></li></ul></li><li><p>引用变量<code>$varName</code></p></li></ul></li></ul></li></ul><p>Shell变量的<strong>作用域</strong>：</p><ul><li><strong>局部变量</strong>的作用范围仅仅<strong>限制在其命令行所在的Shell或Shell脚本文件中</strong>；</li><li><strong>全局变量</strong>的作用范围则包括<strong>本Shell进程及其所有子进程</strong>。</li><li>局部变量与全局变量<strong>互换</strong>：可以使用 <code>export</code> 内置命令将局部变量设置为全局变量。 可以使用 <code>export</code> 内置命令将全局变量设置为局部变量。</li></ul><p><strong>export命令</strong>：</p><ul><li><p><strong>显示</strong>当前Shell可见的全局变量</p></li><li><ul><li><code>export [-p]</code></li></ul></li><li><p><strong>定义变量值的同时声明为全局变量</strong>。</p></li><li><ul><li><code>export &lt;变量名1=值1&gt; [&lt;变量名2=值2&gt; ...]</code></li></ul></li><li><p>声明已经赋值的某个（些）<strong>局部变量为全局变量</strong>。</p></li><li><ul><li><code>export &lt;变量名1&gt; [&lt;变量名2&gt; ...]</code></li></ul></li><li><p>声明已经赋值的某个（些）<strong>全局变量为局部变量</strong>。</p></li><li><ul><li><code>export -n &lt;变量名1&gt; [&lt;变量名2&gt; ...]</code></li></ul></li></ul><p>Shell环境变量：</p><ul><li>环境变量定义 Shell 的<strong>运行环境</strong>，保证 Shell 命令的正确执行。</li><li>Shell用环境变量来确定查找路径、注册目录、终端类型、终端名称、用户名等。</li><li>所有环境变量<strong>都是全局变量</strong>（即可以传递给 Shell 的子进程），并可以由用户重新设置。</li></ul><p><img src="../../assets/v2-5e3a232eb91bb000cc4171efb1366c37_hd.jpg" alt="img"></p><p><strong>Shell变量：查询、显示和取消</strong>：</p><ul><li><p>显示当前已经定义的所有变量</p></li><li><ul><li>所有<strong>环境变量</strong>：<code>env</code><ul><li>所有<strong>变量和函数</strong>（包括环境变量） ：<code>set</code></li></ul></li></ul></li><li><p>显示某（些）个变量的值</p></li><li><ul><li><code>echo $NAME1 [$NAME2 ……]</code></li></ul></li><li><p>取消变量的声明或赋值</p></li><li><ul><li><code>unset &lt;NAME&gt;</code></li></ul></li></ul><h3 id="3-5-1Shell变量-和-Shell环境练习题"><a href="#3-5-1Shell变量-和-Shell环境练习题" class="headerlink" title="3.5.1Shell变量 和 Shell环境练习题"></a>3.5.1Shell变量 和 Shell环境练习题</h3><blockquote><p>定义Shell变量stuXX（XX为学生学号末两位），初值为学生姓名全拼，用echo命令显示stuXX变量的值；用unset命令取消stuXX变量，检查结果；用env命令观察当前有哪些已经定义好的shell环境变量</p></blockquote><p><img src="../../assets/v2-3038910d6d732c229e292511f5ba2e33_hd.jpg" alt="img"></p><p><img src="../../assets/v2-bc18fb4e4ed1509ba7725a0259cc3e35_hd.jpg" alt="img"></p><blockquote><p>Shell环境变量的值是否可以修改？为什么？</p></blockquote><p>答：环境变量的值一般情况下，可以修改。但一定要<strong>慎重修改</strong>，因为一旦修改错误，对shell正常运行造成严重影响，甚至导致shell无法运行。</p><h1 id="四、VI编辑器"><a href="#四、VI编辑器" class="headerlink" title="四、VI编辑器"></a>四、VI编辑器</h1><p>相信没有用过Linux的同学在看一些段子的时候都会看到过两个编辑器：</p><ul><li>vim</li><li>emacs</li></ul><p>下面我们学习如何简单使用vi。vi 是 “Visual interface” 的简称，它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且<strong>用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的</strong>。</p><ul><li>vi可以看做成我们Windows下的记事本</li><li>vim 即 Vi IMproved，vi 克隆版本之一</li></ul><p>使用Vi来编辑文件：</p><p><img src="../../assets/v2-0901ed18ce2beeb7ef3f22d23ad61c81_hd.jpg" alt="img"></p><p>Vi有三种模式：</p><p><img src="../../assets/v2-0faad2c75ff2da130fb93c6452dce016_hd.jpg" alt="img"></p><h2 id="4-1普通模式"><a href="#4-1普通模式" class="headerlink" title="4.1普通模式"></a>4.1普通模式</h2><ul><li><code>G</code>用于直接跳转到文件尾</li><li><code>ZZ</code>用于存盘退出Vi</li><li><code>ZQ</code>用于不存盘退出Vi</li><li><code>/和？</code>用于查找字符串</li><li><code>n</code>继续查找下一个</li><li><code>yy</code>复制一行</li><li><code>p</code>粘帖在下一行，P粘贴在前一行</li><li><code>dd</code>删除一行文本</li><li><code>x</code>删除光标所在的字符</li><li><code>u</code>取消上一次编辑操作（undo）</li></ul><h2 id="4-2插入模式"><a href="#4-2插入模式" class="headerlink" title="4.2插入模式"></a>4.2插入模式</h2><p>在 Normal 模式下输入插入命令 <code>i、 a 、 o</code>进入insert模式。用户输入的任何字符都被vim<strong>当做文件内容保存起来</strong>，并将其显示在屏幕上。</p><ul><li>在文本输入过程中，若想回到Normal模式下，按 Esc 键即可。</li></ul><h2 id="4-3命令行模式"><a href="#4-3命令行模式" class="headerlink" title="4.3命令行模式"></a>4.3命令行模式</h2><p>Normal 模式下，用户按冒号 <code>:</code>即可进入 Command 模式，此时 vim 会在显示窗口的最后一行 (屏幕的最后一行) 显示一个 “:” 作为 Command 模式的提示符，等待输入命令。</p><ul><li><code>:w</code> 保存当前编辑文件，但并不退出</li><li><code>:w</code> newfile 存为另外一个名为 “newfile” 的文件</li><li><code>:wq</code> 用于存盘退出Vi</li><li><code>:q!</code> 用于不存盘退出Vi</li><li><code>:q</code>用于直接退出Vi （未做修改）</li></ul><p><strong>设置Vi环境:</strong></p><ul><li>:set autoindent 缩进,常用于程序的编写</li><li>:set noautoindent 取消缩进</li><li>:set number 在编辑文件时显示行号</li><li>:set nonumber 不显示行号</li><li>:set tabstop=value 设置显示制表符的空格字符个数</li><li>:set 显示设置的所有选项</li><li>:set all 显示所有可以设置的选项</li></ul><h2 id="4-4Vi练习题"><a href="#4-4Vi练习题" class="headerlink" title="4.4Vi练习题"></a>4.4Vi练习题</h2><blockquote><p>在用户主目录下，执行vi程序，编辑文件install.log；移动光标到第10行，第五个字符；按大写字母G，达到文件末尾；不存盘退出；</p></blockquote><p><img src="../../assets/v2-2285af10a7d22ef7e369051ac1f3b8dc_hd.jpg" alt="img"></p><p><img src="../../assets/v2-6ef5e936a6eedef03c0e0b926d943599_hd.jpg" alt="img"></p><blockquote><p>在用户主目录下，执行vi程序，编辑文件install.log；用/命令查找字符串sudo，复制包含字符串sudo的行</p></blockquote><p><img src="../../assets/v2-a711ded30ed171b30b8357e8817984a8_hd.jpg" alt="img"></p><blockquote><p>在用户主目录下，执行vi程序，编辑文件install.log；进入命令模式，设置显示行号；用？命令查找字符串openssh，用命令n查找下一个</p></blockquote><p><img src="../../assets/v2-74dfd3d28a7286c32ccc06d40e5c7ccb_hd.jpg" alt="img"></p><p><img src="../../assets/v2-98f6169c12ff72d84a148ff8a7535aca_hd.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://jelech.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>游戏服务器源码学习笔记</title>
    <link href="https://jelech.gitee.io/posts/34423/"/>
    <id>https://jelech.gitee.io/posts/34423/</id>
    <published>2019-09-10T09:09:33.000Z</published>
    <updated>2019-10-28T13:33:17.044Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章暂时不公开的哦&lt;/br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="游戏服务器" scheme="https://jelech.gitee.io/tags/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>游戏服务器</title>
    <link href="https://jelech.gitee.io/posts/23842/"/>
    <id>https://jelech.gitee.io/posts/23842/</id>
    <published>2019-09-02T11:44:47.000Z</published>
    <updated>2019-10-28T13:32:52.147Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="技术探析" scheme="https://jelech.gitee.io/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E6%9E%90/"/>
    
    
      <category term="服务器" scheme="https://jelech.gitee.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="游戏" scheme="https://jelech.gitee.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>状态机与行为树</title>
    <link href="https://jelech.gitee.io/posts/65065/"/>
    <id>https://jelech.gitee.io/posts/65065/</id>
    <published>2019-07-21T11:44:47.000Z</published>
    <updated>2019-10-28T13:30:11.122Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>游戏开发中, 玩家操作的每次都可以理解为一个行为, 每次行为的结果会让玩家到某个状态。为了加快开发效率、让整个流程逻辑更清晰，出现了有限自动机。状态树的方法也能应用到这里。《linux高性能服务器》书中也介绍过有限自动机的概念。</p><p>我学习过后，准备在这里对一些内容进行一些总结。</p><h2 id="有限自动机"><a href="#有限自动机" class="headerlink" title="有限自动机"></a>有限自动机</h2><blockquote><p>DFA 确定的有限状态自动机。FSM有限状态自动机，对于一个流程，有开始状态与终止状态，每个操作、事件对应一个行为，行为过后会转换到另一个状态。</p></blockquote><p>……其实上面部分比较熟悉，需要花点事件自己说明白，待补充</p><h2 id="行为树"><a href="#行为树" class="headerlink" title="行为树"></a>行为树</h2><blockquote><p>BT(Beahvior Tree) 是有行为节点组成的树状结构。节点是有层次的，子节点由其父节点进行控制。节点分为多种，每次会对子节点进行操作。如果满足某种条件则递归式的继续运行子节点的行为。执行返回有Success、Failure、Runing。</p></blockquote><h3 id="节点分类"><a href="#节点分类" class="headerlink" title="节点分类"></a>节点分类</h3><ul><li>序列(Sequence)节点：按照序列的形式执行所有节点，如果某个节点失败则返回失败</li><li>循环(Loop)节点：循环的执行所有子节点一定的次数，可以设置为无限循环</li><li>条件(Condition)节点：如果满足某个条件则返回成功或者失败</li><li>动作(Action)节点：根据动作的结果返回成功、失败和运行</li><li>等待(Wait)节点：等待一定时间过去后返回成功</li></ul><h3 id="运行-Runing-状态"><a href="#运行-Runing-状态" class="headerlink" title="运行(Runing)状态"></a>运行(Runing)状态</h3><blockquote><p>行为节点返回成功和失败都会通知父节点做相应的动作。</p></blockquote><p>如果是返回的行状态，则父节点会继续运行这个动作，直到返回为成功，才继续运行之后的节点。<br>我们称之为(#`O′)伪阻塞。这是因为每次运行的时候都是跳出了子节点，再进入子节点的，只是返回的是运行的时候，每一帧的下一步操作都是进入这个节点。</p><p>假设现在有流程“走过去”，做“采矿”再做“返回”，一颗行为树就可以表达完毕，每件事情都是持续的，如果没有RUNNING，那其实就更像一颗“决策树”而非“行为树”。</p><h3 id="解决伪阻塞"><a href="#解决伪阻塞" class="headerlink" title="解决伪阻塞"></a>解决伪阻塞</h3><h4 id="使用前置"><a href="#使用前置" class="headerlink" title="使用前置"></a>使用前置</h4><blockquote><p>每个节点都可以添加一个<strong>前置</strong>附件或者<strong>后置</strong>附件</p></blockquote><p>添加前置附件，设置执行时机为Update或Both。name每次执行节点之前都会先执行配置里的条件。</p><h4 id="使用parallel节点"><a href="#使用parallel节点" class="headerlink" title="使用parallel节点"></a>使用parallel节点</h4><p>该节点作用为“一遍检查条件、一遍执行动作”。该节点后的节点运行的时候回进行一次判断。</p><h2 id="有限状态机和行为树"><a href="#有限状态机和行为树" class="headerlink" title="有限状态机和行为树"></a>有限状态机和行为树</h2><p>对于一系列事件，有限状态机更多表现出来的形式是一种<strong>有向图</strong>的形式，而行为树则是因为逻辑更像一个<strong>树形</strong>结构。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="技术探析" scheme="https://jelech.gitee.io/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E6%9E%90/"/>
    
    
      <category term="服务器" scheme="https://jelech.gitee.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>短到超乎想象！！！</title>
    <link href="https://jelech.gitee.io/posts/30301/"/>
    <id>https://jelech.gitee.io/posts/30301/</id>
    <published>2019-05-25T13:09:57.000Z</published>
    <updated>2019-05-26T02:51:51.936Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="快排短到了15行"><a href="#快排短到了15行" class="headerlink" title="快排短到了15行"></a>快排短到了15行</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> curPos = l, tempVal = nums[l]; <span class="comment">// curPos代表前面的数都是小于nums[l]的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &lt; tempVal)</span><br><span class="line">            swap(nums[i], nums[++curPos]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums[l], nums[curPos]);</span><br><span class="line">    quickSort(nums, l, curPos - <span class="number">1</span>);</span><br><span class="line">    quickSort(nums, curPos + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="大数乘法短到了22行"><a href="#大数乘法短到了22行" class="headerlink" title="大数乘法短到了22行"></a>大数乘法短到了22行</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">ans</span><span class="params">(<span class="string">""</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiBigIntegerDFS</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> num, <span class="keyword">const</span> <span class="built_in">string</span> &amp;a, <span class="keyword">const</span> <span class="built_in">string</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>, k = i, tempa, tempb;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = i, j = <span class="number">0</span>; k &gt; <span class="number">0</span>; k--, j++) &#123; <span class="comment">// 把所有个数位长度相等的加一起，得到这一位的答案</span></span><br><span class="line">        tempa = tempb = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= b.size()) tempb = b[k - <span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; a.size()) tempa = a[j] - <span class="string">'0'</span>;</span><br><span class="line">        num += tempa * tempb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i) multiBigIntegerDFS(i - <span class="number">1</span>, num / <span class="number">10</span>, a, b);</span><br><span class="line">    ans += num % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiBigInteger</span><span class="params">(<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(*a.begin() == <span class="string">'-'</span>) flag *= <span class="number">-1</span>, a.erase(a.begin());<span class="comment">// 处理正负号</span></span><br><span class="line">    <span class="keyword">if</span>(*b.begin() == <span class="string">'-'</span>) flag *= <span class="number">-1</span>, b.erase(b.begin());</span><br><span class="line">    multiBigIntegerDFS(a.size() + b.size() - <span class="number">1</span>, <span class="number">0</span>, a, b);</span><br><span class="line">    <span class="keyword">while</span>(*ans.begin() == <span class="string">'0'</span>) ans.erase(ans.begin()); <span class="comment">// 处理前导0</span></span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">-1</span>) ans.insert(ans.begin(), <span class="string">'-'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="算法" scheme="https://jelech.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jelech.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>今日信息</title>
    <link href="https://jelech.gitee.io/posts/58264/"/>
    <id>https://jelech.gitee.io/posts/58264/</id>
    <published>2019-05-17T12:31:17.000Z</published>
    <updated>2019-05-17T08:22:30.403Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19GfbyW1Fdpl8HopmXfJcK7Cg+NXK0B1BDL+0057mGD42VSwpgr8sljPPHDrVhe8c30HTaRY5gibwgJo7Jq+OssIYZNU4448P+8l9WdiSu7t733u3O5EhnldMONoHdVwQoXMk0k+zmdhnxZrqfKyhyY9J07xcWnYxc5V8+U7zUc/dl5aMMgrlLVOALKhZDvjaD7aWShRb0PHAQFQSwNYRLSX3DGhCA4mu35IdAAWn27KV2ZayqKxBh2bOCnM7oATnFi+iiTh0LTlSTaBV15cZ/anqPBObcEdzclLQIRfN0onRl/fnZQpqj8fP7cTbpDRqjKgwHoXtWE0uierR9gxK6IukxPMnpe+y6v+ltG5yGpsOMM8WwCfA4N7HoOGDBrzP/S7kco56/TGMCs5zR5a8cgb7kW9yvmb4X9+8X68fe6VXDJm4FAEpIynaJ+XgGkiWiFbBTHgl6G8cvzco/zdkPndyemjh5hT0RUSvU8nV3qK5TgE2ixkaxWDqs1AHBrz5kBNbLiuNf92BQF03QCqRz44TOFzcI2TuE4MtWN3xIZ7NPkuMW0f1vkTMlt/Cf2qpNWeHEn2AN1sbUubL0kcqi7227ojkwBY0vxCHwOUOkKQ4RnnT+nbuSXBuducDTR3xmwRv79+zDEjLcdakSndtLJ8nOqFj32gHJDSjYZFPFRDKNNKsNigBBhKQ/NCIwKPDuqSXH3Tv2cCHIu52asO97yCjoTCNc/qP+sdbtVgjHd/g91nYCzlVCMyEi8aOKxypCze1h13yVEVHRD5pC4YwBCYUo6BJh83LavxdSbEyxJzULZKIDtuatK0xUGKz79WmOS+x+vgLSGWArTMmA17zT36gz1QMD3N+9By69xCaNWUVEdTqJeq7FfLNFt4FlqYn0OuTo1Yg4x7UbkaCxeGD7EIKwZfWZ76DRzyDDIkFwDVuCUix9SDwaokYm9dWxVsA+fZeFK7D18+oGFT8e5rpuMkWQbvxWD6ndH/OPDunZGMtY2+6dT0FTsNESmHAzhmstsXqsLx9EodyMsDDhzxu8ceEw0ZPr5nD7a40CkHZJ8f2nGS3HxIRHyppB8Kb7VMixIR5jDGR4jYdfI8oyDEoHnDttCi6hjDY7NFumR15aJZz2pTib6tysiSY9gOxH54eb8S8T8m/pv6RaYiB7EUx40/7DN4oNBACfiuSPg35Al3uzTHCe+xzng5lPN/gjHJ07ON31wAsf5HqArycSAjhxsjOmS2zZWIDtizbo/R653W0IIC5Dx5ftTxxPLHnvRLbyuu1gKHb9zlhvR0HCrxuLeRwYKEDsxdsYz1x6KkHkZSslqeGHI54JtuyV6WliBlAtbQUXctXbSXdNaR4kVhPJteU0E5N+tT+xZVaBIJBHj/GjFBGUlx8DXVujyQ4mJgTewU1BiiA5/CVi8WZBkwaaYzKwV0VFUooyieWy9HEhBO/WcanCWDwcFCQpE1/veuG9lcXnRNQ26PvIFAWTVZs/0BtlSYzf5SuhlggbGlSl9ZdWbvgyXrPsXS0qkC7jHK0QaLr7mpAqD8I/Rs+mfQVViPujBT3sDwDAHQHX5hedHSPyDTloESQQ3qKg5wNkaIxzZHtM+HCaE1hrPDK/StV4zs7HCzUFOa8CUJonCY4ocTYLbb078FDPXG3QAA5zM7Ojgs4Dbfk18G58uNU278jOpZekiPOYSxpN+chPW9lH+2WxfXOknTlKMj91F8nBUSFg+DtWKifhNJ+9xzXbxCCfBDoJ4OGxxmIIxLGAJea2bmjtz3cgXuls/AQH++RKUzGpM9IEkPslrX5AvCNJvDqqw8zGqt5olx1y1goT38X9e3KmnO14Um/8UcvsQDN88gce1i45MwLhAoIl0rwY3YhmVPBFW+Ypt6l7cKtmSvwZUTek6sfkvObQDULs44q05WZau/FBlhwbMxHAyCnCYVZJNqOqqWp/sNAXEZsMufodbto3yjqUrfnFUeXNumDd/QIsZYU4QIpQ21P/IeWSwZKciLViOsRe4NRR9chn8KcY6nVfyMBf/V+ujGButC35a+evRnvr9mgzaZyTYCSjiGpkwI1TsKbRmv1l3F5KWTJ7Z0n+dawTr3/xNvPS1AlMH9bHpLcUQpEMsM+Z3LwHa+C2JGvHtK5pRTm7CtQJK4ZA94AWxTE5Kfymx9S7q9KoRq0bm11X2zzQIXLAA808AMc/udUgUoNhKBwrzndd02vShkAv0K9TQFeBx9WgfI2z2fKrgnDFC4N7lI72XFOyl7wtDEnShkUaGf2cTUw4+UjDOZL8n20gRguSTgshmbdgICDRvzfVCUA32S6KfB0YcZ+vOVCQvnId0sXJP19cIn3QTz16o5jP51/o3AkX4tqf710geC3qry6Ro7GfIMksP9SQME6Du2y/N57CX3JWoWhfJPYUanoo3/Y4fXDi7AkPLET1RpHW7RulXZsetupzE0SE3Pvone28rBDQixgxpXJPwue8KvD7jsWs5zlzbGC07p2Efzd3jfQcPVpyFkqXsJLMlFCZ3755Sx6yOUvdaDafrh7ufrvhuOp34nLoBQbEsKfq9f4AIq+LXFbZoK84h0Hjoveoe0ECv7KQVuNcVVhjKdzGtartH1+rw9+gAEvjE31T/VwwKk4mBcKPpkegDa8z+PnQWegR03rmuSoiGjjklRJHO73k4J5vGvM64lN7Nnaw/8deKyzhprzOH4561jt0JvNsP0Mli9L0qcdQjlklt4pKz2akWltBQ6OkZkRurlu4bhHVi3NRfJQsuJceIspmd7nkrVyJORDnTG3opbEWQXoDzFSXABwfLzRp1vbvS+tqXvzzkL4FA0FVvJC48GFBevo/kLo7J95c0+Hr/3rPXfNjB1ukLLuXnNodQj/xoJCWwmyTAQQQvwywP44WsxxqhCRqQcSPmhtIAQj0+Gc/ZWqdnQcO4/vU6Rndp7L+4+m2dsd5+SxLeBRZut3NwSNx2Z2u9hDjwlsvNVPLQMR17WJFLz6mkPzThOCgiLDG9LEecZULWjKwllqgdn/T/TYMMsEtm2m3encoRXE6GdWYzdY2twqoD6DOhKBEkL5Od7UiBQa4iW70EESLxxZGKzEVc5uXSpPARJHOS4Mq01TsaXvZzPJl/Wx7q3Q5pcBlYnZSTyFwQKol5/cID9AhkxQfOwV/6+eVKYVkXJzRdW2XY7tALPF5UzgYbrkiOxD4k0ECxMMRsneANrUa6lzyIt8FTG3diVZ0M4pyAotx9uTKv72botAbSMyJ79B6oH0Rt05lhXQxw5m8bsw==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://jelech.gitee.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://jelech.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习（一）</title>
    <link href="https://jelech.gitee.io/posts/4539/"/>
    <id>https://jelech.gitee.io/posts/4539/</id>
    <published>2019-05-08T03:15:09.000Z</published>
    <updated>2019-05-08T04:26:55.961Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="Redis-key-value数据库（一）"><a href="#Redis-key-value数据库（一）" class="headerlink" title="Redis key-value数据库（一）"></a>Redis key-value数据库（一）</h1><blockquote><p>基础使用移植到单独的一篇文章中：《速查Redis》</p></blockquote><h2 id="数据结构与对象"><a href="#数据结构与对象" class="headerlink" title="数据结构与对象"></a>数据结构与对象</h2><blockquote><p>redis中实现了一些redis自用的、快速的数据结构。他们组成了redis内部的运行结构，也展现了redis是如何存储key-value值的。他们分别为：</p></blockquote><ul><li>简单动态字符串 | 对c语言字符串的封装，优化了许多特性</li><li>链表 | 双向链表</li><li>字典 | 哈希字典，可以进行扩展收缩操作</li><li>跳跃表 | 快查节点，有序集合的底层与内部数据结构中使用</li><li>整数集合 | 集合键的底层实现，只支持升级操作</li><li>压缩列表 | 列表键与哈希键的底层实现</li><li>对象 | 对以上结构进行包装，每个两种以上的编码方式，自带内存回收机制</li></ul><blockquote><p>之后再详细更新数据结构的内容</p></blockquote><h2 id="单机数据库操作"><a href="#单机数据库操作" class="headerlink" title="单机数据库操作"></a>单机数据库操作</h2><blockquote><p>基础使用移植到单独的一篇文章中：《速查Redis》</p></blockquote><ol><li>数据库由dict和expires两个字典构成，dict负责保存键值对，expires负责键的过期时间</li><li>主服务器发现过期键后会给所有的从服务器发送DEL命令，显式地删除键。而从服务器发现过期键后并不会删除，而是等待主节点发来DEL命令</li></ol><h4 id="过期键的删除策略"><a href="#过期键的删除策略" class="headerlink" title="过期键的删除策略"></a>过期键的删除策略</h4><ul><li><p>定时删除：（主动）创建一个定时器，让键在<strong>过期时间来临</strong>时，立即对键进行删除操作</p></li><li><p>惰性删除：（被动）放任过期的键不管，只有在对键进行访问前，进行检查。如果过期，则删除并返回null</p></li><li><p>定期删除：（主动）<strong>每隔一段时间</strong>对数据库进行全盘检查，删除过期的键</p><p>  而我们常使用的是第二个与第三个的结合</p></li></ul><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><blockquote><p>Redis是保存在内存上的数据库，如果断电，则数据会被完全清除。为了持久化数据，出现了RDB持久化技术。他的工作方法是对内存上的键值对数据进行二进制压缩后，写入到磁盘中。</p></blockquote><p><code>SAVE</code>停止redis现在的工作，进行RDB保存，数据量大的时候会让数据库怠机</p><p><code>BGSAVE</code>创建一个子进程进行RDB保存，父进程继续进行数据接收返回操作，但操作的数据会暂时保存在RDB缓存空间</p><p><strong>自动保存</strong>则需要在配置文件中设置save选线项<br>比如<br>save 900 1代表如果900秒之内有进行1次操作，就进行保存。当然，他是可以设置多个的。</p><p>如果不设置，redis会有默认的<br><code>save 900 1</code><br><code>save 300 10</code><br><code>save 60 10000</code></p><p>​    </p><p>dirty计数器记录了距离上一次save/bgsave操作经历了多少次操作，lastsave保存的是时间</p><h4 id="RDB文件的结构"><a href="#RDB文件的结构" class="headerlink" title="RDB文件的结构"></a>RDB文件的结构</h4><table><thead><tr><th style="text-align:left">REDIS</th><th>db_version</th><th>databases</th><th>EOF</th><th>check_sum</th></tr></thead><tbody><tr><td style="text-align:left">5字节</td><td>4字节</td><td>数据库大小字节</td><td>1字节</td><td>8字节</td></tr><tr><td style="text-align:left">字符’REDIS’</td><td>0006版本号</td><td>数据库号与保存的键值对</td><td>结束符</td><td>校验和</td></tr><tr><td style="text-align:left"></td><td></td><td>SELECTDB 表示接下来要读一个数据库号</td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td>db_number 数据库号</td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td>key_value_pairs键值对<br><code>[EXPIRESTIME_MS/]TYPE/key/values</code></td><td></td></tr></tbody></table><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><blockquote><p>翻书更新累了。。休一下</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="redis" scheme="https://jelech.gitee.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>c++进阶学习笔记</title>
    <link href="https://jelech.gitee.io/posts/26201/"/>
    <id>https://jelech.gitee.io/posts/26201/</id>
    <published>2019-05-02T10:09:33.000Z</published>
    <updated>2019-10-28T13:14:15.012Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="cpp进阶学习"><a href="#cpp进阶学习" class="headerlink" title="cpp进阶学习"></a>cpp进阶学习</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="基类和派生类"><a href="#基类和派生类" class="headerlink" title="基类和派生类"></a>基类和派生类</h3><p>一个类可以派生自多个类，这意味着，它可以从多个基类继承数据和函数。定义一个派生类，我们使用一个类派生列表来指定基类。类派生列表以一个或多个基类命名，形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">derived</span>-<span class="title">class</span>:</span> access-specifier base-<span class="class"><span class="keyword">class</span></span></span><br></pre></td></tr></table></figure><p>其中，访问修饰符 access-specifier 是 <strong>public、protected</strong> 或 <strong>private</strong> 其中的一个，base-class 是之前定义过的某个类的名称。如果未使用访问修饰符 access-specifier，则默认为 private。</p><h3 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h3><p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p><p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p><ul><li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li><li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li><li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li></ul><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p><p>C++ 类可以从多个类继承成员，语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> &lt;派生类名&gt;:</span>&lt;继承方式<span class="number">1</span>&gt;&lt;基类名<span class="number">1</span>&gt;,&lt;继承方式<span class="number">2</span>&gt;&lt;基类名<span class="number">2</span>&gt;,…</span><br><span class="line">&#123;</span><br><span class="line">&lt;派生类类体&gt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="多继承-环状继承时"><a href="#多继承-环状继承时" class="headerlink" title="多继承(环状继承时)"></a>多继承(环状继承时)</h4><p>A-&gt;D, B-&gt;D, C-&gt;(A，B)，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class D&#123;......&#125;;</span><br><span class="line">class B: public D&#123;......&#125;;</span><br><span class="line">class A: public D&#123;......&#125;;</span><br><span class="line">class C: public B, public A&#123;.....&#125;;</span><br></pre></td></tr></table></figure><p>这个继承会使D创建两个对象,要解决上面问题就要用<code>虚拟继承格式</code></p><p>格式：class 类名: virtual 继承方式 父类名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class D&#123;......&#125;;</span><br><span class="line">class B: virtual public D&#123;......&#125;;</span><br><span class="line">class A: virtual public D&#123;......&#125;;</span><br><span class="line">class C: public B, public A&#123;.....&#125;;</span><br></pre></td></tr></table></figure><p>虚继承–（在创建对象的时候会创建一个虚表）在创建父类对象的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A:virtual public D</span><br><span class="line">B:virtual public D</span><br></pre></td></tr></table></figure><h2 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h2><h3 id="可重载运算符-不可重载运算符"><a href="#可重载运算符-不可重载运算符" class="headerlink" title="可重载运算符/不可重载运算符"></a>可重载运算符/不可重载运算符</h3><p>下面是可重载的运算符列表：</p><table><thead><tr><th>双目算术运算符</th><th>+ (加)，-(减)，*(乘)，/(除)，% (取模)</th></tr></thead><tbody><tr><td>关系运算符</td><td>==(等于)，!= (不等于)，&lt; (小于)，&gt; (大于&gt;，&lt;=(小于等于)，&gt;=(大于等于)</td></tr><tr><td>逻辑运算符</td><td>\</td><td>\</td><td>(逻辑或)，&amp;&amp;(逻辑与)，!(逻辑非)</td></tr><tr><td>单目运算符</td><td>+ (正)，-(负)，*(指针)，&amp;(取地址)</td></tr><tr><td>自增自减运算符</td><td>++(自增)，–(自减)</td></tr><tr><td>位运算符</td><td>\</td><td>(按位或)，&amp; (按位与)，~(按位取反)，^(按位异或),，&lt;&lt; (左移)，&gt;&gt;(右移)</td></tr><tr><td>赋值运算符</td><td>=, +=, -=, *=, /= , % = , &amp;=, \</td><td>=, ^=, &lt;&lt;=, &gt;&gt;=</td></tr><tr><td>空间申请与释放</td><td>new, delete, new[ ] , delete[]</td></tr><tr><td>其他运算符</td><td>()(函数调用)，-&gt;(成员访问)，,(逗号)，<a href="下标"></a></td></tr></tbody></table><p>下面是不可重载的运算符列表：</p><ul><li><code>.</code>：成员访问运算符</li><li><code>., -&gt;</code>：成员指针访问运算符</li><li><code>::</code>：域运算符</li><li><code>sizeof</code>：长度运算符</li><li><code>?:</code>：条件运算符</li><li><code>#</code>： 预处理符号</li></ul><h4 id="类成员访问运算符"><a href="#类成员访问运算符" class="headerlink" title="类成员访问运算符"></a>类成员访问运算符</h4><p>类成员访问运算符（ -&gt; ）可以被重载，但它较为麻烦。它被定义用于为一个类赋予”指针”行为。运算符 -&gt; 必须是一个成员函数。如果使用了 -&gt; 运算符，返回类型必须是指针或者是类的对象。</p><p>运算符 -&gt; 通常与指针引用运算符 * 结合使用，用于实现”智能指针”的功能。这些指针是行为与正常指针相似的对象，唯一不同的是，当您通过指针访问对象时，它们会执行其他的任务。比如，当指针销毁时，或者当指针指向另一个对象时，会自动删除对象。</p><p>间接引用运算符 -&gt; 可被定义为一个一元后缀运算符。也就是说，给出一个类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Ptr&#123;</span><br><span class="line">   //...</span><br><span class="line">   X * operator-&gt;();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类 <strong>Ptr</strong> 的对象可用于访问类 <strong>X</strong> 的成员，使用方式与指针的用法十分相似。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void f(Ptr p )</span><br><span class="line">&#123;</span><br><span class="line">   p-&gt;m = 10 ; // (p.operator-&gt;())-&gt;m = 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句 p-&gt;m 被解释为 (p.operator-&gt;())-&gt;m。</p><h3 id="值得注意的是"><a href="#值得注意的是" class="headerlink" title="值得注意的是:"></a>值得注意的是:</h3><ul><li>1、运算重载符不可以改变语法结构。</li><li>2、运算重载符不可以改变操作数的个数。</li><li>3、运算重载符不可以改变优先级。</li><li>4、运算重载符不可以改变结合性。</li></ul><h3 id="静态多态"><a href="#静态多态" class="headerlink" title="静态多态"></a>静态多态</h3><p>或<strong>静态链接</strong> - 函数调用在程序执行前就准备好了。有时候这也被称为<strong>早绑定</strong>，因为 area() 函数在程序编译期间就已经设置好了。</p><p>但现在，让我们对程序稍作修改，在 Shape 类中，area() 的声明前放置关键字 <strong>virtual</strong>。此时，编译器看的是指针的内容，而不是它的类型。因此，由于 tri 和 rec 类的对象的地址存储在 <em>shape</em> 中，所以会调用各自的 area() 函数。</p><p>正如您所看到的，每个子类都有一个函数 area() 的独立实现。这就是<strong>多态</strong>的一般使用方式。有了多态，您可以有多个不同的类，都带有同一个名称但具有不同实现的函数，函数的参数甚至可以是相同的。</p><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p><strong>虚函数</strong> 是在基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p><p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong>。</p><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>您可能想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基类中又<strong>不能对虚函数给出有意义的实现</strong>，这个时候就会用到纯虚函数。</p><p>我们可以把基类中的虚函数 area() 改写如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:       </span><br><span class="line"><span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:       </span><br><span class="line">Shape( <span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>) &#123;</span><br><span class="line">width = a;</span><br><span class="line">height = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pure virtual function</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数据抽象"><a href="#数据抽象" class="headerlink" title="数据抽象"></a>数据抽象</h2><p>数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。</p><p>例如，您的程序可以调用 <strong>sort()</strong> 函数，而不需要知道函数中排序数据所用到的算法。实际上，函数排序的底层实现会因库的版本不同而有所差异，只要接口不变，函数调用就可以照常工作。</p><h3 id="访问标签强制抽象"><a href="#访问标签强制抽象" class="headerlink" title="访问标签强制抽象"></a>访问标签强制抽象</h3><p>在 C++ 中，我们使用访问标签来定义类的抽象接口。一个类可以包含零个或多个访问标签：</p><ul><li>使用公共标签定义的成员都可以访问该程序的所有部分。一个类型的数据抽象视图是由它的公共成员来定义的。</li><li>使用私有标签定义的成员无法访问到使用类的代码。私有部分对使用类型的代码隐藏了实现细节。</li></ul><p>访问标签出现的频率没有限制。每个访问标签指定了紧随其后的成员定义的访问级别。指定的访问级别会一直有效，直到遇到下一个访问标签或者遇到类主体的关闭右括号为止。</p><blockquote><ul><li>类的内部受到保护，不会因无意的用户级错误导致对象状态受损。</li><li>类实现可能随着时间的推移而发生变化，以便应对不断变化的需求，或者应对那些要求不改变用户级代码的错误报告。</li></ul></blockquote><h3 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h3><ul><li><strong>程序语句（代码）：</strong>这是程序中执行动作的部分，它们被称为函数。</li><li><strong>程序数据：</strong>数据是程序的信息，会受到程序函数的影响。</li></ul><p><strong>数据封装</strong>是一种把数据和操作数据的函数捆绑在一起的机制，<strong>数据抽象</strong>是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制。</p><h3 id="接口（抽象类）"><a href="#接口（抽象类）" class="headerlink" title="接口（抽象类）"></a>接口（抽象类）</h3><p>如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。</p><p>抽象类不能被用于实例化对象，它只能作为<strong>接口</strong>使用。如果试图实例化一个抽象类的对象，会导致编译错误。因此，如果一个 ABC 的子类需要被实例化，则必须实现每个虚函数。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>C++ 异常是指在程序<code>运行时</code>发生的特殊情况，比如尝试除以零的操作。</p><ul><li><p><strong>throw:</strong> 当问题出现时，程序会抛出一个异常。这是通过使用 <strong>throw</strong> 关键字来完成的。可以使用 <strong>throw</strong> 语句在代码块中的任何地方抛出异常</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( b == <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"Division by zero condition!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>catch:</strong> 在您想要处理问题的地方，通过异常处理程序捕获异常。<strong>catch</strong> 关键字用于捕获异常。</p></li><li><p><strong>try:</strong> <strong>try</strong> 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。下面的代码会捕获一个类型为 <code>ExceptionName</code> 的异常。如果您想让 catch 块能够处理 try 块抛出的任何类型的异常，则必须在异常声明的括号内使用省略号 <code>...</code></p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 保护代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>( ExceptionName e )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 处理 ExceptionName 异常的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>C++ 提供了一系列标准的异常，定义在 <code>&lt;exception&gt;</code>中。</p><p><img src="assets/exceptions_in_cpp-1543739044716.png" alt="C++ 异常的层次结构"></p><h3 id="异常表"><a href="#异常表" class="headerlink" title="异常表"></a>异常表</h3><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td><strong>std::exception</strong></td><td>该异常是所有标准 C++ 异常的父类。</td></tr><tr><td>std::bad_alloc</td><td>该异常可以通过 <strong>new</strong> 抛出。</td></tr><tr><td>std::bad_cast</td><td>该异常可以通过 <strong>dynamic_cast</strong> 抛出。</td></tr><tr><td>std::bad_exception</td><td>这在处理 C++ 程序中无法预期的异常时非常有用。</td></tr><tr><td>std::bad_typeid</td><td>该异常可以通过 <strong>typeid</strong> 抛出。</td></tr><tr><td><strong>std::logic_error</strong></td><td>理论上可以通过读取代码来检测到的异常。</td></tr><tr><td>std::domain_error</td><td>当使用了一个无效的数学域时，会抛出该异常。</td></tr><tr><td>std::invalid_argument</td><td>当使用了无效的参数时，会抛出该异常。</td></tr><tr><td>std::length_error</td><td>当创建了太长的 std::string 时，会抛出该异常。</td></tr><tr><td>std::out_of_range</td><td>该异常可以通过方法抛出，例如 std::vector 和 std::bitset&lt;&gt;::operator<a href=""></a>。</td></tr><tr><td><strong>std::runtime_error</strong></td><td>理论上不可以通过读取代码来检测到的异常。</td></tr><tr><td>std::overflow_error</td><td>当发生数学上溢时，会抛出该异常。</td></tr><tr><td>std::range_error</td><td>当尝试存储超出范围的值时，会抛出该异常。</td></tr><tr><td>std::underflow_error</td><td>当发生数学下溢时，会抛出该异常。</td></tr></tbody></table><h3 id="C-动态内存"><a href="#C-动态内存" class="headerlink" title="C++ 动态内存"></a>C++ 动态内存</h3><ul><li><strong>栈：</strong>在函数内部声明的所有变量都将占用栈内存。</li><li><strong>堆：</strong>这是程序中未使用的内存，在程序运行时可用于动态分配内存。</li></ul><p>在 C++ 中，您可以使用特殊的运算符为给定类型的变量在运行时分配<code>堆</code>内的内存，这会返回所分配的空间地址。这种运算符即 <strong>new</strong> 运算符。</p><p>如果您不再需要动态分配的内存空间，可以使用 <strong>delete</strong> 运算符，删除之前由 new 运算符分配的内存。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">type</span>&gt; <span class="title">ret</span>-<span class="title">type</span> <span class="title">func</span>-<span class="title">name</span>(<span class="title">parameter</span> <span class="title">list</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="comment">// 函数的主体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// eg.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="keyword">const</span>&amp; <span class="title">Max</span> <span class="params">(T <span class="keyword">const</span>&amp; a, T <span class="keyword">const</span>&amp; b)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? b:a; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><p>正如我们定义函数模板一样，我们也可以定义类模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">type</span>&gt; <span class="title">class</span> <span class="title">class</span>-<span class="title">name</span> &#123;</span></span><br><span class="line"><span class="comment">// class thing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h2><p><code>#define</code> 预处理指令用于创建符号常量。该符号常量通常称为<strong>宏</strong>.</p><p>条件编译 <code>#ifndef</code> <code>#define</code> <code>#endif</code>。可以使用 #if 0 语句注释掉程序的一部分</p><p><code>#</code> 运算符会把 replacement-text 令牌转换为用引号引起来的字符串。</p><p><code>##</code> 运算符用于连接两个令牌。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MKSTR( x ) #x</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; MKSTR(HELLO C++) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//out-&gt; HELLO C++</span></span><br></pre></td></tr></table></figure><p>其他特殊编译符号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __LINE__ : "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __FILE__ : "</span> &lt;&lt; __FILE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __DATE__ : "</span> &lt;&lt; __DATE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __TIME__ : "</span> &lt;&lt; __TIME__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Value of __LINE__ : 6</span></span><br><span class="line"><span class="comment">Value of __FILE__ : test.cpp</span></span><br><span class="line"><span class="comment">Value of __DATE__ : Feb 28 2011</span></span><br><span class="line"><span class="comment">Value of __TIME__ : 18:52:48</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>一般情况下，两种类型的多任务处理：<strong>基于进程和基于线程</strong>。</p><ul><li>基于进程的多任务处理是程序的并发执行。</li><li>基于线程的多任务处理是同一程序的片段的并发执行。</li></ul><p>假设在<code>linux</code>系统下</p><h3 id="创建一个-POSIX-线程："><a href="#创建一个-POSIX-线程：" class="headerlink" title="创建一个 POSIX 线程："></a>创建一个 POSIX 线程：</h3><p><code>#include &lt;pthread.h&gt;</code></p><p><code>pthread_create (thread, attr, start_routine, arg)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>thread</td><td>指向线程标识符指针。</td></tr><tr><td>attr</td><td>一个不透明的属性对象，可以被用来设置线程属性。您可以指定线程属性对象，也可以使用默认值 NULL。</td></tr><tr><td>start_routine</td><td>线程运行函数起始地址，一旦线程被创建就会执行。</td></tr><tr><td>arg</td><td>运行函数的参数。它必须通过把引用作为指针强制转换为 void 类型进行传递。如果没有传递参数，则使用 NULL。</td></tr></tbody></table><p>终止：<code>pthread_exit (status)</code></p><h3 id="连接和分离线程"><a href="#连接和分离线程" class="headerlink" title="连接和分离线程"></a>连接和分离线程</h3><p>我们可以使用以下两个函数来连接或分离线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pthread_join (threadid, status) </span><br><span class="line">pthread_detach (threadid)</span><br></pre></td></tr></table></figure><p><code>pthread_join()</code> 子程序阻碍调用程序，直到指定的<strong>threadid</strong>线程终止为止。当创建一个线程时，它的某个属性会定义它是否是可连接的（joinable）或可分离的（detached）。只有创建时定义为可连接的线程才可以被连接。如果线程创建时被定义为可分离的，则它永远也不能被连接。</p><h2 id="什么是-CGI？"><a href="#什么是-CGI？" class="headerlink" title="什么是 CGI？"></a>什么是 CGI？</h2><ul><li>公共网关接口（CGI），是一套标准，定义了信息是如何在 Web 服务器和客户端脚本之间进行交换的。</li><li>CGI 规范目前是由 NCSA 维护的，NCSA 定义 CGI 如下：</li><li>公共网关接口（CGI），是一种用于外部网关程序与信息服务器（如 HTTP 服务器）对接的接口标准。</li><li>目前的版本是 CGI/1.1，CGI/1.2 版本正在推进中。</li></ul><p>比如我们点击一个超链接，浏览一个特定的网页或 URL时</p><ul><li>您的浏览器联系上 HTTP Web 服务器，并请求 URL，即文件名。</li><li>Web 服务器将解析 URL，并查找文件名。如果找到请求的文件，Web 服务器会把文件发送回浏览器，否则发送一条错误消息，表明您请求了一个错误的文件。</li><li>Web 浏览器从 Web 服务器获取响应，并根据接收到的响应来显示文件或错误消息。</li></ul><p>以这种方式搭建起来的 HTTP 服务器，不管何时请求目录中的某个文件，HTTP 服务器发送回来的不是该文件，而是以程序形式执行，并把执行产生的输出发送回浏览器显示出来。(比如php的响应<code>echo</code>)</p><h3 id="HTTP-头信息"><a href="#HTTP-头信息" class="headerlink" title="HTTP 头信息"></a>HTTP 头信息</h3><table><thead><tr><th>头信息</th><th>描述</th></tr></thead><tbody><tr><td>Content-type:</td><td>MIME 字符串，定义返回的文件格式。例如 Content-type:text/html。</td></tr><tr><td>Expires: Date</td><td>信息变成无效的日期。浏览器使用它来判断一个页面何时需要刷新。一个有效的日期字符串的格式应为 01 Jan 1998 12:00:00 GMT。</td></tr><tr><td>Location: URL</td><td>这个 URL 是指应该返回的 URL，而不是请求的 URL。你可以使用它来重定向一个请求到任意的文件。</td></tr><tr><td>Last-modified: Date</td><td>资源的最后修改日期。</td></tr><tr><td>Content-length: N</td><td>要返回的数据的长度，以字节为单位。浏览器使用这个值来表示一个文件的预计下载时间。</td></tr><tr><td>Set-Cookie: String</td><td>通过 <em>string</em> 设置 cookie。</td></tr></tbody></table><h3 id="CGI-环境变量"><a href="#CGI-环境变量" class="headerlink" title="CGI 环境变量"></a>CGI 环境变量</h3><table><thead><tr><th>变量名</th><th>描述</th></tr></thead><tbody><tr><td>CONTENT_TYPE</td><td>内容的数据类型。当客户端向服务器发送附加内容时使用。例如，文件上传等功能。</td></tr><tr><td>CONTENT_LENGTH</td><td>查询的信息长度。只对 POST 请求可用。</td></tr><tr><td>HTTP_COOKIE</td><td>以键 &amp; 值对的形式返回设置的 cookies。</td></tr><tr><td>HTTP_USER_AGENT</td><td>用户代理请求标头字段，递交用户发起请求的有关信息，包含了浏览器的名称、版本和其他平台性的附加信息。</td></tr><tr><td>PATH_INFO</td><td>CGI 脚本的路径。</td></tr><tr><td>QUERY_STRING</td><td>通过 GET 方法发送请求时的 URL 编码信息，包含 URL 中问号后面的参数。</td></tr><tr><td>REMOTE_ADDR</td><td>发出请求的远程主机的 IP 地址。这在日志记录和认证时是非常有用的。</td></tr><tr><td>REMOTE_HOST</td><td>发出请求的主机的完全限定名称。如果此信息不可用，则可以用 REMOTE_ADDR 来获取 IP 地址。</td></tr><tr><td>REQUEST_METHOD</td><td>用于发出请求的方法。最常见的方法是 GET 和 POST。</td></tr><tr><td>SCRIPT_FILENAME</td><td>CGI 脚本的完整路径。</td></tr><tr><td>SCRIPT_NAME</td><td>CGI 脚本的名称。</td></tr><tr><td>SERVER_NAME</td><td>服务器的主机名或 IP 地址。</td></tr><tr><td>SERVER_SOFTWARE</td><td>服务器上运行的软件的名称和版本。</td></tr></tbody></table><h3 id="GET-POST"><a href="#GET-POST" class="headerlink" title="GET/POST"></a>GET/POST</h3><p>GET 方法发送已编码的用户信息追加到页面请求中。页面和已编码信息通过 ? 字符分隔开，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.test.com/cgi-bin/cpp.cgi?key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure><p>GET 方法有大小限制，在一个请求字符串中最多可以传 1024 个字符。敏感信息不要使用 GET 方法。</p><h3 id="在-CGI-中使用-Cookies"><a href="#在-CGI-中使用-Cookies" class="headerlink" title="在 CGI 中使用 Cookies"></a>在 CGI 中使用 Cookies</h3><p>使用 cookies 是记忆和跟踪有关用户喜好、购买、佣金以及其他为追求更好的游客体验或网站统计所需信息的最有效的方法。</p><h4 id="它是如何工作的"><a href="#它是如何工作的" class="headerlink" title="它是如何工作的"></a>它是如何工作的</h4><p>服务器以 cookie 的形式向访客的浏览器发送一些数据。如果浏览器接受了 cookie，则 cookie 会以纯文本记录的形式存储在访客的硬盘上。现在，当访客访问网站上的另一个页面时，会检索 cookie。一旦找到 cookie，服务器就知道存储了什么。</p><ul><li><strong>Expires :</strong> cookie 的过期日期。如果此字段留空，cookie 会在访客退出浏览器时过期。</li><li><strong>Domain :</strong> 网站的域名。</li><li><strong>Path :</strong> 设置 cookie 的目录或网页的路径。如果您想从任意的目录或网页检索 cookie，此字段可以留空。</li><li><strong>Secure :</strong> 如果此字段包含单词 “secure”，那么 cookie 只能通过安全服务器进行检索。如果此字段留空，则不存在该限制。</li><li><strong>Name=Value :</strong> cookie 以键值对的形式被设置和获取。</li></ul><h1 id="常用知识点"><a href="#常用知识点" class="headerlink" title="常用知识点"></a>常用知识点</h1><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><ul><li><code>pragma once</code>: 让头文件只被引用一次</li><li><code>pragma pack(4)</code>: 手动设置文件中的位对其</li><li><code>#ifdef #ifndef #if #else #error</code>: 预编译阶段的替换判断等。</li><li><code>#define</code>: 宏定义，会在编译前进行相关字段的替换</li></ul><h2 id="构造函数、析构函数、拷贝构造函数"><a href="#构造函数、析构函数、拷贝构造函数" class="headerlink" title="构造函数、析构函数、拷贝构造函数"></a>构造函数、析构函数、拷贝构造函数</h2><blockquote><p>编译器默认会写有一个构造函数、一个析构函数、一个拷贝构造函数</p></blockquote><ul><li>构造函数<br>  用于类在new时候的初始化调用。一般来说，如果类中有在构造时需要进行的操作，或需要传入特殊的参数时，需要定义构造函数。父类调用，在子类调用</li><li>析构函数<br>  用于实体类在被delete时，处理一些东西。子类调用，再父类调用。</li><li>拷贝构造函数<br>  用于在通过一个类来初始化一个新类时、或函数传参时、或函数返回时</li></ul><h2 id="extern关键字"><a href="#extern关键字" class="headerlink" title="extern关键字"></a>extern关键字</h2><ul><li>后接 <code>C</code><br>  c++中是有函数重载的，编译器在编译的时候会将函数名和参数结合起来hash为一个新的名字，而C中名字却只会用函数名和返回值。这是编译的不同点。<br>  那么<code>extern</code>就会告诉编译器以下的部分用C的方式进行编译和运行。这样C++就能完美的融合C的代码了</li><li>后接变量或函数<br>  这样用于表示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义</li><li>现有解决方案<br>  现在业界都是通过在<code>*.h</code>文件提供对外部的接口的声明，在C++中实现，那么其他文件只要include了这个头文件就能直接使用这个接口了。</li></ul><h2 id="static作用简析"><a href="#static作用简析" class="headerlink" title="static作用简析"></a>static作用简析</h2><ul><li>用于变量<br>  在内存中存放的位置是全局数据区域。这个特性使得他的初始化为0。<br>  在全局使用static的话，则会对其他文件进行隐藏。<br>  在局部使用的话，比如在函数体内进行声明。那么函数运行多次的情况下，这个变量也只会被声明一次，当函数退出时，他仍在全局数据区域。只有程序退出时，才会销毁这个变量。</li><li>用于普通函数<br>  同样的具有隐藏作用。</li><li>类中的static<br>  这样使用的static会使得声明的变量是整个类公共使用的。这个变量是声明在全局数据区域的，<strong>不会占类的空间</strong></li></ul><h2 id="模板编程"><a href="#模板编程" class="headerlink" title="模板编程"></a>模板编程</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">typename</span> <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">class</span> <span class="title">xx</span>&#123;</span>&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">functionName</span><span class="params">(T a)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"SAY HI\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>template</code>中的class和tempname具有同样的作用，多种种类的使用某个变量。但是区分的作用在于能在类中使用另一个typename。</p><h2 id="union-与-enum"><a href="#union-与-enum" class="headerlink" title="union 与 enum"></a>union 与 enum</h2><ul><li>union 是联合体，联合体的意义就在于能极大节省空间的让某个变量变为联合体中的一种值。占用空间是空间中最长的字段</li><li>enum 是状态定义的最好选择，他能自动从0开始声明这个名字的变量, 但是，不可以重名，包括外部。默认字段位长为4，如果过长会变为8</li></ul><h2 id="struct大小的计算"><a href="#struct大小的计算" class="headerlink" title="struct大小的计算"></a>struct大小的计算</h2><p>在c++中，struct和class的唯一区别是struct默认声明的变量、函数是public的，而class是private的。<br>计算以块的形式进行堆叠，char占1，int占4，long占4，double占8。那么在声明到最后前，struct会将变量一个一个的塞到块里，当前行的块够就塞，不够就换新的块，所以struct大小会和变量声明的顺序有关。到最后的时候会变为最大值的整数倍。其中块的大小由其中的变量占位最大的决定、或者由#pragma pack()决定</p><ul><li>空的class类会占用1位空间，虚函数表会占用一个指针大小的空间</li></ul><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><ul><li>auto_ptr 在c++11中已经被废弃<br>  这种智能指针能在引用变为0时自动释放，并且可以被抢占</li><li>unique_ptr<br>  它和auto_ptr的区别在于unique的指针是不可抢占型的</li><li>shared_ptr<br>  分享指针在使用时会有count进行计算这个指针的引用次数，当次数为0时会自动释放</li><li>weak_ptr<br>  这个指针是为了解决分享指针的循环引用的问题，他可以转化为share指针，可以调用来使用。一般在循环引用的时候应该使用weak指针。weak指针不能单独使用。</li></ul><h2 id="virtual字段"><a href="#virtual字段" class="headerlink" title="virtual字段"></a>virtual字段</h2><ul><li>在类中函数声明时<br>  此时的virtual使得类有了多态性，这个类可以被子类进行覆盖，但是父类的函数仍然是存在的。而其他的类同样也可以进行自己的声明。<br>  virtual字段告诉编译器在使用这个函数时需要找到对应的类的层所声明的函数进行使用。</li><li>类继承时使用<br>  这是为了解决菱形继承的问题。这个问题在于一个类继承与多个单种的类，造成二义性和空间浪费。virtual字段会在继承时只声明和使用一个这样的基类。那么到最后的子类时，就只会存在一个了</li></ul><h2 id="重载运算符-1"><a href="#重载运算符-1" class="headerlink" title="重载运算符"></a>重载运算符</h2><h2 id="new-delete-与-malloc-free"><a href="#new-delete-与-malloc-free" class="headerlink" title="new delete 与 malloc free"></a>new delete 与 malloc free</h2><ul><li>new delete会自动声明类空间大小的内存，并且调用构造和析构函数</li><li>malloc free则需要自己说明要声明的空间的大小</li><li>new、delete是运算符，malloc和free是函数</li></ul><h2 id="const-pointer"><a href="#const-pointer" class="headerlink" title="const pointer"></a>const pointer</h2><blockquote><p>类中的函数后加const代表不修改类中的成员变量。</p></blockquote><ul><li>指针常量：指针是常量。 <code>int* const a;</code>表明指针是常量，不可改变，但是指针所指向的内存空间的值是可以改变的。</li><li>常量指针：常量的指针。 <code>const int* a;</code>表面指针所指的空间是常量，不可改变，但是指针是可以改变的，他可以指向其他的常量。</li><li>常量指针常量：是常量的指针，且指向的内存空间的值也是常量。</li></ul><h2 id="指针和引用"><a href="#指针和引用" class="headerlink" title="指针和引用"></a>指针和引用</h2><ul><li>初始化上，指针在声明时可以不用初始化，而引用必须要初始化。</li><li>空间上，指针占用空间，一般为int类型的4字节大小，而引用是变量别名，不一定占用空间。</li><li>引用没有常量一说。</li><li>重新赋值上，指针可以改变对象，而引用不可改变。</li></ul><h2 id="cast关键字"><a href="#cast关键字" class="headerlink" title="_cast关键字"></a>_cast关键字</h2><ul><li>const_cast<br>  将一个常量的值转为非常量，一般都是赋值到新的指针中。指针指向的并不是常量。</li><li>static_cast<br>  做一些比较自然和低风险的转换，比如整型、浮点数、字符型之间的转换。<br>  不能用于不同类型的指针之间的转换，也不能用于整型和指针之间的转换</li><li>reinterpret_cast<br>  用于指针之间、整型与指针之间、不同引用之间的转换。方式是逐bit进行比较</li><li>dynamic_cast<br>  用于从基类指针或引用强制转换到派生类的指针或引用。相比较于reinterpret来说会有安全性检查。</li></ul><h2 id="expicit关键字"><a href="#expicit关键字" class="headerlink" title="expicit关键字"></a>expicit关键字</h2><p>这个关键字的作用在于禁止隐式转换。如果构造函数中的参数只有一个，那么编译器有可能会将它识别为将一个这种类型的值用<code>=</code>隐式转换为这个类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String(<span class="keyword">int</span> n); <span class="comment">// 声明用于构造一个大小为n的字符串。</span></span><br><span class="line">String s1 = <span class="number">10</span>; <span class="comment">// 隐式转换为声明10个大小的字符串</span></span><br><span class="line">String s2 = <span class="string">'a'</span>; <span class="comment">// 这里就有问题了，声明了大小为'a'长度的字符串。也就是97位长的。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="c++" scheme="https://jelech.gitee.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>关于高并发和秒杀系统的讨论【转】</title>
    <link href="https://jelech.gitee.io/posts/10156/"/>
    <id>https://jelech.gitee.io/posts/10156/</id>
    <published>2019-05-01T11:44:47.000Z</published>
    <updated>2019-10-28T13:16:19.863Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><p>此次高并发的讨论先局限于对于设计一个大量请求的秒杀系统。</p><h4 id="何为高并发"><a href="#何为高并发" class="headerlink" title="何为高并发"></a>何为高并发</h4><ul><li>在用户访问请求时，对于一个单机单核的服务器的接受的线性的。那么如果有大量的用户同时访问，那么此时的服务器就需要短时间内接受和处理大量请求。而解决这样的问题，我们可以通过启用多个线/进程，并发地解决问题。</li><li>但是对于这个问题来说，一个电脑的CPU是有限的，那么再多一点的进程，最终也同样会造成服务器的压力。</li></ul><blockquote><p>像12306、各种电商平台的秒杀活动那样。对于一个有限的资源，也需要考虑资源的增减。</p></blockquote><h4 id="讨论的问题"><a href="#讨论的问题" class="headerlink" title="讨论的问题"></a>讨论的问题</h4><ol><li><p>高并发的瓶颈（一）程序设计</p><p> 服务器的优化可以分为三个方向，请求接收、请求处理、请求返回。</p><p> 请求处理中包括数据查询、数据处理。第一，对于高并发的秒杀系统来说，许多数据都是热数据，会被多个用户多次访问。那么这些数据就应该被放到缓存中，包括但不限于redis(yes，非常好用)。第二，数据处理依赖的是服务器程序的优化，这就要看算法的性能了，建议的是能尽量少传数据，少复制数据。</p></li><li><p>高并发的瓶颈（二）服务器CPU</p><p> 无论程序优化再多，一个服务器的CPU资源是有上限的。</p><p> 解决的一方面可以直接增加服务器的数量以1:1线性增加并发度，这时候就需要设计集群，但是<u>切记</u>拒绝假的分布式，比如：前端服务器是可以独立存在的，但是都依赖集中的一个数据库或者缓存系统，最后，一定是集中的那个数据库或者缓存系统受不了，同样无法做到一个好的分布式。</p><p> 第二方面，逻辑处理中，把速度快且提前中断的逻辑放在最前面，比如：验证登录，验证问答。做分布式方案的时候，尽量把资源调用放在最近的地方。</p><p> 第三方面，不要出现跨机房网络请求，不要出现跨机房网络请求，不要出现跨机房网络请求，重要的事情说三遍。</p></li><li><p>保证库存原子性</p><p> 可以用数据库操作，由于使用了锁，满足了原子性。但是性能差，访问慢。</p><p> 可以用消息队列，订单全部放到一个消息队列中，服务器一个一个进行处理。但用户等待时间太长，不同请求会因前面的请求等待很久。</p><p> <u><strong>redis递减</strong></u>性能极好。redis-&gt;incrby(‘product’, -1)操作首先是原子性的(应该说redis的操作都是)，并且内存中访问使得性能很好，再加上redis又自带集群操作。何乐而不为？</p></li><li><p>集群数据一致性</p><p> 现在一种解决办法是通过把多个资源散列到多个集群中，再在外部加一个中控服务来平衡多个集群的资源，这样就能解决出现不同集群的访问差异过大导致的数据差异过多</p></li><li><p>机器人抢怎么办</p><p> 添加IP限制判断，强制用户登录，提交订单时引入各种验证码、问答。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="技术探析" scheme="https://jelech.gitee.io/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E6%9E%90/"/>
    
    
      <category term="redis" scheme="https://jelech.gitee.io/tags/redis/"/>
    
      <category term="高并发" scheme="https://jelech.gitee.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记</title>
    <link href="https://jelech.gitee.io/posts/51482/"/>
    <id>https://jelech.gitee.io/posts/51482/</id>
    <published>2019-03-30T02:09:33.000Z</published>
    <updated>2019-10-28T13:15:44.804Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="mysql基础知识"><a href="#mysql基础知识" class="headerlink" title="mysql基础知识"></a>mysql基础知识</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>开启事务、事务结束、提交事务、回滚事务</li><li>ACID：原子性、一致性、持久性、隔离性</li><li>隔离级别：<ul><li>读未提交：事物A和事物B，事物A未提交的数据，事物B可以读取到。这里读取到的数据叫做“脏数据”。这种隔离级别最低，这种级别一般是在理论上存在，数据库隔离级别一般都高于该级别</li><li>读已提交：事物A和事物B，事物A提交的数据，事物B才能读取到。会导致“不可重复读取”</li><li>可重复读：事务A和事务B，事务A提交之后的数据，事务B读取不到。会导致“幻像读”</li><li>串行化：事务A和事务B，事务A在操作数据库时，事务B只能排队等待。吞吐量太低，用户体验差</li></ul></li><li>事务隔离级别的作用范围分为两种：<ul><li>全局级：对所有的会话有效</li><li>会话级：只对当前的会话有效</li></ul></li></ul><h2 id="MyISAM-和-InnoDB"><a href="#MyISAM-和-InnoDB" class="headerlink" title="MyISAM 和 InnoDB"></a>MyISAM 和 InnoDB</h2><ul><li><p>区别</p><ul><li>事务和外键：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</li><li>索引： MyISAM使用非聚簇索引，索引和数据是分开并有压缩的。而Innodb使用的聚簇索引，索引与数据是紧密捆绑的。InnoDB 中不保存表的具体行数。</li><li>并发：MyISAM读写互相阻塞。InnoDB 读写阻塞与事务隔离级别相关</li><li>锁：MyISAM支持表级锁定。InnoDB支持行级锁，但不是绝对的，比如需要扫描全表才能锁定。</li><li>删： DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。</li></ul></li><li><p>MyISAM</p><ul><li>不需要事务支持（不支持）</li><li>并发相对较低（锁定机制问题）</li><li>数据修改相对较少（阻塞问题），以读为主</li><li>数据一致性要求不是非常高</li></ul><ol><li>尽量索引（缓存机制）</li><li>调整读写优先级，根据实际需求确保重要操作更优先</li><li>启用延迟插入改善大批量写入性能</li><li>尽量顺序操作让insert数据都写入到尾部，减少阻塞</li><li>分解大的操作，降低单个操作的阻塞时间</li><li>降低并发数，某些高并发场景通过应用来进行排队机制</li><li>对于相对静态的数据，充分利用Query Cache可以极大的提高访问效率</li><li>MyISAM的Count只有在全表扫描的时候特别高效，带有其他条件的count都需要进行实际的数据访问</li></ol></li><li><p>InnoDB</p><ul><li>需要事务支持（具有较好的事务特性）</li><li>行级锁定对高并发有很好的适应能力，但需要确保查询是通过索引完成</li><li>数据更新较为频繁的场景</li><li>数据一致性要求较高</li><li>硬件设备内存较大，可以利用InnoDB较好的缓存能力来提高内存利用率，尽可能减少磁盘 IO</li></ul><ol><li>主键尽可能小，避免给Secondary index带来过大的空间负担</li><li>避免全表扫描，因为会使用表锁</li><li>尽可能缓存所有的索引和数据，提高响应速度</li><li>在大批量小插入的时候，尽量自己控制事务而不要使用autocommit自动提交</li><li>合理设置innodb_flush_log_at_trx_commit参数值，不要过度追求安全性</li><li>避免主键更新，因为这会带来大量的数据移动</li></ol></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>MyISAM实现：MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。他的辅助索引同样也是一颗B+Tree，data域保存数据记录的地址。</li><li>InnoDB实现：InnoDB的数据文件本身就是索引文件。InnoDB的辅助索引data域存储相应记录主键的值而不是地址。</li><li>分类: 普通索引、唯一索引、全文索引、单例多例索引、组合索引（最左前缀）</li><li>优化方法<ul><li>一般来说只有返回某范围内的数据时才会使用聚集索引</li><li>索引不会包含有NULL值的列，因此复合索引中如果有一列中有NULL，索引就是无效的</li><li>使用短索引</li><li>索引列排序，mysql查询只会使用一个索引。order by的和where中的是冲突的</li><li>like语句操作中以<code>%</code>, <code>_</code>开头的是不会使用索引的。</li><li>不要在列上进行运算：MySQL只对某些操作符才使用索引：&lt;,&lt;=,=,&gt;,&gt;=,between,in,以及某些时候的like</li></ul></li></ul><h2 id="mysql中的锁"><a href="#mysql中的锁" class="headerlink" title="mysql中的锁"></a>mysql中的锁</h2><ul><li>表级锁定<ul><li>模式：表共享读锁（Table Read Lock）和表独占写锁</li></ul></li><li>行级锁定<ul><li>InnoDB的锁定模式：共享锁（S），排他锁（X），意向共享锁（IS）和意向排他锁（IX）。间隙锁（Next-Key锁）</li></ul></li><li>页级锁定<ul><li>界定于表锁和行锁之间的一种</li></ul></li><li>抽象的乐观锁与悲观锁<ul><li>实际不存在这两种锁。</li><li>乐观锁用于</li></ul></li></ul><h2 id="mysql查询步骤"><a href="#mysql查询步骤" class="headerlink" title="mysql查询步骤"></a>mysql查询步骤</h2><h2 id="join的三种方式"><a href="#join的三种方式" class="headerlink" title="join的三种方式"></a>join的三种方式</h2><p>left, right, inner</p><h1 id="mysql使用"><a href="#mysql使用" class="headerlink" title="mysql使用"></a>mysql使用</h1><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>键：一个识别每一个特定用户的字段。</li><li>外键：一个表引用了其他表中的主键，那么这个字段就是外键。</li><li>模式：数据库整套表格的完整设计蓝图。</li><li>关系：两个表格数据之间的关系，可以通过外键表达。</li></ul><h2 id="设计时需要注意"><a href="#设计时需要注意" class="headerlink" title="设计时需要注意"></a>设计时需要注意</h2><ul><li>每个对象应该有自己的表。</li><li>避免保存冗余的数据，比如相同的数据保存在了多个表当中（当然外键不算）。</li><li>考虑耦合性，减少空属性的出现。如果出现了，尝试拆成多个表。</li><li>使用原子列值，每一行的每个属性只储存一个数据。</li><li>键要选择的有意义。</li><li>考虑需要询问数据库时的问题，比如多值、多层查询时。</li><li>注意表格的大体分类：描述世界的简单表、描述关系的关联表。</li></ul><h1 id="mysql数据库的创建"><a href="#mysql数据库的创建" class="headerlink" title="mysql数据库的创建"></a>mysql数据库的创建</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#----临时笔记处----#</span><br><span class="line">#修改密码，注意mysql5.7中user表中密码改为了authentication_string</span><br><span class="line">    update mysql.user set authentication_string1=password(&apos;123456&apos;) where User=&quot;jelech&quot; and Host=&quot;localhost&quot;;</span><br><span class="line"></span><br><span class="line">    # 密码进入数据库，创建新数据库，授权新用户，刷新改动，设置根密码(初始使用一次就行)</span><br><span class="line">    mysql -u root -p</span><br><span class="line">  create database blog_db charset=utf8;</span><br><span class="line">    grant all on db_music.* to jelech@localhost identified by &quot;123456&quot;;</span><br><span class="line">    flush privileges;</span><br><span class="line">    set password for root@localhost=password(&quot;abccba&quot;);</span><br><span class="line"></span><br><span class="line">    # 修改表格格式信息</span><br><span class="line">    ALTER TABLE userInfo MODIFY password VARCHAR(100) NOT NULL;</span><br><span class="line"></span><br><span class="line">    # 删除表中所有内容，以及索引 用这种方法相当于重载了表格内容，全新的！</span><br><span class="line">    truncate table wp_comments;</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><code>msyql -h hostname -u username -p</code></p><p>eg.<code>msyql -u root -p</code></p><ul><li>-h 指定希望连接的主机，默认为localhost</li><li>-u 指定用户名称，默认为登录操作系统的用户名</li><li>-p 使用一个密码来连接他</li></ul><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p><code>create database dbname;</code></p><p>eg.<code>create database db_music;</code></p><h2 id="mysql权限问题"><a href="#mysql权限问题" class="headerlink" title="mysql权限问题"></a>mysql权限问题</h2><ul><li>最少权限原则，一个用户不应该拥有超过他的功能的多余权限。</li><li><code>grant</code> <code>revoke</code> 授予和收回权限</li></ul><h2 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grant privileges # 用逗号分开的权限：all, select, create...</span><br><span class="line">on item_name # 可控制的部分:*.*, item_name.*, item_name.th_table</span><br><span class="line">to user_name # 授予一个用户：可附加通过密码 identified by &apos;password&apos;</span><br><span class="line">[require ssl_options] # 决定用户连接时，是否应该通过加密套接字连接</span><br><span class="line">[with grant potion] # 决定用户是否可以授权给别自己拥有的权限。</span><br></pre></td></tr></table></figure><h3 id="with语句也可以"><a href="#with语句也可以" class="headerlink" title="with语句也可以"></a>with语句也可以</h3><p>决定这个用户每小时可以访问的数量</p><p><code>MAX_QUERIES_PER_HOUR n</code> <code>MAX_UPDATES_PER_HOUR n</code> <code>MAX_CONNECTIONS_PER_HOUR n</code></p><p>这个在共享系统上限制单个用户的负载非常有用。</p><blockquote><p>mysql中分为3个基本权限：适用一般用户权限、适用赋予管理员权限、几个特定权限。<br>mysql中存放了所有用户名、密码的地方，这里的访问权限不应随意授予。</p></blockquote><h3 id="用户的权限"><a href="#用户的权限" class="headerlink" title="用户的权限"></a>用户的权限</h3><ul><li>select：从表中选择行</li><li>insert：插入新行</li><li>udpate：修改表行中值</li><li>delete：删除表中的行</li><li>index：创建和拖动特定表的索引</li><li>alter：修改表的结构，比如添加列、重名列|表、修改列的数据类型…</li><li>create：新建数据库|表，如果grant授予的特定的数据库，则他们只能创建该数据库|表，也就是他们需要先删除</li><li>drop：删除数据库和表</li></ul><h3 id="管理员的权限"><a href="#管理员的权限" class="headerlink" title="管理员的权限"></a>管理员的权限</h3><ul><li>create temporary tables：允许使用temporary关键字</li><li>file：允许将数据从文件中读入表、输出到文件</li><li>lock table：允许使用lock table语句</li><li>process：允许管理员查看属于所有用户的服务器进程</li><li>reload：允许管理员重新载入授权表、清空授权、主机、日志和表</li><li>replication client：允许复制主机、使用show status</li><li>replication slave：允许复制从服务器连接到主服务器</li><li>show databases：允许查看所有数据库列表，没有这个权限，用户就只能看到他们自己的</li><li>shutdown：允许关闭mysql服务器</li><li>super：允许关闭属于任何用户的线程</li></ul><h3 id="特别权限"><a href="#特别权限" class="headerlink" title="特别权限"></a>特别权限</h3><ul><li>all：授予以上所有权限</li><li>usage：不授予权限，只允许用户登录，但不能进行任何操作。这样做的目的是为了以后授予权限</li></ul><h2 id="收回权限"><a href="#收回权限" class="headerlink" title="收回权限"></a>收回权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revoke privileges # 收回某种权限</span><br><span class="line">on item # 从某个数据库或者表中</span><br><span class="line">from username #从一个用户中</span><br></pre></td></tr></table></figure><p>其余部分和授权相似。</p><h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><p><code>use db_name</code></p><p>在登录后应切换到需要使用的数据库</p><h2 id="使用数据库表"><a href="#使用数据库表" class="headerlink" title="使用数据库表"></a>使用数据库表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table table_name(</span><br><span class="line"># 字段属性</span><br><span class="line">  table_id int auto_increment not null primary key,</span><br><span class="line">  table_name varchar(255) not null,</span><br><span class="line">  table_float float(6,2),</span><br><span class="line">  #...unsigned意思是他只能是0或者一个正数</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>text：该类型用于表示更长的数据，比如文章</li><li>zerofill：该属性可以让数字类型添加前导0。</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>整数数据类型</p><ul><li>tinyint(1)：非常小的整数</li><li>bit、bool：同tinyint</li><li>smallint(2)：小整形数</li><li>mediumint(3)：中整形数</li><li>int(4)：一般整数</li><li>integer：同int</li><li>bigint(8)：大整形数</li></ul></li><li><p>浮点数据类型</p><ul><li>float(精度)：可用于指定单精度和双精度的浮点数</li><li>float[(M,D)]：指定显示宽度和小数位数===float(4)</li><li>double[(M,D)]：指定了显示宽度和小数位数===float(8)</li><li>duoble：同上</li><li>precision[(M,D)]</li><li>real[(M,D)]：同上</li><li>decimal[(M [,D])]：以char储存的浮点数</li><li>numeric\dec\fixed：同上</li></ul></li><li>日期和时间类型<em>值得注意的是如果不手动设置，特定行中的timestamp将被修改为最近修改改行的日期和时间，这对事物记录很有帮助</em><ul><li>date：一个日期，以YYYY-MM-DD格式</li><li>time：一个时间，以HH:MM:SS格式</li><li>datetime：日期和时间，以YYYY-MM-DD HH:MM:SS格式</li><li>timestamp[(M)]：时间标签，在处理报告中有意义</li><li>year[(2/4)]：可指定显示格式地显示年份</li></ul></li><li>字符串类型<ul><li>char：小段文本，varchar为可变长度的类型，指定的是每种类型的宽度</li><li>text、blob：大小可变，分别适用于长文本、二进制数据(<em>二进制是万金油</em>)。text区分大小写，blob不区分大小写</li><li>set、enum：set最大可以有64个元素，列值必须来自其中。enum枚举最大65535个元素，同时只能有一个为null或者为枚举中的值</li></ul></li></ol><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p><code>show tables</code>：显示当前用户的数据库下的所有表。</p><p><code>show databases</code>：显示当前用户的所有数据库。</p><p><code>descibe table_name</code>：也作<em>desc</em>，显示表格的结构。</p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><blockquote><p>索引有利于提高数据库的查询速度</p></blockquote><p><code>create index index_name on table_name (index_col_name ...)</code></p><h1 id="使用mysql数据库"><a href="#使用mysql数据库" class="headerlink" title="使用mysql数据库"></a>使用mysql数据库</h1><hr><h1 id="MySql优化"><a href="#MySql优化" class="headerlink" title="MySql优化"></a>MySql优化</h1><ul><li><p>三大方向</p><ul><li>优化MySQL所在服务器内核</li><li>对MySQL配置参数进行优化（my.cnf）此优化需要进行压力测试来进行参数调整。</li><li>对SQL语句以及表优化。</li></ul></li></ul><h2 id="MySQL参数优化"><a href="#MySQL参数优化" class="headerlink" title="MySQL参数优化"></a>MySQL参数优化</h2><ul><li><p>MySQL 默认的最大连接数为 100，可以在 mysql 客户端使用以下命令查看</p><p><code>mysql&gt; show variables like &#39;max_connections&#39;;</code></p></li><li><p>查看当前访问Mysql的线程</p><p><code>mysql&gt; show processlist;</code></p></li><li><p>设置最大连接数</p><p><code>mysql&gt;set globle max_connections = 5000;</code></p><p>最大可设置16384,超过没用</p></li><li><p>查看当前被使用的connections</p><p>  <code>mysql&gt;show globle status like &#39;max_user_connections&#39;</code></p></li></ul><h2 id="16经验"><a href="#16经验" class="headerlink" title="16经验"></a>16经验</h2><ol><li><p>为查询缓存优化查询</p><ul><li><p>大多数的MySQL服务器都开启了查询缓存。</p><p>  <code>SELECT username FROM user WHERE    signup_date &gt;= CURDATE()</code></p><p>  CURDATE(), NOW() 和 RAND() 或是其它的诸如此类的SQL函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。所以，你所需要的就是用一个变量来代替MySQL的函数，从而开启缓存。</p></li></ul></li><li><p>EXPLAIN 我们的SELECT查询(可以查看执行的行数)</p><ul><li>使用EXPLAIN关键字可以使我们知道MySQL是如何处理SQL语句的，这样可以帮助我们分析我们的查询语句或是表结构的性能瓶颈；EXPLAIN的查询结果还会告诉我们索引主键是如何被利用的，数据表是如何被被搜索或排序的….等等。语法格式是：<code>EXPLAIN +SELECT语句</code></li></ul></li><li><p>当只要一行数据时使用LIMIT 1</p><ul><li>加上LIMIT 1可以增加性能。MySQL数据库引擎会在查找到一条数据后停止搜索，而不是继续往后查询下一条符合条件的数据记录。</li></ul></li><li><p>为搜索字段建立索引</p><ul><li><p>索引不一定就是给主键或者是唯一的字段，如果在表中，有某个字段经常用来做搜索，需要将其建立索引。</p></li><li><p>在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。</p><ul><li><code>ALTER TABLE</code> 用来创建普通索引、唯一索引、主键索引和全文索引<ul><li><code>ALTER TABLE table_name ADD INDEX index_name (column_list);</code></li><li><code>ALTER TABLE table_name ADD UNIQUE (column_list);</code></li><li><code>ALTER TABLE table_name ADD PRIMARY KEY (column_list);</code></li><li><code>ALTER TABLE table_name ADD FULLTEXT (column_list);</code></li></ul></li><li><code>CREATE INDEX</code>可对表增加普通索引或UNIQUE索引以及全文索引，但是不可以对表增加主键索引<ul><li><code>CREATE INDEX index_name ON table_name (column_list);</code></li><li><code>CREATE UNIQUE index_name ON table_name (column_list);</code></li><li><code>CREATE FULLTEXT index_name ON table_name (column_list);</code></li></ul></li></ul></li><li><p>索引类型</p><ul><li>普通索引INDEX：适用于name、email等一般属性</li><li>唯一索引UNIQUE：与普通索引类似，不同的是唯一索引要求索引字段值在表中是<strong>唯一</strong>的，这一点和主键索引类似，但是不同的是，唯一索引<strong>允许有空值</strong>。唯一索引一般适用于身份证号码、用户账号等不允许有重复的属性字段上。</li><li>主键索引：其实就是主键，一般在建表时就指定了，不需要额外添加。</li><li>全文检索FULLTEXT：只适用于VARCHAR和Text类型的字段。<em>全文索引和普通索引是有很大区别的，如果建立的是普通索引，一般会使用like进行模糊查询</em><ul><li>MySql自带的全文索引只能对英文进行全文检索，目前无法对中文进行全文检索。</li><li>如果需要对包含中文在内的文本数据进行全文检索，我们需要采用Sphinx（斯芬克斯）/Coreseek技术来处理中文</li><li>MySql自带的全文索引时，如果查询字符串的长度过短将无法得到期望的搜索结果</li><li>MySql全文索引所能找到的词默认最小长度为4个字符</li><li>另外，如果查询的字符串包含停止词，那么该停止词将会被忽略</li></ul></li></ul></li><li><p>组合索引</p><ul><li>组合索引又称多列索引，就是建立索引时指定多个字段属性。有点类似于字典目录，比如查询 ‘guo’ 这个拼音的字时，首先查找g字母，然后在g的检索范围内查询第二个字母为u的列表，最后在u的范围内查找最后一个字母为o的字</li><li><code>where a=3 and c=5</code>  这种情况下b就是断点，a发挥了效果，c没有效果</li></ul></li><li><p>查看索引</p><ul><li><code>mysql&gt; show index from tblname;</code></li><li><code>mysql&gt; show keys from tblname;</code></li></ul></li><li><p>删除</p><ul><li><code>DORP INDEX IndexName ON tab_name；</code></li></ul></li><li><blockquote><p>对于普通索引而言 在使用like进行通配符模糊查询时,如果首尾之间都使用了通配符，索引时无效的。</p></blockquote></li></ul></li><li><p>在Join表的时候使用相当类型的列，并将其索引</p><ul><li>如果在程序中有很多JOIN查询，应该保证两个表中join的字段时被建立过索引的。这样MySQL颞部会启动优化JOIN的SQL语句的机制。</li><li><code>SELECT company_name FROM users LEFT JOIN companies ON (users.state = companies.state) WHERE users.id = “user_id”·</code></li><li>两个 state 字段应该是被建过索引的，而且应该是相当的类型，相同的字符集。</li></ul></li><li><p>千万不要ORDER BY RAND  ()</p></li><li><p>避免SELECT *</p><ul><li>从数据库里读出越多的数据，那么查询就会变得越慢,并且，如果我们的数据库服务器和WEB服务器是两台独立的服务器的话，这还会增加网络传输的负载。所以，我们应该养成一个需要什么就取什么的好的习惯。</li></ul></li><li><p>永远为每张表设置一个ID</p></li><li><p>可以使用ENUM 而不要VARCHAR</p><ul><li>ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。 </li><li>如果我们有一个字段，比如“性别”，“国家”，“民族”，“状态”或“部门”，我们知道这些字段的取值是有限而且固定的，那么，我们应该使用 ENUM 而不是 VARCHAR。</li></ul></li><li><p>尽可能的使用NOT NULL</p><ul><li>NULL也需要占用存储空间，并且会使我们的程序判断时更加复杂</li></ul></li><li><p>固定长度的表会更快</p><ul><li>如果表中的所有字段都是“固定长度”的，整个表会被认为是 “static” 或 “fixed-length”。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要我们包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。</li></ul></li><li><p>垂直分割</p><ul><li>“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。</li></ul></li><li><p>拆分打的DELETE或INSERT语句</p><ul><li>如果我们需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，我们需要非常小心，要避免我们的操作让我们的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了</li><li>所以在使用时使用LIMIT 控制数量操作记录的数量。</li></ul></li><li><p>越小的列会越快</p><ul><li>对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把我们的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。</li><li>如果一个表只会有几列,使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些</li></ul></li><li><p>选择正确的存储引擎</p><ul><li>在MYSQL中有两个存储引擎MyISAM和InnoDB,每个引擎都有利有弊。</li><li>MyISAM<ul><li>good: 适合于一些需要大量<strong>查</strong>询的应用, SELECT  COUNT(*)这类的计算是超快无比的</li><li>bad: 但是对于大量<strong>写</strong>操作的支持不是很好, 甚至一个update语句就会进行锁表操作</li><li>以前默认的存储引擎，基于传统的ISAM类型，支持B-Tree，全文检索，但是不是事务安全的，而且不支持外键。不具有原子性。支持锁表。</li></ul></li><li>InnoDB<ul><li>good: 支持“行锁” ，于是在<strong>写</strong>操作比较多的时候，会更优秀</li><li>bad: 趋势会是一个非常复杂的存储引擎，对于一些<strong>小</strong>的应用，它会比 MyISAM 还<strong>慢</strong>。</li><li>事务型引擎，支持ACID事务(实现4种事务隔离机制)、回滚、崩溃恢复能力、行锁。以及提供与Oracle一致的不加锁的读取方式。InnoDB存储它的表和索引在一个表空间中，表空间可以包含多个文件。</li></ul></li></ul></li><li><p>小心 “永久链接”</p><ul><li>“永久链接”的目的是用来减少重新创建MySQL链接的次数。当一个链接被创建了，它会永远处在连接的状态，就算是数据库操作已经结束了。</li><li>Apache 运行在极端并行的环境中，会创建很多很多的了进程。这就是为什么这种“永久链接”的机制工作地不好的原因。在我们决定要使用“永久链接”之前，我们需要好好地考虑一下我们的整个系统的架构。</li></ul></li></ol><h1 id="next"><a href="#next" class="headerlink" title="next"></a>next</h1>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="mysql" scheme="https://jelech.gitee.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>sscanf中的正则表达式</title>
    <link href="https://jelech.gitee.io/posts/20161/"/>
    <id>https://jelech.gitee.io/posts/20161/</id>
    <published>2019-03-10T13:09:33.000Z</published>
    <updated>2019-03-11T02:09:40.446Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h3 id="1-简易用法"><a href="#1-简易用法" class="headerlink" title="1.简易用法"></a>1.简易用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;china beijing 123&quot;;</span><br><span class="line">ret = sscanf(string, &quot;%s %s %d&quot;, buf1, buf2, &amp;digit);</span><br><span class="line">printf(&quot;1.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;1.ret=%d, buf1=%s, buf2=%s, digit=%d\n\n&quot;, ret, buf1, buf2, digit);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>1.ret=3, buf1=china, buf2=beijing, digit=123</li><li>可以看出,sscanf的返回值是读取的参数个数</li></ul><h3 id="2-取指定长度的字符串"><a href="#2-取指定长度的字符串" class="headerlink" title="2.取指定长度的字符串"></a>2.取指定长度的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;123456789&quot;;</span><br><span class="line">sscanf(string, &quot;%5s&quot;, buf1);</span><br><span class="line">printf(&quot;2.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;2.buf1=%s\n\n&quot;, buf1);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>2.buf1=12345</li></ul><h3 id="3-取到指定字符为止的字符串"><a href="#3-取到指定字符为止的字符串" class="headerlink" title="3.取到指定字符为止的字符串"></a>3.取到指定字符为止的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;123/456&quot;;</span><br><span class="line">sscanf(string, &quot;%[^/]&quot;, buf1);</span><br><span class="line">printf(&quot;3.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;3.buf1=%s\n\n&quot;, buf1);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>3.buf1=123</li></ul><h3 id="4-取到指定字符集为止的字符串"><a href="#4-取到指定字符集为止的字符串" class="headerlink" title="4.取到指定字符集为止的字符串"></a>4.取到指定字符集为止的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;123abcABC&quot;;</span><br><span class="line">sscanf(string, &quot;%[^A-Z]&quot;, buf1);</span><br><span class="line">printf(&quot;4.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;4.buf1=%s\n\n&quot;, buf1);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>4.buf1=123abc</li></ul><h3 id="5-取仅包含指定字符集的字符串"><a href="#5-取仅包含指定字符集的字符串" class="headerlink" title="5.取仅包含指定字符集的字符串"></a>5.取仅包含指定字符集的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;0123abcABC&quot;;</span><br><span class="line">sscanf(string, &quot;%[0-9]%[a-z]%[A-Z]&quot;, buf1, buf2, buf3);</span><br><span class="line">printf(&quot;5.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;5.buf1=%s, buf2=%s, buf3=%s\n\n&quot;, buf1, buf2, buf3);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>5.buf1=123, buf2=abc, buf3=ABC</li></ul><h3 id="6-获取指定字符中间的字符串"><a href="#6-获取指定字符中间的字符串" class="headerlink" title="6.获取指定字符中间的字符串"></a>6.获取指定字符中间的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;ios&lt;android&gt;wp7&quot;;</span><br><span class="line">sscanf(string, &quot;%*[^&lt;]&lt;%[^&gt;]&quot;, buf1);</span><br><span class="line">printf(&quot;6.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;6.buf1=%s\n\n&quot;, buf1);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>6.buf1=android</li></ul><h3 id="7-指定要跳过的字符串"><a href="#7-指定要跳过的字符串" class="headerlink" title="7.指定要跳过的字符串"></a>7.指定要跳过的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;iosVSandroid&quot;;</span><br><span class="line">sscanf(string, &quot;%[a-z]VS%[a-z]&quot;, buf1, buf2);</span><br><span class="line">printf(&quot;7.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;7.buf1=%s, buf2=%s\n\n&quot;, buf1, buf2);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>7.buf1=ios, buf2=android</li></ul><h3 id="8-分割以某字符隔开的字符串"><a href="#8-分割以某字符隔开的字符串" class="headerlink" title="8.分割以某字符隔开的字符串"></a>8.分割以某字符隔开的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字符串取道&apos;-&apos;为止,后面还需要跟着分隔符&apos;-&apos;,</span><br><span class="line">起到过滤作用,有点类似于第7点</span><br><span class="line">string = &quot;android-iphone-wp7&quot;;</span><br><span class="line">sscanf(string, &quot;%[^-]-%[^-]-%[^-]&quot;, buf1, buf2, buf3);</span><br><span class="line">printf(&quot;8.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;8.buf1=%s, buf2=%s, buf3=%s\n\n&quot;, buf1, buf2, buf3);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>8.buf1=android, buf2=iphone, buf3=wp7</li></ul><h3 id="9-提取邮箱地址"><a href="#9-提取邮箱地址" class="headerlink" title="9.提取邮箱地址"></a>9.提取邮箱地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;Email:beijing@sina.com.cn&quot;;</span><br><span class="line">sscanf(string, &quot;%[^:]:%[^@]@%[^.].%s&quot;, buf1, buf2, buf3, buf4);</span><br><span class="line">printf(&quot;9.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;9.buf1=%s, buf2=%s, buf3=%s, buf4=%s\n\n&quot;, buf1, buf2, buf3, buf4);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>9.buf1=Email, buf2=beijing, buf3=sina, buf4=com.cn</li></ul><h3 id="10-过滤掉不想截取或不需要的字符串"><a href="#10-过滤掉不想截取或不需要的字符串" class="headerlink" title="10.过滤掉不想截取或不需要的字符串"></a>10.过滤掉不想截取或不需要的字符串</h3><p>补充在%号后面加一*号,代表过滤这个字符串,不读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;android iphone wp7&quot;;</span><br><span class="line">sscanf(string, &quot;%s %*s %s&quot;, buf1, buf2);</span><br><span class="line">printf(&quot;10.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;10.buf1=%s, buf2=%s\n\n&quot;, buf1, buf2);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>10.android wp7</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="c" scheme="https://jelech.gitee.io/tags/c/"/>
    
      <category term="后台开发" scheme="https://jelech.gitee.io/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何自己编写MakeFile</title>
    <link href="https://jelech.gitee.io/posts/15789/"/>
    <id>https://jelech.gitee.io/posts/15789/</id>
    <published>2019-03-10T09:09:33.000Z</published>
    <updated>2019-08-12T15:11:08.037Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><p><a href="https://blog.csdn.net/haoel/article/details/2886" target="_blank" rel="noopener">《跟我一起写 Makefile》- haoel</a></p><h2 id="关于程序的编译和链接"><a href="#关于程序的编译和链接" class="headerlink" title="　　关于程序的编译和链接"></a>　　<strong>关于程序的编译和链接</strong></h2><p>编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。</p><p>链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（Library File)，也就是 .lib 文件，在UNIX下，是Archive File，也就是 .a 文件。</p><p>总结一下，源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是：Link 2001错误，意思说是说，链接器未能找到函数的实现。你需要指定函数的Object File。</p><p>　　下面我们开始看看如何自己写出makefile。</p><h2 id="Makefile的规则"><a href="#Makefile的规则" class="headerlink" title="　　Makefile的规则"></a>　　<strong>Makefile的规则</strong></h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标 ： 需要的条件 （注意冒号两边有空格）</span><br><span class="line">    命令　　（注意前面用tab键开头）</span><br></pre></td></tr></table></figure><p>　　解释一下：</p><p>　　1 目标可以是一个或多个，可以是Object File，也可以是执行文件，甚至可以是一个标签。</p><p>　　2 需要的条件就是生成目标所需要的文件或目标</p><p>　　3 命令就是生成目标所需要执行的脚本</p><p>　　总结一下，就是说一条makefile规则规定了编译的依赖关系，也就是目标文件依赖于条件，生成规则用命令来描述。<strong>在编译时，如果需要的条件的文件比目标更新的话，就会执行生成命令来更新目标。</strong></p><p>　　下面举个简单的例子说明。如果一个工程有3个头文件，和8个C文件，我们为了完成前面所述的那三个规则，我们的Makefile应该是下面的这个样子的。<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o /</span><br><span class="line">       insert.o search.o files.o utils.o</span><br><span class="line">        cc -o edit main.o kbd.o command.o display.o /</span><br><span class="line">                   insert.o search.o files.o utils.o</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">        cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">       cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">        cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">        cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">        cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">        cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">        cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">        cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">        rm edit main.o kbd.o command.o display.o /</span><br><span class="line">           insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure></p><p>　　反斜杠（/）是换行符的意思。将上面的内容写入到Makefile文件中，然后执行make就可以进行编译，执行make clean就可以删除所有目标文件。解释一下，也就是说生成最终的目标文件edit，依赖于一系列的.o目标文件，而这些.o文件又是需要用源文件来编译生成的。</p><p>　　需要注意的是，clean后面没有条件，而clean本身也不是文件，它只不过是一个动作名字，其冒号后什么也没有，那么，make就不会自动去找文件的依赖性，也就不会自动执行其后所定义的命令。</p><h2 id="make是如何工作的"><a href="#make是如何工作的" class="headerlink" title="　　make是如何工作的"></a>　　<strong>make是如何工作的</strong></h2><p>　　在默认的方式下，也就是我们只输入make命令。那么，</p><p>​    1、make会在当前目录下找名字叫“Makefile”或“makefile”的文件。<br>​    2、如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件。<br>​    3、如果edit文件不存在，或是edit所依赖的后面的 .o 文件的文件修改时间要比edit这个文件新，那么，他就会执行后面所定义的命令来生成edit这个文件。<br>​    4、如果edit所依赖的.o文件也不存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）<br>​    5、当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件生命make的终极任务，也就是执行文件edit了。</p><h2 id="makefile中使用变量"><a href="#makefile中使用变量" class="headerlink" title="　　makefile中使用变量"></a>　　<strong>makefile中使用变量</strong></h2><p>　　前面的知识已经足以让你自己完成一个简单的makefile了，不过makefile的精妙之处远不止如此，下面来看看如何在makefile中使用变量吧。</p><p>　　在上面的例子中，先让我们看看edit的规则：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o /</span><br><span class="line">            insert.o search.o files.o utils.o</span><br><span class="line">      cc -o edit main.o kbd.o command.o display.o /</span><br><span class="line">                 insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>　　我们可以看到[.o]文件的字符串被重复了两次，如果我们的工程需要加入一个新的[.o]文 件，那么我们需要在两个地方加（应该是三个地方，还有一个地方在clean中）。当然，我们的makefile并不复杂，所以在两个地方加也不累，但如果 makefile变得复杂，那么我们就有可能会忘掉一个需要加入的地方，而导致编译失败。所以，为了makefile的易维护，在makefile中我们 可以使用变量。makefile的变量也就是一个字符串，理解成C语言中的宏可能会更好。</p><p>　　于是，我们使用变量objects<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o /</span><br><span class="line">            insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure></p><p>　　这样一来，原来的makefile变成如下的样子：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o /</span><br><span class="line">          insert.o search.o files.o utils.o</span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">        cc -o edit <span class="variable">$(objects)</span></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">        cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">        cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">        cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">        cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">        cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">        cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">        cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">        cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">        rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure></p><p>　　这样看起来方便多了吧，也更加省事了。如果有新的.o文件怎么办？当然是在objects里面添加了，这样只需要一处改变，很方便吧。</p><h2 id="让make自动推导"><a href="#让make自动推导" class="headerlink" title="　　让make自动推导"></a>　　<strong>让make自动推导</strong></h2><p>　　GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。</p><p>　　只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一 个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o /</span><br><span class="line">          insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">        cc -o edit <span class="variable">$(objects)</span></span><br><span class="line">main.o : defs.h</span><br><span class="line">kbd.o : defs.h command.h</span><br><span class="line">command.o : defs.h command.h</span><br><span class="line">display.o : defs.h buffer.h</span><br><span class="line">insert.o : defs.h buffer.h</span><br><span class="line">search.o : defs.h buffer.h</span><br><span class="line">files.o : defs.h buffer.h command.h</span><br><span class="line">utils.o : defs.h</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">        rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>　　当然，如果你觉得那么多[.o]和[.h]的依赖有点不爽的话，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动推导命令和文件的功能呢？来看看最新风格的makefile吧。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o /</span><br><span class="line">          insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">        cc -o edit <span class="variable">$(objects)</span></span><br><span class="line">        </span><br><span class="line"><span class="variable">$(objects)</span> : defs.h</span><br><span class="line">kbd.o command.o files.o : command.h</span><br><span class="line">display.o insert.o search.o files.o : buffer.h</span><br><span class="line">clean :</span><br><span class="line">        rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>　　不过话说回来，本人并不推荐这种方法。<strong>虽然简单，但是这种方法破坏了文件本身的依赖关系</strong>。如果文件过多的话，可能你自己都不清楚了。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="c编程" scheme="https://jelech.gitee.io/tags/c%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>头条实习面&#39;筋&#39;</title>
    <link href="https://jelech.gitee.io/posts/35606/"/>
    <id>https://jelech.gitee.io/posts/35606/</id>
    <published>2019-03-05T12:31:17.000Z</published>
    <updated>2019-04-07T02:13:42.767Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://jelech.gitee.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://jelech.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="感想" scheme="https://jelech.gitee.io/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>I/O 多路复用</title>
    <link href="https://jelech.gitee.io/posts/40254/"/>
    <id>https://jelech.gitee.io/posts/40254/</id>
    <published>2019-02-03T04:09:33.000Z</published>
    <updated>2019-03-04T07:47:34.665Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="IO-多路复用是什么意思？"><a href="#IO-多路复用是什么意思？" class="headerlink" title="IO 多路复用是什么意思？"></a>IO 多路复用是什么意思？</h1><blockquote><p>来源：罗志宇&lt;知乎&gt;：<a href="https://www.zhihu.com/question/32163005/answer/55772739" target="_blank" rel="noopener">链接</a></p><p>假设你是一个机场的空管， 你需要管理到你机场的所有的航线， 包括进港，出港， 有些航班需要放到停机坪等待，有些航班需要去登机口接乘客。 </p><p>你会怎么做? </p><p>最简单的做法，就是你去招一大批空管员，然后每人盯一架飞机， 从进港，接客，排位，出港，航线监控，直至交接给下一个空港，全程监控。 </p><p>那么问题就来了： </p><ul><li>很快你就发现空管塔里面聚集起来一大票的空管员，交通稍微繁忙一点，新的空管员就已经挤不进来了。 </li><li>空管员之间需要协调，屋子里面就1, 2个人的时候还好，几十号人以后 ，基本上就成菜市场了。</li><li>空管员经常需要更新一些公用的东西，比如起飞显示屏，比如下一个小时后的出港排期，最后你会很惊奇的发现，每个人的时间最后都花在了抢这些资源上。 </li></ul><p>现实上我们的空管同时管几十架飞机稀松平常的事情， 他们怎么做的呢？<br>他们用这个东西 </p><p><img src="../../assets/ioMulti1.jpg" alt="img"></p><p>这个东西叫flight progress strip.  每一个块代表一个航班，不同的槽代表不同的状态，然后一个空管员可以管理一组这样的块（一组航班），而他的工作，就是在航班信息有新的更新的时候，把对应的块放到不同的槽子里面。</p><p><em>这个东西现在还没有淘汰哦，只是变成电子的了而已。。</em></p><p>是不是觉得一下子效率高了很多，一个空管塔里可以调度的航线可以是前一种方法的几倍到几十倍。 </p><p>如果你把每一个航线当成一个Sock(I/O 流),  空管当成你的服务端Sock管理代码的话.</p><p><strong>第一种方法就是最传统的多进程并发模型 (每进来一个新的I/O流会分配一个新的进程管理。)</strong><br><strong>第二种方法就是I/O多路复用 (单个线程，通过记录跟踪每个I/O流(sock)的状态，来同时管理多个I/O流 。)</strong></p><p><em>其实“I/O多路复用”这个坑爹翻译可能是这个概念在中文里面如此难理解的原因。所谓的I/O多路复用在英文中其实叫 I/O multiplexing. 如果你搜索multiplexing啥意思，基本上都会出这个图：</em> </p><p><img src="../../assets/ioMulti2.jpg" alt="img"></p><p>于是大部分人都直接联想到”一根网线，多个sock复用” 这个概念，包括上面的几个回答， 其实不管你用多进程还是I/O多路复用， 网线都只有一根好伐。<strong>多个Sock复用一根网线这个功能是在内核＋驱动层实现的</strong>。 </p><p>重要的事情再说一遍： I/O multiplexing 这里面的 multiplexing 指的其实是在单个线程通过记录跟踪每一个Sock(I/O流)的状态(对应空管塔里面的Fight progress strip槽)来同时管理多个I/O流</p><p>. 发明它的原因，是尽量多的提高服务器的吞吐能力。</p><p> 是不是听起来好拗口，看个图就懂了.</p><p><img src="../../assets/ioMulti3.jpg" alt="img"></p><p>在同一个线程里面， 通过拨开关的方式，来同时传输多个I/O流， (学过EE的人现在可以站出来义正严辞说这个叫“时分复用”了）。 </p><p><em>什么，你还没有搞懂“一个请求到来了，nginx使用epoll接收请求的过程是怎样的”， 多看看这个图就了解了。提醒下，ngnix会有很多链接进来， epoll会把他们都监视起来，然后像拨开关一样，谁有数据就拨向谁，然后调用相应的代码处理。</em></p><p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br>了解这个基本的概念以后，其他的就很好解释了。 </p><p><strong>select, poll, epoll 都是I/O多路复用的具体的实现，之所以有这三个鬼存在，其实是他们出现是有先后顺序的。</strong> </p><p>I/O多路复用这个概念被提出来以后， select是第一个实现 (1983 左右在BSD里面实现的)。 </p><p>select 被实现以后，很快就暴露出了很多问题。 </p><ul><li>select 会修改传入的参数数组，这个对于一个需要调用很多次的函数，是非常不友好的。</li><li>select 如果任何一个sock(I/O stream)出现了数据，select 仅仅会返回，但是并不会告诉你是那个sock上有数据，于是你只能自己一个一个的找，10几个sock可能还好，要是几万的sock每次都找一遍，这个无谓的开销就颇有海天盛筵的豪气了。</li><li>select 只能监视1024个链接， 这个跟草榴没啥关系哦，linux 定义在头文件中的，参见<em>FD_SETSIZE。</em></li><li>select 不是线程安全的，如果你把一个sock加入到select, 然后突然另外一个线程发现，尼玛，这个sock不用，要收回。对不起，这个select 不支持的，如果你丧心病狂的竟然关掉这个sock, select的标准行为是。。呃。。不可预测的， 这个可是写在文档中的哦.</li></ul><p>​         “If a file descriptor being monitored by select() is closed in another thread, the result is     unspecified”<br>​    霸不霸气</p><p>于是14年以后(1997年）一帮人又实现了poll,  poll 修复了select的很多问题，比如 </p><ul><li>poll 去掉了1024个链接的限制，于是要多少链接呢， 主人你开心就好。</li><li>poll 从设计上来说，不再修改传入数组，不过这个要看你的平台了，所以行走江湖，还是小心为妙。</li></ul><p><strong>其实拖14年那么久也不是效率问题， 而是那个时代的硬件实在太弱，一台服务器处理1千多个链接简直就是神一样的存在了，select很长段时间已经满足需求。</strong> </p><p>但是poll仍然不是线程安全的， 这就意味着，不管服务器有多强悍，你也只能在一个线程里面处理一组I/O流。你当然可以那多进程来配合了，不过然后你就有了多进程的各种问题。</p><p>于是5年以后, 在2002, 大神 Davide Libenzi 实现了epoll. </p><p>epoll 可以说是I/O 多路复用最新的一个实现，epoll 修复了poll 和select绝大部分问题, 比如： </p><ul><li>epoll 现在是线程安全的。 </li><li>epoll 现在不仅告诉你sock组里面数据，还会告诉你具体哪个sock有数据，你不用自己去找了。 </li></ul><p>epoll 当年的patch，现在还在，下面链接可以看得到：<br><a href="https://link.zhihu.com/?target=http%3A//www.xmailserver.org/linux-patches/nio-improve.html" target="_blank" rel="noopener">/dev/epoll Home Page</a></p><p>贴一张霸气的图，看看当年神一样的性能（测试代码都是死链了， 如果有人可以刨坟找出来，可以研究下细节怎么测的). </p><p><img src="../../assets/ioMulti4 .jpg" alt="img"></p><p>横轴Dead connections 就是链接数的意思，叫这个名字只是它的测试工具叫deadcon. 纵轴是每秒处理请求的数量，你可以看到，epoll每秒处理请求的数量基本不会随着链接变多而下降的。poll 和/dev/poll 就很惨了。</p><p>可是epoll 有个致命的缺点。。只有linux支持。比如BSD上面对应的实现是kqueue。 </p><p><em>其实有些国内知名厂商把epoll从安卓里面裁掉这种脑残的事情我会主动告诉你嘛。什么，你说没人用安卓做服务器，尼玛你是看不起p2p软件了啦。</em> </p><p>而ngnix 的设计原则里面， 它会使用目标平台上面最高效的I/O多路复用模型咯，所以才会有这个设置。一般情况下，如果可能的话，尽量都用epoll/kqueue吧。</p><p>详细的在这里:<br><a href="https://link.zhihu.com/?target=http%3A//nginx.org/en/docs/events.html" target="_blank" rel="noopener">Connection processing methods</a></p><p>PS: 上面所有这些比较分析，都建立在大并发下面，如果你的并发数太少，用哪个，其实都没有区别。 如果像是在欧朋数据中心里面的转码服务器那种动不动就是几万几十万的并发，不用epoll我可以直接去撞墙了。</p></blockquote><h1 id="几种高性能IO模型浅析"><a href="#几种高性能IO模型浅析" class="headerlink" title="几种高性能IO模型浅析"></a>几种高性能IO模型浅析</h1><p>来源：白小狮<csdn> <a href="https://blog.csdn.net/baixiaoshi/article/details/48708347" target="_blank" rel="noopener">链接</a></csdn></p><p>服务器端编程经常需要构造高性能的IO模型，常见的IO模型有四种：</p><p>（1）同步阻塞IO（Blocking IO）：即传统的IO模型。</p><p>（2）同步非阻塞IO（Non-blocking IO）：默认创建的socket都是阻塞的，非阻塞IO要求socket被设置为NONBLOCK。注意这里所说的NIO并非Java的NIO（New IO）库。</p><p>（3）IO多路复用（IO Multiplexing）：即经典的Reactor设计模式，有时也称为异步阻塞IO，Java中的Selector和Linux中的epoll都是这种模型。</p><p>（4）异步IO（Asynchronous IO）：即经典的Proactor设计模式，也称为异步非阻塞IO。</p><p><strong>同步和异步</strong>的概念描述的是用户线程与内核的交互方式：同步是指用户线程发起IO请求后需要等待或者轮询内核IO操作完成后才能继续执行；而异步是指用户线程发起IO请求后仍继续执行，当内核IO操作完成后会通知用户线程，或者调用用户线程注册的回调函数。</p><p><strong>阻塞和非阻塞</strong>的概念描述的是用户线程调用内核IO操作的方式：阻塞是指IO操作需要彻底完成后才返回到用户空间；而非阻塞是指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成。</p><p>另外，Richard Stevens 在《Unix 网络编程》卷1中提到的基于信号驱动的IO（Signal Driven IO）模型，由于该模型并不常用，本文不作涉及。接下来，我们详细分析四种常见的IO模型的实现原理。为了方便描述，我们统一使用IO的读操作作为示例。</p><h2 id="一、同步阻塞IO"><a href="#一、同步阻塞IO" class="headerlink" title="一、同步阻塞IO"></a>一、同步阻塞IO</h2><p>同步阻塞IO模型是最简单的IO模型，用户线程在内核进行IO操作时被阻塞。</p><p><img src="../../assets/ioMulti5 .jpg" alt="img"></p><p>图1 同步阻塞IO</p><p>如图1所示，用户线程通过系统调用read发起IO读操作，由用户空间转到内核空间。内核等到数据包到达后，然后将接收的数据拷贝到用户空间，完成read操作。</p><p>用户线程使用同步阻塞IO模型的伪代码描述为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">read(socket, buffer);</span><br><span class="line">process(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即用户需要等待read将socket中的数据读取到buffer后，才继续处理接收的数据。整个IO请求的过程中，用户线程是被阻塞的，这导致用户在发起IO请求时，不能做任何事情，对CPU的资源利用率不够。</p><h2 id="二、同步非阻塞IO"><a href="#二、同步非阻塞IO" class="headerlink" title="二、同步非阻塞IO"></a><strong>二、同步非阻塞IO</strong></h2><p>同步非阻塞IO是在同步阻塞IO的基础上，将socket设置为NONBLOCK。这样做用户线程可以在发起IO请求后可以立即返回。</p><p> <img src="../../assets/ioMulti6 .jpg" alt="同步非阻塞IO"></p><p>如图2所示，由于socket是非阻塞的方式，因此用户线程发起IO请求时立即返回。但并未读取到任何数据，用户线程需要不断地发起IO请求，直到数据到达后，才真正读取到数据，继续执行。</p><p>用户线程使用同步非阻塞IO模型的伪代码描述为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">while(read(socket, buffer) != SUCCESS)</span><br><span class="line">;</span><br><span class="line">process(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即用户需要不断地调用read，尝试读取socket中的数据，直到读取成功后，才继续处理接收的数据。整个IO请求的过程中，虽然用户线程每次发起IO请求后可以立即返回，但是为了等到数据，仍需要不断地轮询、重复请求，消耗了大量的CPU的资源。一般很少直接使用这种模型，而是在其他IO模型中使用非阻塞IO这一特性。</p><h2 id="三、IO多路复用"><a href="#三、IO多路复用" class="headerlink" title="三、IO多路复用"></a><strong>三、IO多路复用</strong></h2><p>IO多路复用模型是建立在内核提供的多路分离函数select基础之上的，使用select函数可以避免同步非阻塞IO模型中轮询等待的问题。</p><p><img src="../../assets/ioMulti7 .jpg" alt="img"></p><p>图3 多路分离函数select</p><p>如图3所示，用户首先将需要进行IO操作的socket添加到select中，然后阻塞等待select系统调用返回。当数据到达时，socket被激活，select函数返回。用户线程正式发起read请求，读取数据并继续执行。</p><p>从流程上来看，使用select函数进行IO请求和同步阻塞模型没有太大的区别，甚至还多了添加监视socket，以及调用select函数的额外操作，效率更差。但是，使用select以后最大的优势是用户可以在一个线程内同时处理多个socket的IO请求。用户可以注册多个socket，然后不断地调用select读取被激活的socket，即可达到在<strong>同一个线程内同时处理多个IO请求的目的</strong>。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。</p><p>用户线程使用select函数的伪代码描述为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">select(socket);</span><br><span class="line">  while(1) &#123;</span><br><span class="line">    sockets = select();</span><br><span class="line">    </span><br><span class="line">    for(socket in sockets) &#123;</span><br><span class="line">      if(can_read(socket)) &#123;</span><br><span class="line">        read(socket, buffer);</span><br><span class="line">        process(buffer);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中while循环前将socket添加到select监视中，然后在while内一直调用select获取被激活的socket，一旦socket可读，便调用read函数将socket中的数据读取出来。</p><p>然而，使用select函数的优点并不仅限于此。虽然上述方式允许单线程内处理多个IO请求，但是每个IO请求的过程还是阻塞的（在select函数上阻塞），平均时间甚至比同步阻塞IO模型还要长。如果用户线程只注册自己感兴趣的socket或者IO请求，然后去做自己的事情，等到数据到来时再进行处理，则可以提高CPU的利用率。</p><p>IO多路复用模型使用了Reactor设计模式实现了这一机制。</p><p><img src="../../assets/ioMulti8 .jpg" alt="img"></p><p>图4 Reactor设计模式</p><p>如图4所示，EventHandler抽象类表示IO事件处理器，它拥有IO文件句柄Handle（通过get_handle获取），以及对Handle的操作handle_event（读/写等）。继承于EventHandler的子类可以对事件处理器的行为进行定制。Reactor类用于管理EventHandler（注册、删除等），并使用handle_events实现事件循环，不断调用同步事件多路分离器（一般是内核）的多路分离函数select，只要某个文件句柄被激活（可读/写等），select就返回（阻塞），handle_events就会调用与文件句柄关联的事件处理器的handle_event进行相关操作。</p><p><img src="../../assets/142333254136604.png" alt="img"></p><p>图5 IO多路复用</p><p>如图5所示，通过Reactor的方式，可以将用户线程轮询IO操作状态的工作统一交给handle_events事件循环进行处理。用户线程注册事件处理器之后可以继续执行做其他的工作（异步），而Reactor线程负责调用内核的select函数检查socket状态。当有socket被激活时，则通知相应的用户线程（或执行用户线程的回调函数），执行handle_event进行数据读取、处理的工作。由于select函数是阻塞的，因此多路IO复用模型也被称为异步阻塞IO模型。注意，这里的所说的阻塞是指select函数执行时线程被阻塞，而不是指socket。一般在使用IO多路复用模型时，socket都是设置为NONBLOCK的，不过这并不会产生影响，因为用户发起IO请求时，数据已经到达了，用户线程一定不会被阻塞。</p><p>用户线程使用IO多路复用模型的伪代码描述为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void UserEventHandler::handle_event() &#123;</span><br><span class="line">  if(can_read(socket)) &#123;</span><br><span class="line">    read(socket, buffer);</span><br><span class="line">    process(buffer);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">Reactor.register(new UserEventHandler(socket));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用户需要重写EventHandler的handle_event函数进行读取数据、处理数据的工作，用户线程只需要将自己的EventHandler注册到Reactor即可。Reactor中handle_events事件循环的伪代码大致如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Reactor::handle_events() &#123;</span><br><span class="line">  while(1) &#123;</span><br><span class="line">    sockets = select();</span><br><span class="line">    for(socket in sockets) &#123;</span><br><span class="line">      get_event_handler(socket).handle_event();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事件循环不断地调用select获取被激活的socket，然后根据获取socket对应的EventHandler，执行器handle_event函数即可。</p><p>IO多路复用是最常使用的IO模型，但是其异步程度还不够“彻底”，因为它使用了会阻塞线程的select系统调用。因此IO多路复用只能称为异步阻塞IO，而非真正的异步IO。</p><h2 id="四、异步IO"><a href="#四、异步IO" class="headerlink" title="四、异步IO"></a><strong>四、异步IO</strong></h2><p>“真正”的异步IO需要操作系统更强的支持。在IO多路复用模型中，事件循环将文件句柄的状态事件通知给用户线程，由用户线程自行读取数据、处理数据。而在异步IO模型中，当用户线程收到通知时，数据已经被内核读取完毕，并放在了用户线程指定的缓冲区内，内核在IO完成后通知用户线程直接使用即可。</p><p>异步IO模型使用了Proactor设计模式实现了这一机制。</p><p><img src="../../assets/151608309061672.jpg" alt="img"></p><p>图6 Proactor设计模式</p><p>如图6，Proactor模式和Reactor模式在结构上比较相似，不过在用户（Client）使用方式上差别较大。Reactor模式中，用户线程通过向Reactor对象注册感兴趣的事件监听，然后事件触发时调用事件处理函数。而Proactor模式中，用户线程将AsynchronousOperation（读/写等）、Proactor以及操作完成时的CompletionHandler注册到AsynchronousOperationProcessor。AsynchronousOperationProcessor使用Facade模式提供了一组异步操作API（读/写等）供用户使用，当用户线程调用异步API后，便继续执行自己的任务。AsynchronousOperationProcessor 会开启独立的内核线程执行异步操作，实现真正的异步。当异步IO操作完成时，AsynchronousOperationProcessor将用户线程与AsynchronousOperation一起注册的Proactor和CompletionHandler取出，然后将CompletionHandler与IO操作的结果数据一起转发给Proactor，Proactor负责回调每一个异步操作的事件完成处理函数handle_event。虽然Proactor模式中每个异步操作都可以绑定一个Proactor对象，但是一般在操作系统中，Proactor被实现为Singleton模式，以便于集中化分发操作完成事件。</p><p><img src="../../assets/142333511475767.png" alt="img"></p><p>图7 异步IO</p><p>如图7所示，异步IO模型中，用户线程直接使用内核提供的异步IO API发起read请求，且发起后立即返回，继续执行用户线程代码。不过此时用户线程已经将调用的AsynchronousOperation和CompletionHandler注册到内核，然后操作系统开启独立的内核线程去处理IO操作。当read请求的数据到达时，由内核负责读取socket中的数据，并写入用户指定的缓冲区中。最后内核将read的数据和用户线程注册的CompletionHandler分发给内部Proactor，Proactor将IO完成的信息通知给用户线程（一般通过调用用户线程注册的完成事件处理函数），完成异步IO。</p><p>用户线程使用异步IO模型的伪代码描述为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void UserCompletionHandler::handle_event(buffer) &#123;</span><br><span class="line">process(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">aio_read(socket, new UserCompletionHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用户需要重写CompletionHandler的handle_event函数进行处理数据的工作，参数buffer表示Proactor已经准备好的数据，用户线程直接调用内核提供的异步IO API，并将重写的CompletionHandler注册即可。</p><p>相比于IO多路复用模型，异步IO并不十分常用，不少高性能并发服务程序使用IO多路复用模型+多线程任务处理的架构基本可以满足需求。况且目前操作系统对异步IO的支持并非特别完善，更多的是采用IO多路复用模型模拟异步IO的方式（IO事件触发时不直接通知用户线程，而是将数据读写完毕后放到用户指定的缓冲区中）。Java7之后已经支持了异步IO，感兴趣的读者可以尝试使用。</p><h1 id="IO复用函数使用"><a href="#IO复用函数使用" class="headerlink" title="IO复用函数使用"></a>IO复用函数使用</h1><p>参考：风再起时与不羁的风<csdn> <a href="https://blog.csdn.net/chewbee/article/details/78108223" target="_blank" rel="noopener">链接</a></csdn></p><h2 id="select函数"><a href="#select函数" class="headerlink" title="select函数"></a>select函数</h2><p>系统提供Select函数来实现多路复用输入/输出模型，Select系统调用是用来让我们的程序监视多个文件句柄的状态变化。程序会阻塞在select函数上，直到被监视的文件句柄中有一个或多个发生了状态变化。</p><p>函数原型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/select.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">int select(int maxfd,</span><br><span class="line"> fd_set *readset,</span><br><span class="line"> fd_set *writeset,</span><br><span class="line"> fd_set *exceptset,</span><br><span class="line"> const struct timeval *timeout)</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><p>maxfd：需要监视的最大的文件描述符值+1；<br>readset：需要检测的可读文件描述符的集合；<br>writeset：需要检测的可写文件描述符的集合<br>exceptset：需要检测的异常文件描述符的集合<br>timeout：超时时间；超时时间有三种情况：<br>NULL：永远等待下去，仅在有一个描述字准备好I/O时才返回；<br>0：立即返回，仅检测描述符集合的状态，然后立即返回，并不等待外部事件的发生；<br>特定的时间值： 如果在指定的时间段里没有事件发生，select将超时返回；<br>函数返回值有三种情况：</p><p>返回0表示超时了；<br>返回-1，表示出错了；<br>返回一个大于0的数，表示文件描述符状态改变的个数；<br>fd_set是一个文件描述符集合，可以通过以下宏来操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FD_CLR(inr fd,fd_set* set)：用来清除文件描述符集合set中相关fd的位</span><br><span class="line">FD_ISSET(int fd,fd_set *set)：用来测试文件描述符集合set中相关fd的位是否为真</span><br><span class="line">FD_SET（int fd,fd_set*set）：用来设置文件描述符集合set中相关fd的位</span><br><span class="line">FD_ZERO（fd_set *set）：用来清除文件描述符集合set的全部位</span><br></pre></td></tr></table></figure><p><strong>Select – summary:</strong></p><ul><li>我们需要在每次调用之前构建每组集合；</li><li>这个函数检查任何 bit 到更高的数字 —— O(n)；</li><li>我们需要遍历文件描述符来检查它是否存在于从 select() 返回的集合中；</li><li>select 的主要优点在于它的可移植性 —— 每个类 unix 操作系统的都有。</li></ul><h2 id="Poll函数"><a href="#Poll函数" class="headerlink" title="Poll函数"></a>Poll函数</h2><p>Poll的处理机制与Select类似，只是Poll选择了pollfd结构体来处理文件描述符的相关操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct pollfd &#123;</span><br><span class="line">    int fd;         /* 文件描述符 */</span><br><span class="line">    short events;   /* 等待的事件 */</span><br><span class="line">    short revents;  /* 实际发生了的事件 */</span><br><span class="line">&#125; ;</span><br></pre></td></tr></table></figure><p>每一个pollfd结构体都指定了一个文件描述符fd，events代表了需要监听该文件描述的事件掩码，可选的有：</p><p>POLLIN：有数据可读。<br>POLLRDNORM：有普通数据可读。<br>POLLRDBAND：有优先数据可读。<br>POLLPRI：有紧迫数据可读。<br>POLLOUT：写数据不会导致阻塞。<br>POLLWRNORM：写普通数据不会导致阻塞。<br>POLLWRBAND：写优先数据不会导致阻塞。<br>POLLMSGSIGPOLL：消息可用。<br>revents代表文件描述符的操作结果掩码，内核在调用返回时设置这个域。events域中请求的任何事件都可能在revents域中返回，除此之外，revents域还可以包含以下事件：</p><p>POLLER：指定的文件描述符发生错误。<br>POLLHUP：指定的文件描述符挂起事件。<br>POLLNVAL：指定的文件描述符非法。<br>poll的函数原型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># include &lt;poll.h&gt;</span><br><span class="line">int poll (  struct pollfd *fds, </span><br><span class="line"> unsigned int nfds, </span><br><span class="line"> int timeout);</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><p>fds：需要被监视的文件描述符集合；<br>nfds：被监视的文件描述符数量；<br>timeout：超时时间，有三种取值：<br>负数：无限超时，一直等到一个指定事件发生；<br>0：立即返回，并列出准备好的文件描述符；<br>正数：等待指定的时间，单位为毫秒；<br>poll函数与select函数的最大不同之处在于：select函数有最大文件描述符的限制，一般1024个，而poll函数对文件描述符的数量没有限制。但select和poll函数都是通过轮询的方式来查询某个文件描述符状态是否发生了变化，并且需要将整个文件描述符集合在用户空间和内核空间之间来回拷贝，这样随着文件描述符的数量增加，相应的开销也随之增加。</p><p><strong>Poll vs Select</strong></p><ul><li>poll() 不要求用户计算编号最高的文件描述符 +1 的值；</li><li>poll() 对于大值文件描述符更有效。假设我们通过 select() 方法监视一个值为 900 的单个文件描述符 —— 内核将不得不检查传入集合的每个值的每一位，直到第 900 位；</li><li>select() 的文件描述符集合是静态大小的；</li><li>使用 select()，文件描述符集合会在返回时重建，因此每个后续调用都必须重新初始化它们。 poll() 系统调用将输入（events 字段）与输出（revents 字段）分隔开，允许在不更改的情况下重新使用该数组。</li><li>返回时，select() 的 timeout 参数未定义。 可移植性代码需要重新初始化它，这不是pselect() 的问题；</li><li>select() 更具可移植性，因为某些 Unix 系统不支持 poll()。</li></ul><h2 id="epoll函数"><a href="#epoll函数" class="headerlink" title="epoll函数"></a>epoll函数</h2><p>epoll是在Linux内核2.6引进的，是select和poll函数的增强版。与select相比，epoll没有文件描述符数量的限制。epoll使用一个文件描述符管理多个文件描述符，将用户关心的文件描述符事件存放到内核的一个事件列表中，这样在用户空间和内核空间只需拷贝一次。</p><p>epoll操作是包含有三个接口的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/epoll.h&gt;</span><br><span class="line">int epoll_create(int size);</span><br><span class="line">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</span><br><span class="line">int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</span><br></pre></td></tr></table></figure></p><p>epoll_create函数：</p><p>用创建一个epoll的句柄；<br>size用来告诉内核这个监听的数目一共有多大，占用一个fd值；<br>epoll_ctl函数：</p><p>epoll的事件注册函数；<br>参数：</p><p>epfd：epoll_create()的返回值；<br>op：动作，有三种取值：</p><p>EPOLL_CTL_ADD：注册新的fd到epfd中；<br>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；<br>EPOLL_CTL_DEL：从epfd中删除一个fd；<br>fd：需要监听的fd；</p><p>event： 告诉内核需要监听什么事件，取值有：<br>EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；<br>EPOLLOUT：表示对应的文件描述符可以写；<br>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；<br>EPOLLERR：表示对应的文件描述符发生错误；<br>EPOLLHUP：表示对应的文件描述符被挂断；<br>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。<br>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列；<br>epoll_wait函数：</p><p>等待事件的产生；<br>参数：<br>events：从内核得到事件的集合；<br>maxevents：事件集合的大小；<br>timeout：超时时间，0会立即返回，-1表示永久阻塞，正数表示一个指定的值；<br>工作模式</p><p>epoll对文件描述符的操作由两种模式：水平触发LT（level trigger）和边沿触发ET（edge trigger）。默认的情况下为LT模式。LT模式与ET模式的区别在于：</p><p>LT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll_wait时，会再次响应应用程序并通知此事件。<br>ET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。<br>ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p><p><strong>Epoll vs Select/Poll</strong></p><ul><li>我们可以在等待时添加或删除文件描述符；</li><li>epoll_wait 仅返回具有准备文件描述符的对象；</li><li>epoll 有更好的性能 —— O(1) 而不是O(n)；</li><li>epoll 可以表现为级别触发或边缘触发（请参见手册页）；</li><li>epoll 是 Linux 特有的，因此可移植性一般。</li></ul><h1 id="x"><a href="#x" class="headerlink" title="x"></a>x</h1>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机网络" scheme="https://jelech.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>c++后台工程师</title>
    <link href="https://jelech.gitee.io/posts/40165/"/>
    <id>https://jelech.gitee.io/posts/40165/</id>
    <published>2019-01-01T10:09:33.000Z</published>
    <updated>2019-01-10T14:25:50.758Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>一下为后台开发所用的大部分技术栈。一起加油学吧！</p><a id="more"></a><p><img src="/assets/后台开发-2.jpg" alt="后台开发-2"></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;p&gt;一下为后台开发所用的大部分技术栈。一起加油学吧！&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="c++" scheme="https://jelech.gitee.io/tags/c/"/>
    
      <category term="后台开发" scheme="https://jelech.gitee.io/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>unix下c语言编程</title>
    <link href="https://jelech.gitee.io/posts/36582/"/>
    <id>https://jelech.gitee.io/posts/36582/</id>
    <published>2018-12-26T08:09:33.000Z</published>
    <updated>2018-12-28T02:06:37.842Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h2><ul><li><p>编译时需加上 <strong>-g</strong> </p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc -g -o test test.c</span><br><span class="line">gdb test</span><br></pre></td></tr></table></figure></li><li><p>gdb中使用</p><ul><li><code>list</code>：显示源代码</li><li><code>break n</code>：在第n行添加断点</li><li><code>run</code>：执行被调试的程序</li><li><code>interrupt</code>：终止正在调试的程序</li><li><code>step</code>：单步执行代码，可进入函数</li><li><code>next</code>：单步执行代码，不可进入函数</li><li><code>continue</code>：继续执行，知道下一个断点</li><li><code>watch j</code>：监控 j 变量，在变化时打印</li><li><code>quit</code>：退出</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="unix" scheme="https://jelech.gitee.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>python线程</title>
    <link href="https://jelech.gitee.io/posts/63716/"/>
    <id>https://jelech.gitee.io/posts/63716/</id>
    <published>2018-12-25T02:09:33.000Z</published>
    <updated>2019-08-12T15:36:25.213Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+O9XWnqKjdxK/SZe6ZeY5i9o0ndquHUNaso44XnaZgSipqgS+d6cJQ40aGqNlqlzO6ehFii374+gITwDhE2jnjnoNYHV1fkvcdL0AC/alwMHIoaG+ZquETZzo1a5l/h8iWopOlwyH5qQ==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私人的哦&lt;/br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://jelech.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://jelech.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://jelech.gitee.io/tags/python/"/>
    
      <category term="线程" scheme="https://jelech.gitee.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
