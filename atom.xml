<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jelech的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jelech.cn/"/>
  <updated>2018-12-11T14:47:04.156Z</updated>
  <id>http://www.jelech.cn/</id>
  
  <author>
    <name>Jelech</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>头条实习面&#39;筋&#39;</title>
    <link href="http://www.jelech.cn/posts/35606/"/>
    <id>http://www.jelech.cn/posts/35606/</id>
    <published>2018-12-11T12:31:17.000Z</published>
    <updated>2018-12-11T14:47:04.156Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="头条面经"><a href="#头条面经" class="headerlink" title="头条面经"></a>头条面经</h1><blockquote><p>嘤嘤嘤，自己还是太菜了，复习不到位</p></blockquote><p>有幸通过了头条简历筛选，面试经过了两面，但是还没有到第三面。按以往的规律，应该是挂在了二面。</p><p>一面的时候面试官好像有点事，没及时上线。联系HR，10分钟后，开始了。</p><ol><li>自我介绍<ul><li>说了一下自己基本信息。</li><li>开始说自己热爱技术和编程，以及现实如何体现。</li><li>自己开发效率高，以及现实如何体现。</li></ul></li><li>TCP/UDP区别</li><li>TCP连接和断开过程</li><li>为什么会有TIME_WAIT信号</li><li>ping的是什么，如何实现的</li><li>Traveroute了解过吗</li><li>DNS如何解析的</li><li>编程题：m个格子，每个格子里有一些石头，青蛙能跳3到5个格子，问跳到最后一个格子，最少碰到多少个石头。</li><li>编程题：找一个二叉树的子树，这棵子树是最大的二叉查找树。</li><li>mysql的两个引擎了解过吗，有什么区别<ol><li>索引是如何实现的（？？？？？？）</li></ol></li><li>有什么想问的</li></ol><blockquote><p>有惊无险，这部分内容基本都回答上来了。然后让我等一会（应该就是等二面面试官愿不愿意吧?）</p></blockquote><p>二面开始的时候，面试官的表情感觉很开心，也在微笑，但是。。。。。</p><ol><li>自我介绍（就和一面一样了）</li><li>socket的 select、poll、epoll了解过吗</li><li>如何禁止ctrl+c（进程运行时候）</li><li>一个类中定义一个<code>int a</code>写一个类的拷贝函数</li><li>编程题：把<code>const static int a = 1;</code>改为宏定义</li><li>编程题：把<code>一个函数调用其他函数</code>这样一个函数改为宏定义</li><li>编程题：如何判断链表的环、环的长度如何判断</li><li>描述一下红黑树</li><li>如果访问一个百度页面，HTTP如何运作的</li><li>描述一下python的多线程（还真是写了啥问啥啊, 回答了linux下的多线程）</li><li>描述一下进程运行时候，操作系统是如何分配内存的</li><li>描述一下new和malloc的区别</li><li>有什么问题</li></ol><p>然后面试官说时间也差不多了，就说下来等通知吧…其实也就是说你面试失败了。如果有机会应该会直接安排三面的。就这样第一次面试宇宙条就挂了。没有好好准备，三天前突然收到hr电话说安排面试，那时候才真的是什么都不知道，这几天恶补了很多东西。还是很佩服自己，哈哈~能在这几天学了后过了一面！加油！</p><p>以及附上其他人在头条问的问题</p><ul><li>判断三角形，自己测试，写测试用例</li><li>单链表反转</li><li>ArrayList和LinkedList的区别，balala 数组和链表的区别，增删查改这些情况用哪个更好</li><li>数据库题<br>  微信视频聊天怎么测试 还有吗？还有吗？还有吗？还有吗？</li><li>理解mvc，balabala 说向登陆框发送请求这种是哪层的？controller里面写逻辑吗？</li><li>问了项目讲了一下，然后主要问自己的贡献做了哪些？</li><li>正则表达式用过吗？系统测试怎么测的？</li><li>和你做事的人很拖沓，但是你想完成任务，你又需要在他的基础上完成，你会怎么做，反复强调他就是不做咋办？答好好沟通吧啦吧啦，实在不行只能自己做了，所以你倾向于自己做吗？（口气好像不对）实在不行就给老师反映反映吧。</li><li>遇到的最大的挫折，balabala 技术上很细节的问题你不会弄该怎么办？</li><li>为什么做测试不做开发？</li><li>倾向web端还是移动端，我说web端熟悉点，但是并不是一定要做web端用过抖音吗？用过，那你应该知道它是移动端的吧，知道</li><li>有什么要问的吗？</li><li>udp/tcp的区别，三次连接是怎么建立的<br>  https和http的区别<br>  关于做的项目，比如说报表查询，怎么测试<br>  学习过程中遇到困难怎么解决</li><li>String、StringBuffer、StringBuilder的区别。StringBuffer安全，为什么安全？balalla然后说StringBuffer、StringBuilder做反转很方便，然后说做个代码反转代码题：<a href="http://www.baidu.com-&gt;com.baidu.www" target="_blank" rel="noopener">www.baidu.com-&gt;com.baidu.www</a></li><li>代码优化哪些方面，如果有100行代码你抽成几个函数？</li><li>关于翻页，pc端要注意哪些？感觉自己在天马行空的乱说<br>  数据库的特性<br>  gc算法有哪些？<br>  关于数据库方面的。</li><li>question1：<br>  给定数组返回任意满足（当前数大于左右两个数） 要求时间小于O(n)<br>  开始想返回随机数，面试官提示小于O(n)就是logn 就是二分<br>  想了半天放弃了QAQ</li><li>question2:<br>  给定random7返回random10<br>  想了半天放弃了</li><li>question3:<br>  蛇形打印，前两天刚做过，写完代码说n!=m的情况 改了一下输出没问题</li><li>问自己优点</li><li>了解STL吗 问map内部实现 红黑树和AVL的区别 为啥是红黑树</li><li>写题：bfs非递归遍历二叉树<br>  应该是queue&lt;Tree*&gt;q 写成了queue<tree>q<br>  问熟悉GBDT吗（挣扎了一下，不会 （这个要好好看看了<br>  两面都问平时写啥语言<br>  介绍一下自己会啥 擅长什么（已经懵逼了</tree></li><li>先来一道算法题 最长公共子串<br>  线程和进程，你的理解</li><li>TCP和UDP区别（之前面试也问到过）<br>  最后问简历，把很多项目都很仔细地问到了</li><li>然后说过了<br>  二面<br>  然后4道算法题<br>  用rand3实现rand7<br>  输出”abcd”的全排列<br>  在一个游戏里每秒更新一次参与者分数排序，用什么排序算法最好，为什么？（堆）<br>  （其中2 3道都是LC原题）</li><li>二叉树中序遍历</li><li>如何找到无序数组的中位数，讲思路，讲了利用快排的思想<br>  进程线程，进程有哪些区，jvm哪些区</li><li>数据库查询优化，mysql引擎，innodb和myisam区别</li><li>redis事务跟mysql事务的区别，redis的qps能达到多少</li><li>http协议怎么解析的，是文本协议还是二进制协议</li><li>怎么知道哪里是内容<br>  tcp四次挥手<br>  进程的内存是多大(讲了linux虚拟内存机制，win不清楚)</li><li>tcp的三次握手四次挥手的全过程和状态，为什么要四次挥手，为什么要经过TIME WAIT状态</li><li>tcp udp的区别<br>  应用层的协议有哪些，ping 使用的什么协议，工作在哪一层</li><li>http1.0和1.1的区别 http的状态码 为什么需要浏览器缓存</li><li>进程通信的方式，僵尸进程 孤儿进程</li><li>说说怎么实现管道，为什么管道都是用于父子进程或兄弟进程（fork机制的原因），我说了子进程完全继承了父进程的内容，又问我信号会继承吗，我说是的，他说真的吗，难道有什么问题吗</li><li>问我有没有看过数据库（看过，但是真的没用过，所以没问了）<br>  如果要你实现一个微信朋友圈的功能，你会怎么做</li><li>我看你用的是c和c++，说说怎么管理内存防止内存泄漏（智能指针）</li><li>怎么查看是否出现了内存泄漏</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.jelech.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.jelech.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="感想" scheme="http://www.jelech.cn/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>跟我一起复习操作系统（一）</title>
    <link href="http://www.jelech.cn/posts/6676/"/>
    <id>http://www.jelech.cn/posts/6676/</id>
    <published>2018-12-06T14:09:33.000Z</published>
    <updated>2018-12-10T05:53:00.066Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="操作系统的自白（一）"><a href="#操作系统的自白（一）" class="headerlink" title="操作系统的自白（一）"></a>操作系统的自白（一）</h1><ul><li>操作系统是一种建立在电脑硬件上的计算机底层软件，他能接受上层软件的要求，也能操作下层的基础硬件。他作为帮助你进行计算机编程、使用，帮你管理底层的许多杂碎和问题…难道你不该感谢一下吗？</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>为什么要分类？。。。。直接学啊！</li><li>其实我想说一下的章节分类….面试好像都考不到。最多和死锁搭上边。我想问用户态和内核态呢？</li></ul><h3 id="不算章节的章节"><a href="#不算章节的章节" class="headerlink" title="不算章节的章节"></a>不算章节的章节</h3><ul><li>进程描述和控制</li><li>线程</li><li>并发互斥与同步</li><li>死锁和饥饿</li><li>内存管理</li><li>虚拟内存</li><li>单处理调度</li><li>复用和实时调度</li><li>I/O管理和硬盘管理</li><li>文件管理</li></ul><blockquote><p>其实并不想这么写</p><p>而且有本Unix下的c语言开发，非常好！</p></blockquote><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><ul><li>主要是记录好所有的重点，而尽量的不进行描述，给之后复习节省脑力。看到关键词就能慢慢回忆起这部分内容。</li><li>而且…我好像不是为了开发操作系统而学习的，很多超级细节的东西应该没必要….嘤</li><li>理想真美好~</li><li>或许把linux源码读一下可能更有利于学习，但是….如果有调用底层的东西确实看不下去啊。</li><li>那没办法了</li></ul><p>嘤，开始吧</p><hr><h2 id="进程和线程是兄弟吗"><a href="#进程和线程是兄弟吗" class="headerlink" title="进程和线程是兄弟吗"></a>进程和线程是兄弟吗</h2><ul><li>不。他们是父子关系。你这种想法太可怕了。</li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><blockquote><p>进程嘛，可以直接理解为我们平常用的程序。但是呢，有点不同的是，它也是个有ID身份证的！这种身份证啊，在他们那叫做PCB - Process Control Blocks</p></blockquote><h4 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h4><ul><li>PCB是进程的身份证(唯一表示符，状态，优先级，程序控制，内存指针，文本数据，I/O状态信息，记录信息)</li><li>哎呀，看字面意思也能懂的嘛，以后用到了慢慢讲嘛，一个进程无非就为了抢数据，得有更高身份的人，操作系统这个大大才会优先给他资源嘛。</li></ul><h4 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h4><ul><li>2-state model：就跑还是没跑的区别。</li><li>5-state model：和交叉的接力棒很像哦。<ul><li>一个人来了，先准备好，然后开始跑。</li><li>第二个人来了，要和第一个交接。</li><li>一个跑，一个就准备好。好的，这就是两个人的互相py，哦不，是互相传力了。</li><li>如果有个人不想跑了，那就退出了呗。</li><li>如果有人突然想上厕所了。哎呀不能终止比赛啊，先让他去吧（阻塞了），再上另一个选手进行交叉接力。</li><li>又有人想去了？去吧去吧，拍好队，怎么去的就怎么回来。</li><li>嘿嘿，上厕所的回来了，先等着准备好。这就继续交接啦。<ul><li>需要图？不存在的，YY才是最强大的。</li></ul></li></ul></li><li>7-state model：<ul><li>嘤，有人想上大厕所，有人想回趟家(?????)，这不能让排队的一直等着啊。</li><li>那没法了，分类一下吧，时间长的假装他睡觉了，放另一个等待队列吧。</li><li>上厕所的还是继续阻塞。回家的排了一定时间，给我把它放到另一个长♂久的队列里去。</li></ul></li></ul><h2 id="平时笔记-乱"><a href="#平时笔记-乱" class="headerlink" title="平时笔记-乱"></a>平时笔记-乱</h2><p>用户态和核心态：     用户态：             用户程序执行时机器所处的状态     权限小，只能执行特定指令。<br>核心态：操作系统管理程序执行时机器所处的状态     权限大，能执行特权指令。      特权指令：I/O指令、设置中断屏蔽指令、清理内存指令、设置时钟指令。<br>核心态只向用户提供接口，使得用户态能执行特定的指令和中断等。</p><p>1、调度：进程是拥有资源和独立调度的基本单位     线程只是独立调度单位，运行时资源属于进程。</p><p>2、拥有资源： 不管是有无线程的操作系统，进程都是拥有资源的基本单位，而线程只拥有极少的私有资源（程序计数器、一组寄存器、栈。用来保存线程的执行历史和线程的执行状态，这些资源也是进程的）</p><p>3、并发性：有线程的操作系统，进程可以并发，线程也可以并发。可以理解为一个程序有好几个进程，每个进程又有好几个线程。</p><p>4、系统开销：进程大（切换进程时要保存运行环境，重新启动时又要回复） ，线程小（自己本来就那么一点可怜的资源，开销肯定小）</p><p>用户级线程和内核级线程区别：</p><p>用户级线程：当一个用户级线程阻塞，整个进程都必须等待。<br>内核级线程：当一个内核级线程阻塞，不会影响其他线程。因为一旦线程阻塞，内核会从当前或者其他进程(process)中重新选择一个线程保证程序的执行。<br>进程通信：</p><p>共享存储器系统 ：设置一个共享存储区<br>消息传递系统：直接通信方式、间接通信方式（设置一个中间实体-信箱）<br>管道通信系统：管道是用于连接读写进程以实现它们直接通信的共享文件，所以管道是共享文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="http://www.jelech.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>学习的阻碍</title>
    <link href="http://www.jelech.cn/posts/45237/"/>
    <id>http://www.jelech.cn/posts/45237/</id>
    <published>2018-12-06T13:31:17.000Z</published>
    <updated>2018-12-06T14:00:57.564Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.jelech.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.jelech.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="感想" scheme="http://www.jelech.cn/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="学习" scheme="http://www.jelech.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP学习笔记</title>
    <link href="http://www.jelech.cn/posts/13277/"/>
    <id>http://www.jelech.cn/posts/13277/</id>
    <published>2018-12-04T04:09:33.000Z</published>
    <updated>2018-12-08T05:26:37.656Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="TCP-IP-协议-栈-笔记"><a href="#TCP-IP-协议-栈-笔记" class="headerlink" title="TCP/IP 协议(栈)笔记"></a>TCP/IP 协议(栈)笔记</h1><ul><li><p>您的浏览器与服务器都在使用 TCP/IP 协议</p></li><li><p>您的 E-Mail 使用 TCP/IP 协议</p></li><li><p>因特网地址是 TCP/IP 协议</p></li></ul><p>网际互联及OSI七层模型：</p><p>物理层、数据链路层、网络层、传输层、表示层、会话层、应用层</p><ul><li><p>物理层</p><p>  作用：定义一些电器，机械，过程和规范，如集线器；</p><p>  PDU(协议数据单元)：bit/比特</p><p>  设备：集线器HUB;</p><p>  注意：没有寻址的概念；</p></li><li><p><strong>数据链路层</strong></p><p>  作用：定义如何格式化数据，支持错误检测；</p><p>  典型协议：以太网，帧中继（古董级VPN）</p><p>  PDU：frame（帧）设备：以太网交换机；</p><p>  备注：交换机通过MAC地址转发数据，逻辑链路控制；</p></li><li><p><strong>网络层</strong></p><p>  作用：定义一个逻辑的寻址，选择最佳路径传输，路由数据包；</p><p>  典型协议：IP，IPX，ICMP,ARP(IP-&gt;MAC),IARP;</p><p>  PDU:packet/数据包；</p><p>  设备：路由器</p><p>  备注：实现寻址</p></li><li><p><strong>传输层</strong>：</p><p>  作用：提供可靠和尽力而为的传输；</p><p>  典型协议：TCP,UDP,SPX,port(65535个端口),EIGRP,OSPF,</p><p>  PDU:fragment 段；</p><p>  无典型设备；</p><p>  备注：负责网络传输和会话建立;</p></li><li><p>会话层：</p><p>  作用：控制会话，建立管理终止应用程序会话；</p><p>  典型协议：NFS, SQL, ASP, PHP, JSP, RSVP(资源源预留协议), windows， </p><p>  备注：负责会话建立；</p></li><li><p>表示层：</p><p>  作用：格式化数据；</p><p>  典型协议：ASCII, JPEG. PNG, MP3. WAV, AVI, </p><p>  备注：可以提供加密服务；</p></li><li><p><strong>应用层：</strong></p><p>  作用：控制应用程序；</p><p>  典型协议：telnet, ssh, http, ftp, smtp, rip, BGP, (未完待续)</p><p>  备注：为应用程序提供网络服务；</p></li></ul><h2 id="在-TCP-IP-内部"><a href="#在-TCP-IP-内部" class="headerlink" title="在 TCP/IP 内部"></a>在 TCP/IP 内部</h2><p>在 TCP/IP 中包含一系列用于处理数据通信的协议：</p><ul><li>TCP (传输控制协议) - 应用程序之间通信</li><li>UDP (用户数据报协议) - 应用程序之间的简单通信</li><li>IP (网际协议) - 计算机之间的通信</li><li>ICMP (因特网消息控制协议) - 针对错误和状态</li><li>DHCP (动态主机配置协议) - 针对动态寻址</li></ul><p>当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方”握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。</p><p>这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。</p><p>UDP 和 TCP 很相似，但是更简单，同时可靠性低于 TCP。</p><h3 id="IP-是无连接的协议"><a href="#IP-是无连接的协议" class="headerlink" title="IP 是无连接的协议"></a>IP 是无连接的协议</h3><p>IP 用于计算机之间的通信。</p><p>IP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。</p><p>通过 IP，消息（或者其他数据）被<code>分割为小的独立的包</code>，并通过因特网在计算机之间传送。</p><p>IP 负责将每个包<strong>路由</strong>至它的目的地。</p><h3 id="IP-路由器"><a href="#IP-路由器" class="headerlink" title="IP 路由器"></a>IP 路由器</h3><p>当一个 IP 包从一台计算机被发送，它会到达一个 IP 路由器。</p><p>IP 路由器负责将这个包路由至它的目的地，直接地或者通过其他的路由器。</p><p><strong>在一个相同的通信中，一个包所经由的路径可能会和其他的包不同</strong>。而路由器负责根据通信量、网络中的错误或者其他参数来进行正确地寻址。</p><h3 id="总结TCP-IP是什么"><a href="#总结TCP-IP是什么" class="headerlink" title="总结TCP/IP是什么"></a>总结TCP/IP是什么</h3><p>TCP/IP 意味着 TCP 和 IP 在一起协同工作。</p><p>TCP 负责应用软件（比如您的浏览器）和网络软件之间的通信。</p><p>IP 负责计算机之间的通信。</p><p>TCP 负责将数据分割并装入 IP 包，然后在它们到达的时候重新组合它们。</p><p>IP 负责将包发送至接受者。</p><h2 id="TCP-IP-寻址"><a href="#TCP-IP-寻址" class="headerlink" title="TCP/IP 寻址"></a>TCP/IP 寻址</h2><p>TCP/IP 使用 32 个比特或者 4 组 0 到 255 之间的数字来为计算机编址。</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>每个计算机必须有一个 IP 地址才能够连入因特网。</p><p>每个 IP 包必须有一个地址才能够发送到另一台计算机。</p><p>每个计算机必须有一个唯一的 4 组数字的地址，每组数字必须在 0 到 255 之间，并由点号隔开，比如：<code>192.168.1.60</code></p><h3 id="IP-V6"><a href="#IP-V6" class="headerlink" title="IP V6"></a>IP V6</h3><blockquote><p>IPv6 是 “Internet Protocol Version 6” 的缩写，也被称作下一代互联网协议，它是由 IETF 小组（Internet 工程任务组Internet Engineering Task Force）设计的用来替代现行的 IPv4（现行的）协议的一种新的 IP 协议。</p></blockquote><p>规定的标准语法建议把 IPv6 地址的 128 位（16 个字节）写成 8 个 16 位的无符号整数，每个整数用 4 个十六进制位表示，这些数之间用冒号（:）分开，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">686</span>E：<span class="number">8</span>C64：FFFF：FFFF：<span class="number">0</span>：<span class="number">1180</span>：<span class="number">96</span>A：FFFF</span><br></pre></td></tr></table></figure><p>冒号十六进制记法允许零压缩，即一串连续的0可以用一对冒号取代，只能使用一次零压缩。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FF05：0：0：0：0：0：0：B3 /*可以定成：*/ FF05：：B3</span><br></pre></td></tr></table></figure></p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>12 个阿拉伯数字很难记忆。使用一个名称更容易。</p><p>用于 TCP/IP 地址的名字被称为域名。jelech.cn 就是一个域名。</p><ul><li><p><code>SSL</code> - 安全套接字层（Secure Sockets Layer）</p><p>  SSL 协议用于为安全数据传输加密数据。</p></li><li><p><code>SMTP</code> - 简易邮件传输协议（Simple Mail Transfer Protocol）</p><p>  SMTP 用于电子邮件的传输。</p></li><li><p><code>MIME</code> - 多用途因特网邮件扩展（Multi-purpose Internet Mail Extensions）</p><p>  MIME 协议使 SMTP 有能力通过 TCP/IP 网络传输多媒体文件，包括声音、视频和二进制数据。</p></li><li><p><code>IMAP</code> - 因特网消息访问协议（Internet Message Access Protocol）</p><p>  IMAP 用于存储和取回电子邮件。</p></li><li><p>POP - 邮局协议（Post Office Protocol）</p><p>  POP 用于从电子邮件服务器向个人电脑下载电子邮件。</p></li><li><p><code>FTP</code> - 文件传输协议（File Transfer Protocol）</p><p>  FTP 负责计算机之间的文件传输。</p></li><li><p><code>NTP</code> - 网络时间协议（Network Time Protocol）</p><p>  NTP 用于在计算机之间同步时间（钟）。</p></li><li><p><code>DHCP</code> - 动态主机配置协议（Dynamic Host Configuration Protocol）</p><p>  DHCP 用于向网络中的计算机分配动态 IP 地址。</p></li><li><p>SNMP - 简单网络管理协议（Simple Network Management Protocol）</p><p>  SNMP 用于计算机网络的管理。</p></li><li><p>LDAP - 轻量级的目录访问协议（Lightweight Directory Access Protocol）</p><p>  LDAP 用于从因特网搜集关于用户和电子邮件地址的信息。</p></li><li><p><code>ICMP</code> - 因特网消息控制协议（Internet Control Message Protocol）</p><p>  ICMP 负责网络中的错误处理。</p></li><li><p><code>ARP</code> - 地址解析协议（Address Resolution Protocol）</p><p>  ARP - 用于通过 IP 来查找基于 IP 地址的计算机网卡的硬件地址。</p></li><li><p>RARP - 反向地址转换协议（Reverse Address Resolution Protocol）</p><p>  RARP 用于通过 IP 查找基于硬件地址的计算机网卡的 IP 地址。</p></li><li><p>BOOTP - 自举协议（Boot Protocol）</p><p>  BOOTP 用于从网络启动计算机。</p></li><li><p><code>PPTP</code> - 点对点隧道协议（Point to Point Tunneling Protocol）</p><p>  PPTP 用于私人网络之间的连接（隧道）。</p></li></ul><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p><strong>RFC</strong></p><ul><li>RFC是什么？RFC就是tcp/ip协议的标准文档，在<a href="http://www.ietf.org/iesg/1rfc_index.txt" target="_blank" rel="noopener">这里</a>我们可以看到RFC那长长的定义列表，现在它一共有4000多个协议的定义，当然，我们所要学习的，也就是那么十几个协议而已。</li></ul><p><strong>端口号</strong>(port)</p><ul><li>注意，这个号码是用在TCP，UDP上的一个逻辑号码，并不是一个硬件端口，我们平时说把某某端口封掉了，也只是在IP层次把带有这个号码的IP包给过滤掉了而已。</li></ul><h3 id="环回接口（loopback）"><a href="#环回接口（loopback）" class="headerlink" title="环回接口（loopback）"></a>环回接口（loopback）</h3><p>平时我们用127.0.0.1来尝试自己的机器服务器好使不好使。走的就是这个loopback接口。对于环回接口，有如下三点值得注意:</p><ul><li><p>传给环回地址（一般是127.0.0.1）的任何数据均作为I P输入。</p></li><li><p>传给广播地址或多播地址的数据报复制一份传给环回接口，然后送到以太网上。这是 因为广播传送和多播传送的定义包含主机本身。</p></li><li><p>任何传给该主机IP地址的数据均送到环回接口。</p></li></ul><h3 id="IP、ARP、RARP协议"><a href="#IP、ARP、RARP协议" class="headerlink" title="IP、ARP、RARP协议"></a>IP、ARP、RARP协议</h3><p>​    </p><ul><li>ARP协议用来找到目标主机的Ethernet网卡Mac地址，IP则承载要发送的消息</li></ul><h4 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h4><ul><li><p>TTL字段规定该数据包在穿过多少个路由之后才会被抛弃(这里就体现出来IP协议包的不可靠性，它不保证数据被送达)</p></li><li><p>稍微一般一点的情况是，主机通过若干个路由器(router)和目的主机连接。那么路由器就要通过ip包的信息来为ip包寻找到一个合适的目标来进行传递，比如合适的主机，或者合适的路由。路由器或者主机将会用如下的方式来处理某一个IP数据包</p><ul><li>如果IP数据包的TTL(生命周期)已到，则该IP数据包就被抛弃。</li><li>搜索路由表，优先搜索匹配主机，如果能找到和IP地址完全一致的目标主机，则将该包发向目标主机</li><li>搜索路由表，如果匹配主机失败，则匹配同子网的路由器，这需要“子网掩码(1.3.)”的协助。如果找到路由器，则将该包发向路由器。</li><li>搜索路由表，如果匹配同子网路由器失败，则匹配同网号(第一章有讲解)路由器，如果找到路由器，则将该包发向路由器。</li><li>搜索路由表，如果以上都失败了，就搜索默认路由，如果默认路由存在，则发包</li><li>如果都失败了，就丢掉这个包。</li></ul></li><li><p>子网掩码是由32bit的二进制数字序列,形式为是一连串的1和一连串的0，例如：255.255.255.0(二进制就是11111111.11111111.11111111.00000000)</p></li><li><p><strong>首部</strong></p><ul><li>4版本、4首长度、8服务类型、16总长度、</li><li>16标识、3标志、13位片偏移</li><li>8生存时间TTL、8协议(1ICMP, 6TCP, 17UDP)、16位首部检验和</li><li>32位源IP</li><li>32位目的IP      &lt;== 20字节</li><li>[选项]</li><li>数据</li></ul></li></ul><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h4><ul><li><p>ARP(地址解析)</p></li><li><p>ARP高速缓存(就是一个IP-MAC地址对应表缓存)</p></li><li><p>如果查询的IP-MAC值对不存在，那么主机就向网络发送一个ARP协议广播包</p></li><li><p>如果收到广播包的某一个主机发现自己符合条件，那么就准备好一个包含自己的MAC地址的ARP包传送给发送ARP广播的主机</p></li><li><p>高速缓存是有时限的，一般是20分钟</p></li></ul><h3 id="ICMP协议-amp-amp-Ping-amp-amp-Traceroute"><a href="#ICMP协议-amp-amp-Ping-amp-amp-Traceroute" class="headerlink" title="ICMP协议 &amp;&amp; Ping &amp;&amp; Traceroute"></a>ICMP协议 &amp;&amp; Ping &amp;&amp; Traceroute</h3><ul><li>保证数据送达的工作应该由其他的模块来完成。其中一个重要的模块就是ICMP(网络控制报文)协议。</li><li>当传送IP数据包发生错误－－比如主机不可达，路由不可达等等，ICMP协议将会把错误信息封包，然后传送回给主机。</li><li>ICMP协议大致分为两类，一种是查询报文，一种是差错报文。<ul><li>ping查询（不要告诉我你不知道ping程序）</li><li>子网掩码查询（用于无盘工作站在初始化自身的时候初始化子网掩码）</li><li>时间戳查询（可以用来同步时间）</li></ul></li></ul><h4 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h4><ul><li><p>Traceroute是用来侦测主机到目的主机之间所经路由情况的重要工具，也是最便利的工具。</p></li><li><p>首先给目的主机<strong>发送</strong>一个TTL=1的UDP数据包，而经过的第一个路由器收到这个数据包以后，就自动把<strong>TTL减1</strong>，而TTL<strong>变为0</strong>以后，路由器就把这个包给<strong>抛弃</strong>了，并同时产生 一个主机<strong>不可达的ICMP数据报</strong>给主机。主机收到这个数据报以后<strong>再发一个TTL=2</strong>的UDP数据报给目的主机，然后刺激第二个路由器给主机发ICMP数据 报。如此往复直到到达目的主机。这样，traceroute就拿到了<strong>所有</strong>的路由器ip。</p></li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><ul><li>利用TCP通信的两台主机首先要经历一个“<strong>拨打电话</strong>”的过程，等到通信准备结束才开始传输数据，最后结束通话。</li><li>应用数据被分割成TCP认为最适合发送的数据块。这和UDP完全不同，应用程序产生的数据报<strong>长度</strong>将保持不变。</li><li>当TCP发出一个段后，它启动一个<strong>定时器</strong>，等待目的端确认收到这个报文段。如果不能 及时收到一个确认，将重发这个报文段。</li><li>当TCP收到发自TCP连接另一端的数据，它将发送一个<strong>确认</strong>。这个确认不是立即发送，通常将推迟几分之一秒。</li><li>TCP将保持它首部和数据的<strong>检验和</strong>。这是一个端到端的检验和，目的是检测数据在传输 过程中的任何变化。如果收到段的检验和有差错， T P将丢弃这个报文段和不确认收到此报文段（希望发端超时并重发）。</li><li>IP数据报的到达可能会失序，因此TCP报文段 的到达也可能会失序。如果必要， TCP将对收到的数据进行重新排序，将收到的数据以<strong>正确的顺序</strong>交给应用层。</li><li>TCP还能提供<strong>流量控制</strong>。TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机的缓冲区溢出。</li></ul><h3 id="TCP建立与终止"><a href="#TCP建立与终止" class="headerlink" title="TCP建立与终止"></a>TCP建立与终止</h3><blockquote><p>TCP是一个面向连接的协议，所以在连接双方发送数据之前，都需要首先建立一条连接。前面讲的所有协议都只是发送数据而已，大多数都不关心发送的数据是不是送到，UDP尤其明显，从编程的角度来说，UDP编程也要简单的多—-UDP都不用考虑数据分片。</p></blockquote><p>TCP连接的建立可以简单的称为<strong>三次握手</strong>，而连接的中止则可以叫做<strong>四次挥手</strong>。</p><ul><li>建立-三次握手<ul><li>客户端首先向服务器<strong>申请打</strong>开某一个端口(用SYN段等于1的TCP报文)</li><li>服务器端发回一个<strong>ACK报文</strong>通知客户端请求报文收到</li><li>客户端收到确认报文以后再次发出<strong>确认报文</strong>确认刚才服务器端发出的确认报文</li><li>ISN</li><li></li></ul></li><li>结束-4次挥手<ul><li>客户机给服务器一个FIN为1的TCP报文</li><li>服务器返回给客户端一个确认ACK报文</li><li>发送一个FIN报文</li><li>客户机回复ACK报文</li></ul></li></ul><h4 id="最大报文长度"><a href="#最大报文长度" class="headerlink" title="最大报文长度"></a>最大报文长度</h4><ul><li>在建立连接的时候，通信的双方要互相确认对方的最大报文长度(MSS)，以便通信。</li><li>SYN长度是MTU减去固定IP首部和TCP首部长度。</li></ul><h3 id="TCP交互数据流，成块数据流"><a href="#TCP交互数据流，成块数据流" class="headerlink" title="TCP交互数据流，成块数据流"></a>TCP交互数据流，成块数据流</h3><h4 id="交互数据流"><a href="#交互数据流" class="headerlink" title="交互数据流"></a>交互数据流</h4><blockquote><p>对于交互性要求比较高的应用，TCP给出两个策略来提高发送效率和减低网络负担：（1）捎带ACK。(2)Nagle算法</p></blockquote><ul><li>捎带ACK<ul><li>当<strong>主机收到远程主机</strong>的TCP数据报之后，通常不马上发送ACK数据报</li><li>等上一个短暂的时间，如果这段时间里面<strong>主机还有发送到远程主机</strong>的TCP数据报，那么就把这个ACK数据报“捎带”着发送出去，把本来两个TCP数据报整合成一个发送</li></ul></li><li>Nagle算法<ul><li>当主机A给主机B发送了一个TCP数据报并进入等待主机B的ACK数据报的状态时，TCP的输出缓冲区里面只能有一个TCP数据报</li><li>这个数据报不断地收集后来的数据，整合成一个大的数据报</li><li>等到B主机的ACK包一到，就把这些数据“一股脑”的发送出去</li></ul></li></ul><h4 id="TCP的成块数据流"><a href="#TCP的成块数据流" class="headerlink" title="TCP的成块数据流"></a>TCP的成块数据流</h4><blockquote><p>对于FTP这样对于数据吞吐量有较高要求的要求，将总是希望每次尽量多的发送数据到对方主机，就算是有点“延迟”也无所谓</p></blockquote><ul><li><p><strong>ACK的应答策略：</strong>发送端将会连续发送数据尽量填满接受方的缓冲区，而接受方对这些数据只要发送一个ACK报文来回应就可以了，这就是ACK的累积特性，这个特性大大减少了发送端和接收端的负担。</p></li><li><p><strong>滑动窗口</strong></p><ul><li>滑动窗口本质上是<strong>描述</strong>接受方的TCP数据报<strong>缓冲区大小</strong>的数据，发送方根据这个数据来计算自己最多能发送多长的数据。</li><li>如果发送方收到接受方的窗口大小为0的TCP数据报，那么发送方将停止发送数据，等到接受方发送窗口大小不为0的数据报的到来。</li><li>窗口协议<ul><li>窗口合拢：当窗口从左边向右边靠近的时候，这种现象发生在数据被发送和确认的时候。</li><li>窗口张开：当窗口的右边沿向右边移动的时候，这种现象发生在接受端处理了数据以后。</li><li>窗口收缩：当窗口的右边沿向左边移动的时候，这种现象不常发生。</li><li>TCP就是用这个窗口，慢慢的从数据的左边移动到右边，把处于窗口范围内的数据发送出去窗口的大小是可以通过socket来制定的，4096并不是最理想的窗口大小，而16384则可以使吞吐量大大的增加。</li></ul></li></ul></li><li><strong>数据拥塞</strong><ul><li>最大的问题就是当传输时出现了瓶颈，TCP发送方需要确认连接双方的线路的数据最大吞吐量是多少<ul><li>(倍增)</li><li>TCP发送方首先发送一个数据报，然后等待对方的回应</li><li>得到回应后就把这个窗口的大小加倍，然后连续发送两个数据报</li><li>等到对方回应以后，再把这个窗口加倍</li></ul></li></ul></li></ul><h3 id="TCP的超时与重传"><a href="#TCP的超时与重传" class="headerlink" title="TCP的超时与重传"></a>TCP的超时与重传</h3><blockquote><p>超时重传是TCP协议保证数据可靠性的另一个重要机制，其原理是在发送某一个数据以后就<strong>开启一个计时器</strong>，在一定时间内如果没有得到发送的数据报的ACK报文，那么就重新发送数据，直到发送成功为止。</p></blockquote><ul><li>超时<ul><li>定时长久会造成网络利用率不高</li><li>定时太短会造成多次重传，使得网络阻塞</li></ul></li><li>计时器的使用<ul><li>一个连接中，有且仅有一个测量定时器被使用。也就是说，如果TCP连续发出3组数据，只有一组数据会被测量。</li><li>ACK数据报不会被测量，原因很简单，没有ACK的ACK回应可以供结束定时器测量。</li></ul></li><li>重传<ul><li>拥塞窗口最初使用指数增长的速度来增加自身的窗口，直到发生超时重传，再进行一次微调。</li><li>如何进行微调，拥塞避免算法和慢启动门限就是为此而生。<ul><li>慢启动门限就是说，当拥塞窗口超过这个门限的时候，就使用拥塞避免算法，而在门限以内就采用慢启动算法</li></ul></li><li>快速重传和快速恢复算法<ul><li>一般来说，重传发生在超时之后，但是如果发送端接受到3个以上的重复ACK的情况下，就应该意识到，数据丢了，需要重新传递</li><li>这个机制是不需要等到重传定时器溢出的，所以叫做<strong>快速重传</strong>，而重新传递以后，因为走的不是<strong>慢启动</strong>而是<strong>拥塞避免算法</strong>，所以这又叫做<strong>快速恢复算法</strong></li></ul></li></ul></li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="UDP端口号"><a href="#UDP端口号" class="headerlink" title="UDP端口号"></a>UDP端口号</h3><ul><li>例如某一个UDP程序A在系统中注册了3000端口，那么，以后从外面传进来的目的端口号为3000的UDP包都会交给该程序。端口号理论上可以有2^16这么多。因为它的长度是16个bit</li><li>UDP检验和覆盖UDP协议头和数据, UDP和TCP都包含一个伪首部，这是为了计算检验和而摄制的。</li><li>目的是让UDP两次检查数据是否已经正确到达目的地。</li></ul><blockquote><p>UDP可以很长很长，可以有65535字节那么长。但是一般网络在传送的时候，一次一般传送不了那么长的协议（涉及到MTU的问题），就只好对数据分片</p></blockquote><h3 id="IP分片"><a href="#IP分片" class="headerlink" title="IP分片"></a>IP分片</h3><ul><li>IP在从上层接到数据以后，要根据IP地址来判断从那个接口发送数据（通过选路），并进行MTU的查询，如果数据大小超过MTU就进行数据分片。</li><li>在IP头里面<ul><li>16bit识别号唯一记录了一个IP包的ID,具有同一个ID的IP片将会被重新组装；</li><li>而13位片偏移则记录了某IP片相对整个包的位置；</li><li>而这两个表示中间的3bit标志则标示着该分片后面是否还有新的分片。</li></ul></li></ul><h3 id="UDP服务器设计"><a href="#UDP服务器设计" class="headerlink" title="UDP服务器设计"></a>UDP服务器设计</h3><ul><li>关于客户IP和地址：服务器必须有根据客户IP地址和端口号判断数据包是否合法的能力（这似乎要求每一个服务器都要具备）</li><li>关于目的地址：服务器必须要有过滤广播地址的能力。</li><li>关于数据输入：通常服务器系统的每一个端口号都会和一块输入缓冲区对应，进来的输入根据先来后到的原则等待服务器的处理，所以难免会出现缓冲区溢出的问题，这种情况下，UDP数据包可能会被丢弃，而应用服务器程序本身并不知道这个问题。</li><li>服务器应该限制本地IP地址，就是说它应该可以把自己绑定到某一个网络接口的某一个端口上。</li></ul><h2 id="广播和多播，IGMP协议"><a href="#广播和多播，IGMP协议" class="headerlink" title="广播和多播，IGMP协议"></a>广播和多播，IGMP协议</h2><h3 id="单播-unicast"><a href="#单播-unicast" class="headerlink" title="单播(unicast)"></a>单播(unicast)</h3><ul><li>单播是说，对特定的主机进行数据传送。</li><li>例如给某一个主机发送IP数据包。这时候，数据链路层给出的数据头里面是非常具体的目的地址，对于以太网来 说，就是网卡的MAC地址。</li></ul><h3 id="广播-unicast"><a href="#广播-unicast" class="headerlink" title="广播(unicast)"></a>广播(unicast)</h3><ul><li>广播是主机针对某一个网络上的所有主机发送数据包。</li><li>这个网络可能是网络，可能是子网，还可能是所有的子网。</li><li>一般说来ARP，或者路由协议RIP应该是以广播的形式播发的。</li></ul><h3 id="多播-multicast"><a href="#多播-multicast" class="headerlink" title="多播(multicast)"></a>多播(multicast)</h3><ul><li>多播就是给一组特定的主机（多播组）发送数据</li><li>多播的数据还是要通过数据链路层进行MAC地址绑定然后进行发送。所以一个以太网卡在绑定了一个多播IP地址之后，必 定还要绑定一个多播的MAC地址，才能使得其可以像单播那样工作。</li></ul><h3 id="IGMP"><a href="#IGMP" class="headerlink" title="IGMP"></a>IGMP</h3><ul><li>IGMP的作用在于，让其他所有需要知道自己处于哪个多播组的主机和路由器知道自己的状态。</li></ul><h2 id="DNS域名系统"><a href="#DNS域名系统" class="headerlink" title="DNS域名系统"></a>DNS域名系统</h2><ul><li>它负责把FQDN(就是以”.”分隔结尾的名字)翻译成一个IP。</li><li>DNS系统是一个分布式的数据库，当一个数据库发现自己并没有某查询所需要的数据的时候，它将把查询转发出去，而转发的目的地通常是根服务器，根服 务器从上至下层层转发查询，直到找到目标为止。</li></ul><h3 id="用UDP还是TCP"><a href="#用UDP还是TCP" class="headerlink" title="用UDP还是TCP"></a>用UDP还是TCP</h3><ul><li>而大多数的查询都是UDP查询的，一般需要TCP查询的有两种情况<ul><li>当查询数据多大以至于产生了数据截断(TC标志为1)，这时，需要利用TCP的分片能力来进行数据传输</li><li>当主（master）服务器和辅（slave）服务器之间通信，辅服务器要拿到主服务器的zone信息的时候。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="TCP/IP" scheme="http://www.jelech.cn/tags/TCP-IP/"/>
    
      <category term="协议" scheme="http://www.jelech.cn/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>HTTP学习笔记</title>
    <link href="http://www.jelech.cn/posts/864/"/>
    <id>http://www.jelech.cn/posts/864/</id>
    <published>2018-12-03T10:09:33.000Z</published>
    <updated>2018-12-09T12:41:05.740Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p><code>HyperText Transfer Protocol</code>基于TCP/IP通讯协议来传输数据</p><h3 id="客户端请求消息"><a href="#客户端请求消息" class="headerlink" title="客户端请求消息"></a>客户端请求消息</h3><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。</p><p><img src="../../assets/images/2012072810301161.png" alt="2012072810301161"></p><p>HTTP 协议中共定义了八种方法或者叫“动作”来表明对 Request-URI 指定的资源的不同操作方式，虽然 HTTP 的请求方式有 8 种，但是我们在实际应用中常用的也就是 <strong>get</strong> 和 <strong>post</strong>，其他请求方式也都可以通过这两种方式间接的来实现，具体介绍如下：</p><ul><li><code>OPTIONS</code>：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。</li><li><code>HEAD</code>：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</li><li><code>GET</code>：向特定的资源发出请求。</li><li><code>POST</code>：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</li><li><code>PUT</code>：向指定资源位置上传其最新内容。</li><li><code>DELETE</code>：请求服务器删除 Request-URI 所标识的资源。</li><li><code>TRACE</code>：回显服务器收到的请求，主要用于测试或诊断。</li><li><code>CONNECT</code>：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li></ul><p><img src="assets/get-http.png" alt="get-http"></p><h5 id="客户端请求GET实例"><a href="#客户端请求GET实例" class="headerlink" title="客户端请求GET实例"></a>客户端请求GET实例</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/562f25980001b1b106000338.jpg</span> HTTP/1.1</span><br><span class="line">Host    img.mukewang.com</span><br><span class="line">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</span><br><span class="line">Accept    image/webp,image/*,*/*;q=0.8</span><br><span class="line">Referer    http://www.imooc.com/</span><br><span class="line">Accept-Encoding    gzip, deflate, sdch</span><br><span class="line">Accept-Language    zh-CN,zh;q=0.8</span><br></pre></td></tr></table></figure><ul><li>请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本<ul><li>GET说明请求类型为GET</li><li>[/562f25980001b1b106000338.jpg]为要访问的资源</li><li>该行的最后一部分说明使用的是HTTP1.1版本。</li></ul></li><li>请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息<ul><li>从第二行起为请求头部，HOST将指出请求的目的地.</li><li>User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.</li><li>该信息由你的浏览器来定义,并且在每个请求中自动发送等等</li></ul></li><li>空行，请求头部后面的空行是必须的<ul><li>即使第四部分的请求数据为空，也必须有空行</li></ul></li><li>请求数据也叫主体，可以添加任意的其他数据</li></ul><h4 id="http响应头信息"><a href="#http响应头信息" class="headerlink" title="http响应头信息"></a>http响应头信息</h4><table><thead><tr><th>应答头</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>服务器支持哪些请求方法（如GET、POST等）。</td></tr><tr><td>Content-Encoding</td><td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。<code>因此，Servlet应该通过查看Accept-Encoding头</code>（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，<code>为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面</code>。</td></tr><tr><td>Content-Length</td><td>表示内容长度。<code>只有当浏览器使用持久HTTP连接时才需要这个数据</code>。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td>Content-Type</td><td>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但<code>通常需要显式地指定为text/html</code>。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td>Date</td><td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td>Expires</td><td>应该在什么时候认为文档已经过期，从而不再缓存它？</td></tr><tr><td>Last-Modified</td><td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td>Location</td><td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr><tr><td>Refresh</td><td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<code>http://host/path</code>“)让浏览器读取指定的页面。%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82) 注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=<code>http://host/path</code>“＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。 注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td></tr><tr><td>Server</td><td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td>Set-Cookie</td><td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td>WWW-Authenticate</td><td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。 注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td></tr></tbody></table><h3 id="服务端响应"><a href="#服务端响应" class="headerlink" title="服务端响应"></a>服务端响应</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文</p><p><img src="assets/httpmessage.jpg" alt="httpmessage"></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 27 Jul 2009 12:28:53 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class="line">ETag: &quot;34aa387-d-1568eb00&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 51</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><h3 id="HTTP状态码列表"><a href="#HTTP状态码列表" class="headerlink" title="HTTP状态码列表"></a>HTTP状态码列表</h3><ul><li>1xx：指示信息–表示请求已接收，继续处理</li><li>2xx：成功–表示请求已被成功接收、理解、接受</li><li>3xx：重定向–要完成请求必须进行更进一步的操作</li><li><p>4xx：客户端错误–请求有语法错误或请求无法实现</p></li><li><p>5xx：服务器端错误–服务器未能实现合法的请求</p></li></ul><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th><th></th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td><td></td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td><td></td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td><td></td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td><td></td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td><td></td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td><td></td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td><td></td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td><td></td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td><td></td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td><td></td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td><td></td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td><td></td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td><td></td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td><td></td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td><td></td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td><td></td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td><td></td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td><td></td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td><td></td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td><td></td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td><td></td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td><td></td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td><td></td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td><td></td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td><td></td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td><td></td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td><td></td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td><td></td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td><td></td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td><td></td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td><td></td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td><td></td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td><td></td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td><td></td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><blockquote><p>协议://域名/文件名#锚点?参数</p></blockquote><ol><li>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符</li><li>域名部分：该URL的域名部分为“<a href="http://www.jelech.cn”。一个URL中，也可以使用IP地址作为域名使用" target="_blank" rel="noopener">www.jelech.cn”。一个URL中，也可以使用IP地址作为域名使用</a></li><li>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</li><li>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</li><li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</li><li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</li><li>参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</li></ol><p>uri &amp; url</p><ul><li>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的</li><li>URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源</li></ul><h3 id="HTTP1-0与1-1"><a href="#HTTP1-0与1-1" class="headerlink" title="HTTP1.0与1.1"></a>HTTP1.0与1.1</h3><ol><li><strong>缓存处理</strong></li><li><strong>带宽优化及网络连接的使用</strong>，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li><li><strong>错误通知的管理</strong>，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</li><li><strong>Host头处理</strong>，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</li><li><strong>长连接</strong>，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</li></ol><h3 id="HTTP与HPPTS"><a href="#HTTP与HPPTS" class="headerlink" title="HTTP与HPPTS"></a>HTTP与HPPTS</h3><ul><li>HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。</li><li>HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。</li><li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。</li></ul><h3 id="SPDY"><a href="#SPDY" class="headerlink" title="SPDY"></a>SPDY</h3><blockquote><p>2012年google如一声惊雷提出了SPDY的方案，优化了HTTP1.X的请求延迟，解决了HTTP1.X的安全性</p></blockquote><ol><li><strong>降低延迟</strong>，针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。</li><li><strong>请求优先级</strong>（request prioritization）。多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。</li><li><strong>header压缩。</strong>前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。</li><li><strong>基于HTTPS的加密协议传输</strong>，大大提高了传输数据的可靠性。</li><li><strong>服务端推送</strong>（server push），采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。</li></ol><blockquote><p>SPDY位于HTTP之下，TCP和SSL之上，这样可以轻松兼容老版本的HTTP协议(将HTTP1.x的内容封装成一种新的frame格式)，同时可以使用已有的SSL功能。</p></blockquote><p><strong>HTTP2.0的多路复用和HTTP1.X中的长连接复用有什么区别？</strong></p><ul><li>HTTP/1.* 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接；</li><li>HTTP/1.1 Pipeling解决方式为，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</li><li>HTTP/2多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行；</li></ul><blockquote><p>服务端推送能把客户端所需要的资源伴随着index.html一起发送到客户端，省去了客户端重复请求的步骤。正因为没有发起请求，建立连接等操作，所以静态资源通过服务端推送的方式可以极大地提升速度。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP" scheme="http://www.jelech.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>python进阶学习笔记(好像还是有点基础)</title>
    <link href="http://www.jelech.cn/posts/60692/"/>
    <id>http://www.jelech.cn/posts/60692/</id>
    <published>2018-12-03T02:09:33.000Z</published>
    <updated>2018-12-03T15:17:22.177Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="Python的学习笔记-高级编程"><a href="#Python的学习笔记-高级编程" class="headerlink" title="Python的学习笔记-高级编程"></a>Python的学习笔记-高级编程</h1><p>有关linux-python3的搭建，可以参考我的另一篇博客。</p><blockquote><p>由于现在的python分为了2.7阵营和3+阵营，但是3+优化了许多的细节问题、修改了一些bug。所以这里就以3+的python为主啦</p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>每个文件的开头一般会写<code>#!/usr/bin/python3</code></p><p>安装部分直接跳过，可参考我的另一篇博客</p><h3 id="python语法"><a href="#python语法" class="headerlink" title="python语法"></a>python语法</h3><p>这部分也跳过，基础部分。</p><p>但是值得一提的是，语言真的是想通的。c++可通过适当 的修改，变为python：</p><ul><li><p>去掉c++中的所有大括号</p></li><li><p>去掉c++中变量声明时的类型符号(int,float,double…)</p></li><li><p>换行和缩进必须为标准</p></li><li><p>每个判断类型的关键字(如if、else、while、for、函数…)当行的后面都需要加冒号</p><p>  这时候基本上已经很接近python语法了</p><p>  可以一行进行多条语句，语句间用<code>;</code>号分割</p></li></ul><h3 id="数据类型（不需要特殊声明）"><a href="#数据类型（不需要特殊声明）" class="headerlink" title="数据类型（不需要特殊声明）"></a>数据类型（不需要特殊声明）</h3><ul><li><p>Number（数字）</p></li><li><p>String（字符串）</p></li><li><p>List（列表）</p></li><li><p>Tuple（元组）</p></li><li><p>Set（集合）</p></li><li><p>Dictionary（字典）</p><p>  其中：</p></li><li><p><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</p></li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>您也可以使用del语句删除一些对象引用。<code>del var1[,var2[,var3[....,varN]]]</code></p><h4 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h4><p><code>string * num</code>表示复制string字符串num次</p><p>Python 使用反斜杠()转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串<code>&gt;&gt;&gt; print(r&#39;Ru\noob&#39;)</code></p><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如<code>word[0] = &#39;m&#39;</code>会导致错误。</p><h3 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h3><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。其实，可以把字符串看作一种特殊的元组。</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line">print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line">print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line">print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><h3 id="Dictionary（字典）-对应c-中的map"><a href="#Dictionary（字典）-对应c-中的map" class="headerlink" title="Dictionary（字典）(对应c++中的map)"></a>Dictionary（字典）(对应c++中的map)</h3><p>字典是一种映射类型，字典用”{ }”标识，它是一个<strong>无序</strong>的<strong>键(key) : 值(value)</strong>对集合。</p><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将x转换为一个整数,进制</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p><h3 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h3><table><thead><tr><th>函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>choice(seq)</td><td style="text-align:left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td>randrange ([start,] stop [,step])</td><td style="text-align:left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1</td></tr><tr><td>random()</td><td style="text-align:left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td>seed([x])</td><td style="text-align:left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td>shuffle(lst)</td><td style="text-align:left">将序列的所有元素随机排序</td></tr><tr><td>uniform(x, y)</td><td style="text-align:left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="http://www.jelech.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>c++进阶学习笔记(好像就是基础)</title>
    <link href="http://www.jelech.cn/posts/26201/"/>
    <id>http://www.jelech.cn/posts/26201/</id>
    <published>2018-12-02T10:09:33.000Z</published>
    <updated>2018-12-03T15:10:58.110Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="cpp进阶学习"><a href="#cpp进阶学习" class="headerlink" title="cpp进阶学习"></a>cpp进阶学习</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="基类和派生类"><a href="#基类和派生类" class="headerlink" title="基类和派生类"></a>基类和派生类</h3><p>一个类可以派生自多个类，这意味着，它可以从多个基类继承数据和函数。定义一个派生类，我们使用一个类派生列表来指定基类。类派生列表以一个或多个基类命名，形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">derived</span>-<span class="title">class</span>:</span> access-specifier base-<span class="class"><span class="keyword">class</span></span></span><br></pre></td></tr></table></figure><p>其中，访问修饰符 access-specifier 是 <strong>public、protected</strong> 或 <strong>private</strong> 其中的一个，base-class 是之前定义过的某个类的名称。如果未使用访问修饰符 access-specifier，则默认为 private。</p><h3 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h3><p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p><p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p><ul><li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li><li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li><li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li></ul><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p><p>C++ 类可以从多个类继承成员，语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> &lt;派生类名&gt;:</span>&lt;继承方式<span class="number">1</span>&gt;&lt;基类名<span class="number">1</span>&gt;,&lt;继承方式<span class="number">2</span>&gt;&lt;基类名<span class="number">2</span>&gt;,…</span><br><span class="line">&#123;</span><br><span class="line">&lt;派生类类体&gt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="多继承-环状继承时"><a href="#多继承-环状继承时" class="headerlink" title="多继承(环状继承时)"></a>多继承(环状继承时)</h4><p>A-&gt;D, B-&gt;D, C-&gt;(A，B)，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class D&#123;......&#125;;</span><br><span class="line">class B: public D&#123;......&#125;;</span><br><span class="line">class A: public D&#123;......&#125;;</span><br><span class="line">class C: public B, public A&#123;.....&#125;;</span><br></pre></td></tr></table></figure><p>这个继承会使D创建两个对象,要解决上面问题就要用<code>虚拟继承格式</code></p><p>格式：class 类名: virtual 继承方式 父类名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class D&#123;......&#125;;</span><br><span class="line">class B: virtual public D&#123;......&#125;;</span><br><span class="line">class A: virtual public D&#123;......&#125;;</span><br><span class="line">class C: public B, public A&#123;.....&#125;;</span><br></pre></td></tr></table></figure><p>虚继承–（在创建对象的时候会创建一个虚表）在创建父类对象的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A:virtual public D</span><br><span class="line">B:virtual public D</span><br></pre></td></tr></table></figure><h2 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h2><h3 id="可重载运算符-不可重载运算符"><a href="#可重载运算符-不可重载运算符" class="headerlink" title="可重载运算符/不可重载运算符"></a>可重载运算符/不可重载运算符</h3><p>下面是可重载的运算符列表：</p><table><thead><tr><th>双目算术运算符</th><th>+ (加)，-(减)，*(乘)，/(除)，% (取模)</th></tr></thead><tbody><tr><td>关系运算符</td><td>==(等于)，!= (不等于)，&lt; (小于)，&gt; (大于&gt;，&lt;=(小于等于)，&gt;=(大于等于)</td></tr><tr><td>逻辑运算符</td><td>\</td><td>\</td><td>(逻辑或)，&amp;&amp;(逻辑与)，!(逻辑非)</td></tr><tr><td>单目运算符</td><td>+ (正)，-(负)，*(指针)，&amp;(取地址)</td></tr><tr><td>自增自减运算符</td><td>++(自增)，–(自减)</td></tr><tr><td>位运算符</td><td>\</td><td>(按位或)，&amp; (按位与)，~(按位取反)，^(按位异或),，&lt;&lt; (左移)，&gt;&gt;(右移)</td></tr><tr><td>赋值运算符</td><td>=, +=, -=, *=, /= , % = , &amp;=, \</td><td>=, ^=, &lt;&lt;=, &gt;&gt;=</td></tr><tr><td>空间申请与释放</td><td>new, delete, new[ ] , delete[]</td></tr><tr><td>其他运算符</td><td>()(函数调用)，-&gt;(成员访问)，,(逗号)，<a href="下标"></a></td></tr></tbody></table><p>下面是不可重载的运算符列表：</p><ul><li><code>.</code>：成员访问运算符</li><li><code>., -&gt;</code>：成员指针访问运算符</li><li><code>::</code>：域运算符</li><li><code>sizeof</code>：长度运算符</li><li><code>?:</code>：条件运算符</li><li><code>#</code>： 预处理符号</li></ul><h4 id="类成员访问运算符"><a href="#类成员访问运算符" class="headerlink" title="类成员访问运算符"></a>类成员访问运算符</h4><p>类成员访问运算符（ -&gt; ）可以被重载，但它较为麻烦。它被定义用于为一个类赋予”指针”行为。运算符 -&gt; 必须是一个成员函数。如果使用了 -&gt; 运算符，返回类型必须是指针或者是类的对象。</p><p>运算符 -&gt; 通常与指针引用运算符 * 结合使用，用于实现”智能指针”的功能。这些指针是行为与正常指针相似的对象，唯一不同的是，当您通过指针访问对象时，它们会执行其他的任务。比如，当指针销毁时，或者当指针指向另一个对象时，会自动删除对象。</p><p>间接引用运算符 -&gt; 可被定义为一个一元后缀运算符。也就是说，给出一个类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Ptr&#123;</span><br><span class="line">   //...</span><br><span class="line">   X * operator-&gt;();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类 <strong>Ptr</strong> 的对象可用于访问类 <strong>X</strong> 的成员，使用方式与指针的用法十分相似。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void f(Ptr p )</span><br><span class="line">&#123;</span><br><span class="line">   p-&gt;m = 10 ; // (p.operator-&gt;())-&gt;m = 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句 p-&gt;m 被解释为 (p.operator-&gt;())-&gt;m。</p><h3 id="值得注意的是"><a href="#值得注意的是" class="headerlink" title="值得注意的是:"></a>值得注意的是:</h3><ul><li>1、运算重载符不可以改变语法结构。</li><li>2、运算重载符不可以改变操作数的个数。</li><li>3、运算重载符不可以改变优先级。</li><li>4、运算重载符不可以改变结合性。</li></ul><h3 id="静态多态"><a href="#静态多态" class="headerlink" title="静态多态"></a>静态多态</h3><p>或<strong>静态链接</strong> - 函数调用在程序执行前就准备好了。有时候这也被称为<strong>早绑定</strong>，因为 area() 函数在程序编译期间就已经设置好了。</p><p>但现在，让我们对程序稍作修改，在 Shape 类中，area() 的声明前放置关键字 <strong>virtual</strong>。此时，编译器看的是指针的内容，而不是它的类型。因此，由于 tri 和 rec 类的对象的地址存储在 <em>shape</em> 中，所以会调用各自的 area() 函数。</p><p>正如您所看到的，每个子类都有一个函数 area() 的独立实现。这就是<strong>多态</strong>的一般使用方式。有了多态，您可以有多个不同的类，都带有同一个名称但具有不同实现的函数，函数的参数甚至可以是相同的。</p><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p><strong>虚函数</strong> 是在基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p><p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong>。</p><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>您可能想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基类中又<strong>不能对虚函数给出有意义的实现</strong>，这个时候就会用到纯虚函数。</p><p>我们可以把基类中的虚函数 area() 改写如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:       </span><br><span class="line"><span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:       </span><br><span class="line">Shape( <span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>) &#123;</span><br><span class="line">width = a;</span><br><span class="line">height = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pure virtual function</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数据抽象"><a href="#数据抽象" class="headerlink" title="数据抽象"></a>数据抽象</h2><p>数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。</p><p>例如，您的程序可以调用 <strong>sort()</strong> 函数，而不需要知道函数中排序数据所用到的算法。实际上，函数排序的底层实现会因库的版本不同而有所差异，只要接口不变，函数调用就可以照常工作。</p><h3 id="访问标签强制抽象"><a href="#访问标签强制抽象" class="headerlink" title="访问标签强制抽象"></a>访问标签强制抽象</h3><p>在 C++ 中，我们使用访问标签来定义类的抽象接口。一个类可以包含零个或多个访问标签：</p><ul><li>使用公共标签定义的成员都可以访问该程序的所有部分。一个类型的数据抽象视图是由它的公共成员来定义的。</li><li>使用私有标签定义的成员无法访问到使用类的代码。私有部分对使用类型的代码隐藏了实现细节。</li></ul><p>访问标签出现的频率没有限制。每个访问标签指定了紧随其后的成员定义的访问级别。指定的访问级别会一直有效，直到遇到下一个访问标签或者遇到类主体的关闭右括号为止。</p><blockquote><ul><li>类的内部受到保护，不会因无意的用户级错误导致对象状态受损。</li><li>类实现可能随着时间的推移而发生变化，以便应对不断变化的需求，或者应对那些要求不改变用户级代码的错误报告。</li></ul></blockquote><h3 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h3><ul><li><strong>程序语句（代码）：</strong>这是程序中执行动作的部分，它们被称为函数。</li><li><strong>程序数据：</strong>数据是程序的信息，会受到程序函数的影响。</li></ul><p><strong>数据封装</strong>是一种把数据和操作数据的函数捆绑在一起的机制，<strong>数据抽象</strong>是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制。</p><h3 id="接口（抽象类）"><a href="#接口（抽象类）" class="headerlink" title="接口（抽象类）"></a>接口（抽象类）</h3><p>如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。</p><p>抽象类不能被用于实例化对象，它只能作为<strong>接口</strong>使用。如果试图实例化一个抽象类的对象，会导致编译错误。因此，如果一个 ABC 的子类需要被实例化，则必须实现每个虚函数。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>C++ 异常是指在程序<code>运行时</code>发生的特殊情况，比如尝试除以零的操作。</p><ul><li><p><strong>throw:</strong> 当问题出现时，程序会抛出一个异常。这是通过使用 <strong>throw</strong> 关键字来完成的。可以使用 <strong>throw</strong> 语句在代码块中的任何地方抛出异常</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( b == <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"Division by zero condition!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>catch:</strong> 在您想要处理问题的地方，通过异常处理程序捕获异常。<strong>catch</strong> 关键字用于捕获异常。</p></li><li><p><strong>try:</strong> <strong>try</strong> 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。下面的代码会捕获一个类型为 <code>ExceptionName</code> 的异常。如果您想让 catch 块能够处理 try 块抛出的任何类型的异常，则必须在异常声明的括号内使用省略号 <code>...</code></p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 保护代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>( ExceptionName e )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 处理 ExceptionName 异常的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>C++ 提供了一系列标准的异常，定义在 <code>&lt;exception&gt;</code>中。</p><p><img src="assets/exceptions_in_cpp-1543739044716.png" alt="C++ 异常的层次结构"></p><h3 id="异常表"><a href="#异常表" class="headerlink" title="异常表"></a>异常表</h3><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td><strong>std::exception</strong></td><td>该异常是所有标准 C++ 异常的父类。</td></tr><tr><td>std::bad_alloc</td><td>该异常可以通过 <strong>new</strong> 抛出。</td></tr><tr><td>std::bad_cast</td><td>该异常可以通过 <strong>dynamic_cast</strong> 抛出。</td></tr><tr><td>std::bad_exception</td><td>这在处理 C++ 程序中无法预期的异常时非常有用。</td></tr><tr><td>std::bad_typeid</td><td>该异常可以通过 <strong>typeid</strong> 抛出。</td></tr><tr><td><strong>std::logic_error</strong></td><td>理论上可以通过读取代码来检测到的异常。</td></tr><tr><td>std::domain_error</td><td>当使用了一个无效的数学域时，会抛出该异常。</td></tr><tr><td>std::invalid_argument</td><td>当使用了无效的参数时，会抛出该异常。</td></tr><tr><td>std::length_error</td><td>当创建了太长的 std::string 时，会抛出该异常。</td></tr><tr><td>std::out_of_range</td><td>该异常可以通过方法抛出，例如 std::vector 和 std::bitset&lt;&gt;::operator<a href=""></a>。</td></tr><tr><td><strong>std::runtime_error</strong></td><td>理论上不可以通过读取代码来检测到的异常。</td></tr><tr><td>std::overflow_error</td><td>当发生数学上溢时，会抛出该异常。</td></tr><tr><td>std::range_error</td><td>当尝试存储超出范围的值时，会抛出该异常。</td></tr><tr><td>std::underflow_error</td><td>当发生数学下溢时，会抛出该异常。</td></tr></tbody></table><h3 id="C-动态内存"><a href="#C-动态内存" class="headerlink" title="C++ 动态内存"></a>C++ 动态内存</h3><ul><li><strong>栈：</strong>在函数内部声明的所有变量都将占用栈内存。</li><li><strong>堆：</strong>这是程序中未使用的内存，在程序运行时可用于动态分配内存。</li></ul><p>在 C++ 中，您可以使用特殊的运算符为给定类型的变量在运行时分配<code>堆</code>内的内存，这会返回所分配的空间地址。这种运算符即 <strong>new</strong> 运算符。</p><p>如果您不再需要动态分配的内存空间，可以使用 <strong>delete</strong> 运算符，删除之前由 new 运算符分配的内存。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">type</span>&gt; <span class="title">ret</span>-<span class="title">type</span> <span class="title">func</span>-<span class="title">name</span>(<span class="title">parameter</span> <span class="title">list</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="comment">// 函数的主体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// eg.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="keyword">const</span>&amp; <span class="title">Max</span> <span class="params">(T <span class="keyword">const</span>&amp; a, T <span class="keyword">const</span>&amp; b)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? b:a; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><p>正如我们定义函数模板一样，我们也可以定义类模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">type</span>&gt; <span class="title">class</span> <span class="title">class</span>-<span class="title">name</span> &#123;</span></span><br><span class="line"><span class="comment">// class thing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h2><p><code>#define</code> 预处理指令用于创建符号常量。该符号常量通常称为<strong>宏</strong>.</p><p>条件编译 <code>#ifndef</code> <code>#define</code> <code>#endif</code>。可以使用 #if 0 语句注释掉程序的一部分</p><p><code>#</code> 运算符会把 replacement-text 令牌转换为用引号引起来的字符串。</p><p><code>##</code> 运算符用于连接两个令牌。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MKSTR( x ) #x</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; MKSTR(HELLO C++) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//out-&gt; HELLO C++</span></span><br></pre></td></tr></table></figure><p>其他特殊编译符号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __LINE__ : "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __FILE__ : "</span> &lt;&lt; __FILE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __DATE__ : "</span> &lt;&lt; __DATE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __TIME__ : "</span> &lt;&lt; __TIME__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Value of __LINE__ : 6</span></span><br><span class="line"><span class="comment">Value of __FILE__ : test.cpp</span></span><br><span class="line"><span class="comment">Value of __DATE__ : Feb 28 2011</span></span><br><span class="line"><span class="comment">Value of __TIME__ : 18:52:48</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>一般情况下，两种类型的多任务处理：<strong>基于进程和基于线程</strong>。</p><ul><li>基于进程的多任务处理是程序的并发执行。</li><li>基于线程的多任务处理是同一程序的片段的并发执行。</li></ul><p>假设在<code>linux</code>系统下</p><h3 id="创建一个-POSIX-线程："><a href="#创建一个-POSIX-线程：" class="headerlink" title="创建一个 POSIX 线程："></a>创建一个 POSIX 线程：</h3><p><code>#include &lt;pthread.h&gt;</code></p><p><code>pthread_create (thread, attr, start_routine, arg)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>thread</td><td>指向线程标识符指针。</td></tr><tr><td>attr</td><td>一个不透明的属性对象，可以被用来设置线程属性。您可以指定线程属性对象，也可以使用默认值 NULL。</td></tr><tr><td>start_routine</td><td>线程运行函数起始地址，一旦线程被创建就会执行。</td></tr><tr><td>arg</td><td>运行函数的参数。它必须通过把引用作为指针强制转换为 void 类型进行传递。如果没有传递参数，则使用 NULL。</td></tr></tbody></table><p>终止：<code>pthread_exit (status)</code></p><h3 id="连接和分离线程"><a href="#连接和分离线程" class="headerlink" title="连接和分离线程"></a>连接和分离线程</h3><p>我们可以使用以下两个函数来连接或分离线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pthread_join (threadid, status) </span><br><span class="line">pthread_detach (threadid)</span><br></pre></td></tr></table></figure><p><code>pthread_join()</code> 子程序阻碍调用程序，直到指定的<strong>threadid</strong>线程终止为止。当创建一个线程时，它的某个属性会定义它是否是可连接的（joinable）或可分离的（detached）。只有创建时定义为可连接的线程才可以被连接。如果线程创建时被定义为可分离的，则它永远也不能被连接。</p><h2 id="什么是-CGI？"><a href="#什么是-CGI？" class="headerlink" title="什么是 CGI？"></a>什么是 CGI？</h2><ul><li>公共网关接口（CGI），是一套标准，定义了信息是如何在 Web 服务器和客户端脚本之间进行交换的。</li><li>CGI 规范目前是由 NCSA 维护的，NCSA 定义 CGI 如下：</li><li>公共网关接口（CGI），是一种用于外部网关程序与信息服务器（如 HTTP 服务器）对接的接口标准。</li><li>目前的版本是 CGI/1.1，CGI/1.2 版本正在推进中。</li></ul><p>比如我们点击一个超链接，浏览一个特定的网页或 URL时</p><ul><li>您的浏览器联系上 HTTP Web 服务器，并请求 URL，即文件名。</li><li>Web 服务器将解析 URL，并查找文件名。如果找到请求的文件，Web 服务器会把文件发送回浏览器，否则发送一条错误消息，表明您请求了一个错误的文件。</li><li>Web 浏览器从 Web 服务器获取响应，并根据接收到的响应来显示文件或错误消息。</li></ul><p>以这种方式搭建起来的 HTTP 服务器，不管何时请求目录中的某个文件，HTTP 服务器发送回来的不是该文件，而是以程序形式执行，并把执行产生的输出发送回浏览器显示出来。(比如php的响应<code>echo</code>)</p><h3 id="HTTP-头信息"><a href="#HTTP-头信息" class="headerlink" title="HTTP 头信息"></a>HTTP 头信息</h3><table><thead><tr><th>头信息</th><th>描述</th></tr></thead><tbody><tr><td>Content-type:</td><td>MIME 字符串，定义返回的文件格式。例如 Content-type:text/html。</td></tr><tr><td>Expires: Date</td><td>信息变成无效的日期。浏览器使用它来判断一个页面何时需要刷新。一个有效的日期字符串的格式应为 01 Jan 1998 12:00:00 GMT。</td></tr><tr><td>Location: URL</td><td>这个 URL 是指应该返回的 URL，而不是请求的 URL。你可以使用它来重定向一个请求到任意的文件。</td></tr><tr><td>Last-modified: Date</td><td>资源的最后修改日期。</td></tr><tr><td>Content-length: N</td><td>要返回的数据的长度，以字节为单位。浏览器使用这个值来表示一个文件的预计下载时间。</td></tr><tr><td>Set-Cookie: String</td><td>通过 <em>string</em> 设置 cookie。</td></tr></tbody></table><h3 id="CGI-环境变量"><a href="#CGI-环境变量" class="headerlink" title="CGI 环境变量"></a>CGI 环境变量</h3><table><thead><tr><th>变量名</th><th>描述</th></tr></thead><tbody><tr><td>CONTENT_TYPE</td><td>内容的数据类型。当客户端向服务器发送附加内容时使用。例如，文件上传等功能。</td></tr><tr><td>CONTENT_LENGTH</td><td>查询的信息长度。只对 POST 请求可用。</td></tr><tr><td>HTTP_COOKIE</td><td>以键 &amp; 值对的形式返回设置的 cookies。</td></tr><tr><td>HTTP_USER_AGENT</td><td>用户代理请求标头字段，递交用户发起请求的有关信息，包含了浏览器的名称、版本和其他平台性的附加信息。</td></tr><tr><td>PATH_INFO</td><td>CGI 脚本的路径。</td></tr><tr><td>QUERY_STRING</td><td>通过 GET 方法发送请求时的 URL 编码信息，包含 URL 中问号后面的参数。</td></tr><tr><td>REMOTE_ADDR</td><td>发出请求的远程主机的 IP 地址。这在日志记录和认证时是非常有用的。</td></tr><tr><td>REMOTE_HOST</td><td>发出请求的主机的完全限定名称。如果此信息不可用，则可以用 REMOTE_ADDR 来获取 IP 地址。</td></tr><tr><td>REQUEST_METHOD</td><td>用于发出请求的方法。最常见的方法是 GET 和 POST。</td></tr><tr><td>SCRIPT_FILENAME</td><td>CGI 脚本的完整路径。</td></tr><tr><td>SCRIPT_NAME</td><td>CGI 脚本的名称。</td></tr><tr><td>SERVER_NAME</td><td>服务器的主机名或 IP 地址。</td></tr><tr><td>SERVER_SOFTWARE</td><td>服务器上运行的软件的名称和版本。</td></tr></tbody></table><h3 id="GET-POST"><a href="#GET-POST" class="headerlink" title="GET/POST"></a>GET/POST</h3><p>GET 方法发送已编码的用户信息追加到页面请求中。页面和已编码信息通过 ? 字符分隔开，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.test.com/cgi-bin/cpp.cgi?key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure><p>GET 方法有大小限制，在一个请求字符串中最多可以传 1024 个字符。敏感信息不要使用 GET 方法。</p><h3 id="在-CGI-中使用-Cookies"><a href="#在-CGI-中使用-Cookies" class="headerlink" title="在 CGI 中使用 Cookies"></a>在 CGI 中使用 Cookies</h3><p>使用 cookies 是记忆和跟踪有关用户喜好、购买、佣金以及其他为追求更好的游客体验或网站统计所需信息的最有效的方法。</p><h4 id="它是如何工作的"><a href="#它是如何工作的" class="headerlink" title="它是如何工作的"></a>它是如何工作的</h4><p>服务器以 cookie 的形式向访客的浏览器发送一些数据。如果浏览器接受了 cookie，则 cookie 会以纯文本记录的形式存储在访客的硬盘上。现在，当访客访问网站上的另一个页面时，会检索 cookie。一旦找到 cookie，服务器就知道存储了什么。</p><ul><li><strong>Expires :</strong> cookie 的过期日期。如果此字段留空，cookie 会在访客退出浏览器时过期。</li><li><strong>Domain :</strong> 网站的域名。</li><li><strong>Path :</strong> 设置 cookie 的目录或网页的路径。如果您想从任意的目录或网页检索 cookie，此字段可以留空。</li><li><strong>Secure :</strong> 如果此字段包含单词 “secure”，那么 cookie 只能通过安全服务器进行检索。如果此字段留空，则不存在该限制。</li><li><strong>Name=Value :</strong> cookie 以键值对的形式被设置和获取。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="c++" scheme="http://www.jelech.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>static的那些事</title>
    <link href="http://www.jelech.cn/posts/52795/"/>
    <id>http://www.jelech.cn/posts/52795/</id>
    <published>2018-12-02T10:09:33.000Z</published>
    <updated>2018-12-05T14:41:12.116Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h3 id="1-先来介绍它的第一条也是最重要的一条：隐藏。（static函数，static变量均可）"><a href="#1-先来介绍它的第一条也是最重要的一条：隐藏。（static函数，static变量均可）" class="headerlink" title="1.先来介绍它的第一条也是最重要的一条：隐藏。（static函数，static变量均可）"></a>1.先来介绍它的<strong>第一条也是最重要的一条：隐藏</strong>。（static函数，static变量均可）</h3><p>当同时编译多个文件时，所有未加static前缀的全局变量和函数都具有全局可见性。<br>举例来说明。同时编译两个源文件，一个是a.c，另一个是main.c。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//a.c</span><br><span class="line">char a = &apos;A&apos;; // global variable</span><br><span class="line">void msg()</span><br><span class="line">&#123;</span><br><span class="line">     printf(&quot;Hello\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//main.c</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">     extern char a; // extern variable must be declared before use</span><br><span class="line">     printf(&quot;%c &quot;, a);</span><br><span class="line">     (void)msg();</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果是：</p><p>A Hello</p><p>为什么在a.c中定义的全局变量a和函数msg能在main.c中使用？前面说过，所有未加static前缀的全局变量和函数都具有全局可见性，其它的源文件也能访问。此例中，a是全局变量，msg是函数，并且都没有加static前缀，因此对于另外的源文件main.c是可见的。<br>如果加了static，就会对其它源文件隐藏。例如在a和msg的定义前加上static，main.c就看不到它们了。利用这一特性可以在不同的文件中定义同名函数和同名变量，而不必担心命名冲突。static可以用作函数和变量的前缀，对于函数来讲，static的作用仅限于隐藏.</p><h3 id="2-static的第二个作用是保持变量内容的持久。（static变量中的记忆功能和全局生存期）"><a href="#2-static的第二个作用是保持变量内容的持久。（static变量中的记忆功能和全局生存期）" class="headerlink" title="2.static的第二个作用是保持变量内容的持久。（static变量中的记忆功能和全局生存期）"></a><strong>2.static的第二个作用是保持变量内容的持久</strong>。（static变量中的记忆功能和全局生存期）</h3><p>存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。共有两种变量存储在静态存储区：全局变量和static变量，只不过和全局变量比起来，static可以控制变量的可见范围，说到底static还是用来隐藏的。虽然这种用法不常见</p><p>PS：如果作为static局部变量在函数内定义，它的生存期为整个源程序，但是其作用域仍与自动变量相同，只能在定义该变量的函数内使用该变量。退出该函数后， 尽管该变量还继续存在，但不能使用它。</p><p>程序举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">＃include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int fun()&#123;</span><br><span class="line">    static int count = 10; //在第一次进入这个函数的时候，变量a被初始化为10！并接着自减1，以后每次进入该函数，a</span><br><span class="line">    return count--; //就不会被再次初始化了，仅进行自减1的操作；在static发明前，要达到同样的功能，则只能使用全局变量：    </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int count = 1;</span><br><span class="line"> </span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">     printf(&quot;global\t\tlocal static\n&quot;);</span><br><span class="line">     for(; count &lt;= 10; ++count)</span><br><span class="line">               printf(&quot;%d\t\t%d\n&quot;, count, fun());</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果是：</p><p>global  local static<br>1 10<br>2 9<br>3 8<br>4 7<br>5 6<br>6 5<br>7 4<br>8 3<br>9 2<br>10 1</p><p>基于以上两点可以得出一个结论：<code>把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量后是改变了它的作用域， 限制了它的使用范围。因此static 这个说明符在不同的地方所起的作用是不同的。</code></p><h3 id="3-static的第三个作用是默认初始化为0（static变量）"><a href="#3-static的第三个作用是默认初始化为0（static变量）" class="headerlink" title="3.static的第三个作用是默认初始化为0（static变量）"></a><strong>3.static的第三个作用是默认初始化为0（static变量）</strong></h3><p>其实全局变量也具备这一属性，因为全局变量也存储在静态数据区。在静态数据区，内存中所有的字节默认值都是0x00，某些时候这一特点可以减少程序员的工作量。比如初始化一个稀疏矩阵，我们可以一个一个地把所有元素都置0，然后把不是0的几个元素赋值。如果定义成静态的，就省去了一开始置0的操作。再比如要把一个字符数组当字符串来用，但又觉得每次在字符数组末尾加‘\0’;太麻烦。如果把字符串定义成静态的，就省去了这个麻烦，因为那里本来就是‘\0’;不妨做个小实验验证一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">＃include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int a;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">     int i;</span><br><span class="line">     static char str[10];</span><br><span class="line">     printf(&quot;integer: %d; string: (begin)%s(end)&quot;, a, str);</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果是：</p><p>integer: 0; string: (begin) (end) </p><p>最后对static的三条作用做一句话总结。首先static的最主要功能是隐藏，其次因为static变量存放在静态存储区，所以它具备持久性和默认值0. </p><h3 id="4-static的第四个作用：C-中的类成员声明static（有些地方与以上作用重叠）"><a href="#4-static的第四个作用：C-中的类成员声明static（有些地方与以上作用重叠）" class="headerlink" title="4.static的第四个作用：C++中的类成员声明static（有些地方与以上作用重叠）"></a><strong>4.static的第四个作用：C++中的类成员声明static</strong>（有些地方与以上作用重叠）</h3><p> 在类中声明static变量或者函数时，初始化时使用作用域运算符来标明它所属类，因此，静态数据成员是类的成员，而不是对象的成员，这样就出现以下作用：</p><p>(1)类的静态成员函数是属于整个类而非类的对象，所以它没有this指针，这就导致 了它仅能访问类的静态数据和静态成员函数。      </p><p>(2)不能将静态成员函数定义为虚函数。      </p><p>(3)由于静态成员声明于类中，操作于其外，所以对其取地址操作，就多少有些特殊 ，变量地址是指向其数据类型的指针 ，函数地址类型是一个“nonmember函数指针”。</p><p>(4)由于静态成员函数没有this指针，所以就差不多等同于nonmember函数，结果就 产生了一个意想不到的好处：成为一个callback函数，使得我们得以将C++和C-based X W indow系统结合，同时也成功的应用于线程函数身上。 （这条没遇见过）  </p><p>(5)static并没有增加程序的时空开销，相反她还缩短了子类对父类静态成员的访问 时间，节省了子类的内存空间。      </p><p>(6)静态数据成员在&lt;定义或说明&gt;时前面加关键字static。      </p><p>(7)静态数据成员是静态存储的，所以必须对它进行初始化。 （程序员手动初始化，否则编译时一般不会报错，但是在Link时会报错误） </p><p>(8)静态成员初始化与一般数据成员初始化不同:</p><p>初始化在类体外进行，而前面不加static，以免与一般静态变量或对象相混淆；<br>初始化时不加该成员的访问权限控制符private，public等；<br>初始化时使用作用域运算符来标明它所属类；<br>​           所以我们得出静态数据成员初始化的格式：<br>&lt;数据类型&gt;&lt;类名&gt;::&lt;静态数据成员名&gt;=&lt;值&gt;</p><p>(9)为了防止父类的影响，可以在子类定义一个与父类相同的静态变量，以屏蔽父类的影响。这里有一点需要注意：我们说静态成员为父类和子类共享，但我们有重复定义了静态成员，这会不会引起错误呢？不会，我们的编译器采用了一种绝妙的手法：name-mangling 用以生成唯一的标志。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="c++" scheme="http://www.jelech.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记</title>
    <link href="http://www.jelech.cn/posts/51482/"/>
    <id>http://www.jelech.cn/posts/51482/</id>
    <published>2018-11-30T02:09:33.000Z</published>
    <updated>2018-12-09T13:34:54.360Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="mysql设计"><a href="#mysql设计" class="headerlink" title="mysql设计"></a>mysql设计</h1><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>键：一个识别每一个特定用户的字段。</li><li>外键：一个表引用了其他表中的主键，那么这个字段就是外键。</li><li>模式：数据库整套表格的完整设计蓝图。</li><li>关系：两个表格数据之间的关系，可以通过外键表达。</li></ul><h2 id="设计时需要注意"><a href="#设计时需要注意" class="headerlink" title="设计时需要注意"></a>设计时需要注意</h2><ul><li>每个对象应该有自己的表。</li><li>避免保存冗余的数据，比如相同的数据保存在了多个表当中（当然外键不算）。</li><li>考虑耦合性，减少空属性的出现。如果出现了，尝试拆成多个表。</li><li>使用原子列值，每一行的每个属性只储存一个数据。</li><li>键要选择的有意义。</li><li>考虑需要询问数据库时的问题，比如多值、多层查询时。</li><li>注意表格的大体分类：描述世界的简单表、描述关系的关联表。</li></ul><h1 id="mysql数据库的创建"><a href="#mysql数据库的创建" class="headerlink" title="mysql数据库的创建"></a>mysql数据库的创建</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#----临时笔记处----#</span><br><span class="line">#修改密码，注意mysql5.7中user表中密码改为了authentication_string</span><br><span class="line">    update mysql.user set authentication_string1=password(&apos;123456&apos;) where User=&quot;jelech&quot; and Host=&quot;localhost&quot;;</span><br><span class="line"></span><br><span class="line">    # 密码进入数据库，创建新数据库，授权新用户，刷新改动，设置根密码(初始使用一次就行)</span><br><span class="line">    mysql -u root -p</span><br><span class="line">  create database blog_db charset=utf8;</span><br><span class="line">    grant all on db_music.* to jelech@localhost identified by &quot;123456&quot;;</span><br><span class="line">    flush privileges;</span><br><span class="line">    set password for root@localhost=password(&quot;abccba&quot;);</span><br><span class="line"></span><br><span class="line">    # 修改表格格式信息</span><br><span class="line">    ALTER TABLE userInfo MODIFY password VARCHAR(100) NOT NULL;</span><br><span class="line"></span><br><span class="line">    # 删除表中所有内容，以及索引 用这种方法相当于重载了表格内容，全新的！</span><br><span class="line">    truncate table wp_comments;</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><code>msyql -h hostname -u username -p</code></p><p>eg.<code>msyql -u root -p</code></p><ul><li>-h 指定希望连接的主机，默认为localhost</li><li>-u 指定用户名称，默认为登录操作系统的用户名</li><li>-p 使用一个密码来连接他</li></ul><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p><code>create database dbname;</code></p><p>eg.<code>create database db_music;</code></p><h2 id="mysql权限问题"><a href="#mysql权限问题" class="headerlink" title="mysql权限问题"></a>mysql权限问题</h2><ul><li>最少权限原则，一个用户不应该拥有超过他的功能的多余权限。</li><li><code>grant</code> <code>revoke</code> 授予和收回权限</li></ul><h2 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grant privileges # 用逗号分开的权限：all, select, create...</span><br><span class="line">on item_name # 可控制的部分:*.*, item_name.*, item_name.th_table</span><br><span class="line">to user_name # 授予一个用户：可附加通过密码 identified by &apos;password&apos;</span><br><span class="line">[require ssl_options] # 决定用户连接时，是否应该通过加密套接字连接</span><br><span class="line">[with grant potion] # 决定用户是否可以授权给别自己拥有的权限。</span><br></pre></td></tr></table></figure><h3 id="with语句也可以"><a href="#with语句也可以" class="headerlink" title="with语句也可以"></a>with语句也可以</h3><p>决定这个用户每小时可以访问的数量</p><p><code>MAX_QUERIES_PER_HOUR n</code> <code>MAX_UPDATES_PER_HOUR n</code> <code>MAX_CONNECTIONS_PER_HOUR n</code></p><p>这个在共享系统上限制单个用户的负载非常有用。</p><blockquote><p>mysql中分为3个基本权限：适用一般用户权限、适用赋予管理员权限、几个特定权限。<br>mysql中存放了所有用户名、密码的地方，这里的访问权限不应随意授予。</p></blockquote><h3 id="用户的权限"><a href="#用户的权限" class="headerlink" title="用户的权限"></a>用户的权限</h3><ul><li>select：从表中选择行</li><li>insert：插入新行</li><li>udpate：修改表行中值</li><li>delete：删除表中的行</li><li>index：创建和拖动特定表的索引</li><li>alter：修改表的结构，比如添加列、重名列|表、修改列的数据类型…</li><li>create：新建数据库|表，如果grant授予的特定的数据库，则他们只能创建该数据库|表，也就是他们需要先删除</li><li>drop：删除数据库和表</li></ul><h3 id="管理员的权限"><a href="#管理员的权限" class="headerlink" title="管理员的权限"></a>管理员的权限</h3><ul><li>create temporary tables：允许使用temporary关键字</li><li>file：允许将数据从文件中读入表、输出到文件</li><li>lock table：允许使用lock table语句</li><li>process：允许管理员查看属于所有用户的服务器进程</li><li>reload：允许管理员重新载入授权表、清空授权、主机、日志和表</li><li>replication client：允许复制主机、使用show status</li><li>replication slave：允许复制从服务器连接到主服务器</li><li>show databases：允许查看所有数据库列表，没有这个权限，用户就只能看到他们自己的</li><li>shutdown：允许关闭mysql服务器</li><li>super：允许关闭属于任何用户的线程</li></ul><h3 id="特别权限"><a href="#特别权限" class="headerlink" title="特别权限"></a>特别权限</h3><ul><li>all：授予以上所有权限</li><li>usage：不授予权限，只允许用户登录，但不能进行任何操作。这样做的目的是为了以后授予权限</li></ul><h2 id="收回权限"><a href="#收回权限" class="headerlink" title="收回权限"></a>收回权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revoke privileges # 收回某种权限</span><br><span class="line">on item # 从某个数据库或者表中</span><br><span class="line">from username #从一个用户中</span><br></pre></td></tr></table></figure><p>其余部分和授权相似。</p><h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><p><code>use db_name</code></p><p>在登录后应切换到需要使用的数据库</p><h2 id="使用数据库表"><a href="#使用数据库表" class="headerlink" title="使用数据库表"></a>使用数据库表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table table_name(</span><br><span class="line"># 字段属性</span><br><span class="line">  table_id int auto_increment not null primary key,</span><br><span class="line">  table_name varchar(255) not null,</span><br><span class="line">  table_float float(6,2),</span><br><span class="line">  #...unsigned意思是他只能是0或者一个正数</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>text：该类型用于表示更长的数据，比如文章</li><li>zerofill：该属性可以让数字类型添加前导0。</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>整数数据类型</p><ul><li>tinyint(1)：非常小的整数</li><li>bit、bool：同tinyint</li><li>smallint(2)：小整形数</li><li>mediumint(3)：中整形数</li><li>int(4)：一般整数</li><li>integer：同int</li><li>bigint(8)：大整形数</li></ul></li><li><p>浮点数据类型</p><ul><li>float(精度)：可用于指定单精度和双精度的浮点数</li><li>float[(M,D)]：指定显示宽度和小数位数===float(4)</li><li>double[(M,D)]：指定了显示宽度和小数位数===float(8)</li><li>duoble：同上</li><li>precision[(M,D)]</li><li>real[(M,D)]：同上</li><li>decimal[(M [,D])]：以char储存的浮点数</li><li>numeric\dec\fixed：同上</li></ul></li><li>日期和时间类型<em>值得注意的是如果不手动设置，特定行中的timestamp将被修改为最近修改改行的日期和时间，这对事物记录很有帮助</em><ul><li>date：一个日期，以YYYY-MM-DD格式</li><li>time：一个时间，以HH:MM:SS格式</li><li>datetime：日期和时间，以YYYY-MM-DD HH:MM:SS格式</li><li>timestamp[(M)]：时间标签，在处理报告中有意义</li><li>year[(2/4)]：可指定显示格式地显示年份</li></ul></li><li>字符串类型<ul><li>char：小段文本，varchar为可变长度的类型，指定的是每种类型的宽度</li><li>text、blob：大小可变，分别适用于长文本、二进制数据(<em>二进制是万金油</em>)。text区分大小写，blob不区分大小写</li><li>set、enum：set最大可以有64个元素，列值必须来自其中。enum枚举最大65535个元素，同时只能有一个为null或者为枚举中的值</li></ul></li></ol><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p><code>show tables</code>：显示当前用户的数据库下的所有表。</p><p><code>show databases</code>：显示当前用户的所有数据库。</p><p><code>descibe table_name</code>：也作<em>desc</em>，显示表格的结构。</p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><blockquote><p>索引有利于提高数据库的查询速度</p></blockquote><p><code>create index index_name on table_name (index_col_name ...)</code></p><h1 id="使用mysql数据库"><a href="#使用mysql数据库" class="headerlink" title="使用mysql数据库"></a>使用mysql数据库</h1><hr><h1 id="MySql优化"><a href="#MySql优化" class="headerlink" title="MySql优化"></a>MySql优化</h1><ul><li><p>三大方向</p><ul><li>优化MySQL所在服务器内核</li><li>对MySQL配置参数进行优化（my.cnf）此优化需要进行压力测试来进行参数调整。</li><li>对SQL语句以及表优化。</li></ul></li></ul><h2 id="MySQL参数优化"><a href="#MySQL参数优化" class="headerlink" title="MySQL参数优化"></a>MySQL参数优化</h2><ul><li><p>MySQL 默认的最大连接数为 100，可以在 mysql 客户端使用以下命令查看</p><p><code>mysql&gt; show variables like &#39;max_connections&#39;;</code></p></li><li><p>查看当前访问Mysql的线程</p><p><code>mysql&gt; show processlist;</code></p></li><li><p>设置最大连接数</p><p><code>mysql&gt;set globle max_connections = 5000;</code></p><p>最大可设置16384,超过没用</p></li><li><p>查看当前被使用的connections</p><p>  <code>mysql&gt;show globle status like &#39;max_user_connections&#39;</code></p></li></ul><h2 id="16经验"><a href="#16经验" class="headerlink" title="16经验"></a>16经验</h2><ol><li><p>为查询缓存优化查询</p><ul><li><p>大多数的MySQL服务器都开启了查询缓存。</p><p>  <code>SELECT username FROM user WHERE    signup_date &gt;= CURDATE()</code></p><p>  CURDATE(), NOW() 和 RAND() 或是其它的诸如此类的SQL函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。所以，你所需要的就是用一个变量来代替MySQL的函数，从而开启缓存。</p></li></ul></li><li><p>EXPLAIN 我们的SELECT查询(可以查看执行的行数)</p><ul><li>使用EXPLAIN关键字可以使我们知道MySQL是如何处理SQL语句的，这样可以帮助我们分析我们的查询语句或是表结构的性能瓶颈；EXPLAIN的查询结果还会告诉我们索引主键是如何被利用的，数据表是如何被被搜索或排序的….等等。语法格式是：<code>EXPLAIN +SELECT语句</code></li></ul></li><li><p>当只要一行数据时使用LIMIT 1</p><ul><li>加上LIMIT 1可以增加性能。MySQL数据库引擎会在查找到一条数据后停止搜索，而不是继续往后查询下一条符合条件的数据记录。</li></ul></li><li><p>为搜索字段建立索引</p><ul><li><p>索引不一定就是给主键或者是唯一的字段，如果在表中，有某个字段经常用来做搜索，需要将其建立索引。</p></li><li><p>在执行CREATE TABLE语句时可以创建索引，也可以单独用CREATE INDEX或ALTER TABLE来为表增加索引。</p><ul><li><code>ALTER TABLE</code> 用来创建普通索引、唯一索引、主键索引和全文索引<ul><li><code>ALTER TABLE table_name ADD INDEX index_name (column_list);</code></li><li><code>ALTER TABLE table_name ADD UNIQUE (column_list);</code></li><li><code>ALTER TABLE table_name ADD PRIMARY KEY (column_list);</code></li><li><code>ALTER TABLE table_name ADD FULLTEXT (column_list);</code></li></ul></li><li><code>CREATE INDEX</code>可对表增加普通索引或UNIQUE索引以及全文索引，但是不可以对表增加主键索引<ul><li><code>CREATE INDEX index_name ON table_name (column_list);</code></li><li><code>CREATE UNIQUE index_name ON table_name (column_list);</code></li><li><code>CREATE FULLTEXT index_name ON table_name (column_list);</code></li></ul></li></ul></li><li><p>索引类型</p><ul><li>普通索引INDEX：适用于name、email等一般属性</li><li>唯一索引UNIQUE：与普通索引类似，不同的是唯一索引要求索引字段值在表中是<strong>唯一</strong>的，这一点和主键索引类似，但是不同的是，唯一索引<strong>允许有空值</strong>。唯一索引一般适用于身份证号码、用户账号等不允许有重复的属性字段上。</li><li>主键索引：其实就是主键，一般在建表时就指定了，不需要额外添加。</li><li>全文检索FULLTEXT：只适用于VARCHAR和Text类型的字段。<em>全文索引和普通索引是有很大区别的，如果建立的是普通索引，一般会使用like进行模糊查询</em><ul><li>MySql自带的全文索引只能对英文进行全文检索，目前无法对中文进行全文检索。</li><li>如果需要对包含中文在内的文本数据进行全文检索，我们需要采用Sphinx（斯芬克斯）/Coreseek技术来处理中文</li><li>MySql自带的全文索引时，如果查询字符串的长度过短将无法得到期望的搜索结果</li><li>MySql全文索引所能找到的词默认最小长度为4个字符</li><li>另外，如果查询的字符串包含停止词，那么该停止词将会被忽略</li></ul></li></ul></li><li><p>组合索引</p><ul><li>组合索引又称多列索引，就是建立索引时指定多个字段属性。有点类似于字典目录，比如查询 ‘guo’ 这个拼音的字时，首先查找g字母，然后在g的检索范围内查询第二个字母为u的列表，最后在u的范围内查找最后一个字母为o的字</li><li><code>where a=3 and c=5</code>  这种情况下b就是断点，a发挥了效果，c没有效果</li></ul></li><li><p>查看索引</p><ul><li><code>mysql&gt; show index from tblname;</code></li><li><code>mysql&gt; show keys from tblname;</code></li></ul></li><li><p>删除</p><ul><li><code>DORP INDEX IndexName ON tab_name；</code></li></ul></li><li><blockquote><p>对于普通索引而言 在使用like进行通配符模糊查询时,如果首尾之间都使用了通配符，索引时无效的。</p></blockquote></li></ul></li><li><p>在Join表的时候使用相当类型的列，并将其索引</p><ul><li>如果在程序中有很多JOIN查询，应该保证两个表中join的字段时被建立过索引的。这样MySQL颞部会启动优化JOIN的SQL语句的机制。</li><li><code>SELECT company_name FROM users LEFT JOIN companies ON (users.state = companies.state) WHERE users.id = “user_id”·</code></li><li>两个 state 字段应该是被建过索引的，而且应该是相当的类型，相同的字符集。</li></ul></li><li><p>千万不要ORDER BY RAND  ()</p></li><li><p>避免SELECT *</p><ul><li>从数据库里读出越多的数据，那么查询就会变得越慢,并且，如果我们的数据库服务器和WEB服务器是两台独立的服务器的话，这还会增加网络传输的负载。所以，我们应该养成一个需要什么就取什么的好的习惯。</li></ul></li><li><p>永远为每张表设置一个ID</p></li><li><p>可以使用ENUM 而不要VARCHAR</p><ul><li>ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。这样一来，用这个字段来做一些选项列表变得相当的完美。 </li><li>如果我们有一个字段，比如“性别”，“国家”，“民族”，“状态”或“部门”，我们知道这些字段的取值是有限而且固定的，那么，我们应该使用 ENUM 而不是 VARCHAR。</li></ul></li><li><p>尽可能的使用NOT NULL</p><ul><li>NULL也需要占用存储空间，并且会使我们的程序判断时更加复杂</li></ul></li><li><p>固定长度的表会更快</p><ul><li>如果表中的所有字段都是“固定长度”的，整个表会被认为是 “static” 或 “fixed-length”。 例如，表中没有如下类型的字段： VARCHAR，TEXT，BLOB。只要我们包括了其中一个这些字段，那么这个表就不是“固定长度静态表”了，这样，MySQL 引擎会用另一种方法来处理。</li></ul></li><li><p>垂直分割</p><ul><li>“垂直分割”是一种把数据库中的表按列变成几张表的方法，这样可以降低表的复杂度和字段的数目，从而达到优化的目的。</li></ul></li><li><p>拆分打的DELETE或INSERT语句</p><ul><li>如果我们需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，我们需要非常小心，要避免我们的操作让我们的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了</li><li>所以在使用时使用LIMIT 控制数量操作记录的数量。</li></ul></li><li><p>越小的列会越快</p><ul><li>对于大多数的数据库引擎来说，硬盘操作可能是最重大的瓶颈。所以，把我们的数据变得紧凑会对这种情况非常有帮助，因为这减少了对硬盘的访问。</li><li>如果一个表只会有几列,使用 MEDIUMINT, SMALLINT 或是更小的 TINYINT 会更经济一些</li></ul></li><li><p>选择正确的存储引擎</p><ul><li>在MYSQL中有两个存储引擎MyISAM和InnoDB,每个引擎都有利有弊。</li><li>MyISAM<ul><li>good: 适合于一些需要大量<strong>查</strong>询的应用, SELECT  COUNT(*)这类的计算是超快无比的</li><li>bad: 但是对于大量<strong>写</strong>操作的支持不是很好, 甚至一个update语句就会进行锁表操作</li><li>以前默认的存储引擎，基于传统的ISAM类型，支持B-Tree，全文检索，但是不是事务安全的，而且不支持外键。不具有原子性。支持锁表。</li></ul></li><li>InnoDB<ul><li>good: 支持“行锁” ，于是在<strong>写</strong>操作比较多的时候，会更优秀</li><li>bad: 趋势会是一个非常复杂的存储引擎，对于一些<strong>小</strong>的应用，它会比 MyISAM 还<strong>慢</strong>。</li><li>事务型引擎，支持ACID事务(实现4种事务隔离机制)、回滚、崩溃恢复能力、行锁。以及提供与Oracle一致的不加锁的读取方式。InnoDB存储它的表和索引在一个表空间中，表空间可以包含多个文件。</li></ul></li></ul></li><li><p>小心 “永久链接”</p><ul><li>“永久链接”的目的是用来减少重新创建MySQL链接的次数。当一个链接被创建了，它会永远处在连接的状态，就算是数据库操作已经结束了。</li><li>Apache 运行在极端并行的环境中，会创建很多很多的了进程。这就是为什么这种“永久链接”的机制工作地不好的原因。在我们决定要使用“永久链接”之前，我们需要好好地考虑一下我们的整个系统的架构。</li></ul></li></ol><h1 id="next"><a href="#next" class="headerlink" title="next"></a>next</h1>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="mysql" scheme="http://www.jelech.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ACM总结</title>
    <link href="http://www.jelech.cn/posts/65518/"/>
    <id>http://www.jelech.cn/posts/65518/</id>
    <published>2018-11-29T12:31:17.000Z</published>
    <updated>2018-12-02T02:43:05.786Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.jelech.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="acm" scheme="http://www.jelech.cn/tags/acm/"/>
    
      <category term="总结" scheme="http://www.jelech.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记</title>
    <link href="http://www.jelech.cn/posts/3493/"/>
    <id>http://www.jelech.cn/posts/3493/</id>
    <published>2018-11-28T12:01:28.000Z</published>
    <updated>2018-12-01T13:39:28.834Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="设计模式笔记"><a href="#设计模式笔记" class="headerlink" title="设计模式笔记"></a>设计模式笔记</h2><blockquote><p>重构获得模式<br>寻找变化点，在变化点运用设计模式</p><p>静态-&gt;动态<br>早绑定-&gt;晚绑定<br>继承-&gt;组合<br>编译时依赖-&gt;运行时依赖<br>紧耦合-&gt;松耦合</p><p>对扩展开放，对修改关闭：类的新增加功能应使用扩展功能，而不是通过修改原来的代码。比如一堆的elseif</p><p><em>attention</em><br><em>规划时,划分出稳定的和变化的</em></p></blockquote><h2 id="组件协作-使用框架与应用创建与划分时"><a href="#组件协作-使用框架与应用创建与划分时" class="headerlink" title="组件协作: 使用框架与应用创建与划分时"></a>组件协作: 使用框架与应用创建与划分时</h2><h3 id="template-Method"><a href="#template-Method" class="headerlink" title="template Method"></a>template Method</h3><p><code>从早绑定到晚绑定</code><br>算法的骨架需要稳定才能使用这个方法<br>使得子类可以不改变一个算法的结构，就可以重定义这个算法的某些步骤<br>框架写好了部分函数和主调用函数，使用者只需要重定义一些子类信息就可以</p><h3 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h3><p><code>多态调用，对扩展开放，对修改关闭</code><br>多个else if..并且限制不明显，未来很有可能扩展时，可以使用，代码过长会占用更多内存，而对象只会在调用时使用<br>定义一系列算法，把他们都一个个封装起来，并且可以互相替换(变化)，使他们所服务的客户程序稳定<br>使得在运行时支持在各种算法之间切换</p><h3 id="Obeserve-Event"><a href="#Obeserve-Event" class="headerlink" title="Obeserve / Event"></a>Obeserve / Event</h3><p>父类通过调用多个观察者，观察子类的信息，更新一些其他的数据</p><h2 id="单一职责-因为需求的增加，会让子类功能复用多次重复利用，应划清责任"><a href="#单一职责-因为需求的增加，会让子类功能复用多次重复利用，应划清责任" class="headerlink" title="单一职责: 因为需求的增加，会让子类功能复用多次重复利用，应划清责任"></a>单一职责: 因为需求的增加，会让子类功能复用多次重复利用，应划清责任</h2><h3 id="Decorator装饰"><a href="#Decorator装饰" class="headerlink" title="Decorator装饰"></a>Decorator装饰</h3><p><code>继承父类的功能后，&#39;多个&#39;子类在细化细节时候对功能进行扩展，引入的静态特质，缺乏灵活性:比如都要加密，都要缓存...</code><br>动态的给一个对象增加一些额外的职责，Decorator模式比生成子类更为灵活<br>基类分为了子类与装饰类(Decorator类)</p><h3 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h3><p><em>以下是预期内容</em></p><p>对象创建<br>对象性能<br>借口隔离<br>状态变化<br>数据结构<br>行为变化<br>领域问题</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>安装Django</title>
    <link href="http://www.jelech.cn/posts/3676/"/>
    <id>http://www.jelech.cn/posts/3676/</id>
    <published>2018-10-10T12:24:40.000Z</published>
    <updated>2018-12-02T01:16:33.315Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="How-2-Install-Django"><a href="#How-2-Install-Django" class="headerlink" title="How 2 Install Django?"></a>How 2 Install Django?</h2><p>当然第一步是安装好你的python啦！</p><h2 id="安装django"><a href="#安装django" class="headerlink" title="安装django"></a>安装django</h2><p><code>pip install django(指定版本django==2.1.1)</code></p><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p><code>django.setting.py -&gt; DATABASE</code></p><p>​    //设置为mysql，数据库名，用户名，密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'ENGINE'</span>     :   <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">​<span class="string">'NAME'</span>       :   <span class="string">'blog-db'</span>,</span><br><span class="line">​<span class="string">'USER'</span>       :   <span class="string">'jelech'</span>,</span><br><span class="line">​<span class="string">'PASSWORD'</span>   :   <span class="string">'123456'</span>,</span><br></pre></td></tr></table></figure><h2 id="安装memcached-django-web缓存"><a href="#安装memcached-django-web缓存" class="headerlink" title="安装memcached django-web缓存"></a>安装memcached django-web缓存</h2><p><em>当同一个用户(ip)访问时候，缓存会识别出来，直接拿出上次同样的访问进行返回</em></p><ol><li>：<code>cd ..</code>（返回到Downloads目录下，Downloads目录下专门放所有下载的东西）</li><li>：<code>wget http://www.memcached.org/files/memcached-1.4.24.tar.gz</code>（下载地址）</li><li>：<code>tar zxvf memcached-1.4.24.tar.gz</code>（进行解压）</li><li>：<code>cd memcached-1.4.24</code> （进入到memcached-1.4.24目录下）</li><li>：<code>./configure --with-libevent=/usr</code>（进行配置）</li><li>：<code>Make</code>（编译这些源代码，让它生成库文件</li><li>：<code>make install</code></li></ol><h3 id="安装连接器"><a href="#安装连接器" class="headerlink" title="安装连接器"></a>安装连接器</h3><p>第一步：pip install python-memcached</p><p>第二步：启动相应服务（因为python-memcached安装完成后只是个可执行文件，我们需要启动它）<code>/usr/local/bin/memcached -u root -d  -p 11211 -c 256 -P /tmp/memcached.pid</code></p><p>第三步：启动以后，我们要看这个东西有没有在系统中启动<code>ps -ef|grep memca</code>每次启动都需要手动输入，很麻烦。</p><p>修改启动文件<code>vi /etc/rc.local</code>将<code>/usr/local/bin/memcached -u root -d  -p 11211 -c 256 -P /tmp/memcached.pid</code>命令放在里面</p><h3 id="Django-setting-配置缓存"><a href="#Django-setting-配置缓存" class="headerlink" title="Django.setting 配置缓存"></a>Django.setting 配置缓存</h3><p>DATABASE下新加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">  <span class="string">'default'</span>: &#123;</span><br><span class="line">    <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.memcached.MemcachedCache'</span>,</span><br><span class="line">    <span class="string">'LOCATION'</span>:<span class="string">'127.0.0.1:11211'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#多个缓存服务器，在location写地址数组[,,,]</span></span><br><span class="line">MIDDLEWAREE_CLASSES内(如果没有，就加到MIDDLEWARE)</span><br><span class="line"><span class="comment">#最前新加</span></span><br><span class="line"><span class="string">'django.middleware.cache.UpdateCacheMiddleware'</span>,</span><br><span class="line"><span class="comment">#最后新加</span></span><br><span class="line"><span class="string">'django.middleware.cache.FetchFromCacheMiddleware'</span>,</span><br></pre></td></tr></table></figure><p><code>django manage.py migrate</code> 会自动创建django的app链接数据库，创建相应的表 表会依据models进行创建</p><h3 id="django配置神器django-debug-toolbar"><a href="#django配置神器django-debug-toolbar" class="headerlink" title="django配置神器django-debug-toolbar:"></a>django配置神器django-debug-toolbar:</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pip 安装好插件</span></span><br><span class="line">pip install django-debug-toolbar</span><br><span class="line"><span class="comment">#setting中的app加入debug_toolbar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑toolbar内部文件</span></span><br><span class="line">python -c <span class="string">"import django;print(django.__path__);"</span> <span class="comment">#得到pip路径</span></span><br><span class="line">vi ..path/site-pacages/debug_toolbar/settings.py</span><br><span class="line"><span class="comment">#加入(修改)</span></span><br><span class="line"><span class="string">'JQUERY_URL'</span>:<span class="string">'//cdn.bootcss.com/jquery/2.1.4/jquery.min.js'</span></span><br></pre></td></tr></table></figure><h2 id="开始Django"><a href="#开始Django" class="headerlink" title="开始Django"></a>开始Django</h2><ul><li><h4 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP,"></a>创建APP,</h4></li><li><h4 id="修改setting"><a href="#修改setting" class="headerlink" title="修改setting,"></a>修改setting,</h4></li><li><h4 id="修改url"><a href="#修改url" class="headerlink" title="修改url,"></a>修改url,</h4></li><li><h4 id="修改app-views"><a href="#修改app-views" class="headerlink" title="修改app.views"></a>修改app.views</h4></li></ul><h3 id="django中配置日志器的建立和使用"><a href="#django中配置日志器的建立和使用" class="headerlink" title="django中配置日志器的建立和使用"></a>django中配置日志器的建立和使用</h3><h4 id="修改setting-加入"><a href="#修改setting-加入" class="headerlink" title="修改setting,加入"></a>修改setting,加入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: false,</span><br><span class="line">    <span class="string">'formaters'</span>: &#123;</span><br><span class="line">        <span class="string">'standerd'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>:<span class="string">'%(ssctime)s [%(thresdName)s:%(thread)d][%(name)s:%(lineno)d][%(module)s:%(funcName)s][%(levelname)s] - %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'filters'</span>: &#123;</span><br><span class="line">            <span class="string">'mail_admins'</span>: &#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'django.utils.log.AdminEmailHandler'</span>,</span><br><span class="line">                <span class="string">'include_html'</span>:<span class="keyword">True</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'default'</span>: &#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFiileHandler'</span>,</span><br><span class="line">                <span class="string">'filename'</span>: <span class="string">'log/all.log'</span>,</span><br><span class="line">                <span class="string">'maxBytes'</span>: <span class="number">1024</span>* <span class="number">1024</span>* <span class="number">5</span>,</span><br><span class="line">                <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="string">'formatter'</span>:<span class="string">'standerd'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'error'</span>: &#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFiileHandler'</span>,</span><br><span class="line">                <span class="string">'filename'</span>: <span class="string">'log/error.log'</span>,</span><br><span class="line">                <span class="string">'maxBytes'</span>: <span class="number">1024</span>* <span class="number">1024</span>* <span class="number">5</span>,</span><br><span class="line">                <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="string">'formatter'</span>:<span class="string">'standerd'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'console'</span>: &#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">                <span class="string">'formatter'</span>: <span class="string">'standerd'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'request_handler'</span>;&#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFiileHandler'</span>,</span><br><span class="line">                <span class="string">'filename'</span>: <span class="string">'log/script.log'</span>,</span><br><span class="line">                <span class="string">'maxBytes'</span>: <span class="number">1024</span>* <span class="number">1024</span>* <span class="number">5</span>,</span><br><span class="line">                <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="string">'formatter'</span>:<span class="string">'standerd'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'scripts_handler'</span>;&#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFiileHandler'</span>,</span><br><span class="line">                <span class="string">'filename'</span>: <span class="string">'log/script.log'</span>,</span><br><span class="line">                <span class="string">'maxBytes'</span>: <span class="number">1024</span>* <span class="number">1024</span>* <span class="number">5</span>,</span><br><span class="line">                <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="string">'formatter'</span>:<span class="string">'standerd'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'loggers'</span>: &#123;</span><br><span class="line">            <span class="string">'django'</span>: &#123;</span><br><span class="line">                <span class="string">'handlers'</span>: [<span class="string">'default'</span>, <span class="string">'console'</span>],</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'propaga'</span>:<span class="keyword">False</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'django.request'</span>: &#123;</span><br><span class="line">                <span class="string">'handlers'</span>: [<span class="string">'request_handler'</span>],</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'propaga'</span>:<span class="keyword">False</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'scripts'</span>: &#123;</span><br><span class="line">                <span class="string">'handlers'</span>: [<span class="string">'scripts_handler'</span>],</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">                <span class="string">'propaga'</span>:<span class="keyword">False</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'blog.views'</span>: &#123; <span class="comment">#app name.views</span></span><br><span class="line">                <span class="string">'handlers'</span>: [<span class="string">'default'</span>, <span class="string">'error'</span>],</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'propaga'</span>:<span class="keyword">False</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'appName.views'</span>)</span><br><span class="line">logger.error(x) errorException</span><br><span class="line"><span class="comment">#抓取x错误登记到error.txt文件里</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#setting中可以设置网站的基本信息，网站内进行引用</span></span><br><span class="line">SITE_NAME = <span class="string">'jelech的个人博客'</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#1`局部引用</span></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="comment">#2`全局setting</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_setting</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">'SITE_NAME'</span>:setting.SITE_NAME,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">#settings中TMPLATES中context_processors尾部加入</span></span><br><span class="line"><span class="string">'appName.views.global_setting'</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">#网站内直接使用变量</span></span><br><span class="line">&#123;&#123; SITE_NAME &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#mysql临时笔记</span><br><span class="line"></span><br><span class="line">    //修改密码，注意mysql5.7中user表中密码改为了authentication_string</span><br><span class="line">    update mysql.user set authentication_string1=password(&apos;123456&apos;) where User=&quot;jelech&quot; and Host=&quot;localhost&quot;;</span><br><span class="line"></span><br><span class="line">    // 密码进入数据库，创建新数据库，授权新用户，刷新改动，设置根密码(初始使用一次就行)</span><br><span class="line">    mysql -u root -p</span><br><span class="line">    create database blog_db charset=utf8;</span><br><span class="line">    grant all on db_music.* to jelech@localhost identified by &quot;123456&quot;;</span><br><span class="line">    flush privileges;</span><br><span class="line">    set password for root@localhost=password(&quot;Nozuonodie&quot;);</span><br><span class="line"></span><br><span class="line">    //修改表格格式信息</span><br><span class="line">    ALTER TABLE userInfo MODIFY password VARCHAR(100) NOT NULL;</span><br><span class="line"></span><br><span class="line">    //删除表中所有内容，以及索引 用这种方法相当于重载了表格内容，全新的！</span><br><span class="line">    truncate table wp_comments;</span><br><span class="line"></span><br><span class="line">安装mysqlclient</span><br><span class="line"></span><br><span class="line">    pip install mysqlclient</span><br><span class="line"></span><br><span class="line">    安装Python mysqlclient出现“OSError: mysql_config not found”错误：</span><br><span class="line">    安装libmysqlclient-dev包即可，如果还有问题，可以安装python-dev</span><br><span class="line">    $ apt-get install libmysqlclient-dev python3-dev</span><br><span class="line"></span><br><span class="line">django链接数据库</span><br><span class="line">    pip install pymysql     #安装好python和mysql的连接器</span><br><span class="line">    python3 manage.py inspectdb &gt; bigDataSwap/models.py     #链接django和mysql，自动生成表中的各种东西</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="软件配置" scheme="http://www.jelech.cn/categories/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="python" scheme="http://www.jelech.cn/tags/python/"/>
    
      <category term="linux" scheme="http://www.jelech.cn/tags/linux/"/>
    
      <category term="软件配置" scheme="http://www.jelech.cn/tags/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Django" scheme="http://www.jelech.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>算法学习笔记</title>
    <link href="http://www.jelech.cn/posts/16186/"/>
    <id>http://www.jelech.cn/posts/16186/</id>
    <published>2018-09-20T13:09:57.000Z</published>
    <updated>2018-12-01T13:37:14.241Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="学习笔记O-∩-∩-O"><a href="#学习笔记O-∩-∩-O" class="headerlink" title="学习笔记O(∩_∩)O"></a>学习笔记O(∩_∩)O</h2><h4 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h4><blockquote><p>倍增是一种思想。依据这种思想，衍生出了ST表、LCA(最近公共祖先)以及一些在树上的倍增应用。</p></blockquote><p>考虑这样一个问题：如何快速在一个序列s中查询到不大于a的值？（这里序列已排序好<br>正常思想就是二分，每次取得s中<code>l,r,mid</code>的值，进行比较后快速logn速度逼近正确的值。但是这里我们不考虑二分<br>倍增和二分的思想很类似。对于一个单调的序列，我们可以快速的跳过太小的（或者太大的）数，从而快速逼近结果。<br>简单的模拟一下倍增：<br>· 设置一个长度p，每次如果查询到的值小于<strong>目标</strong>，位置<code>k+=p</code>，长度<code>p=2*p</code><br>· 如果查询到的值大于<strong>目标</strong>，长度<code>p=p/2</code>。并重复上一个步骤。<br>· 循环查询到确切的目标。<br>比如，起初位置在k为0，p为2.查询到s[k+p]为小于<strong>目标</strong>的数，<code>k</code>就变成了<code>k+p</code>，<code>p</code>增倍了。下一次查询到s[k+p]大于了<strong>目标</strong>数，我们就把p先减小为一半。再查一次。如果有概念了，可以想象出平均下来是logn的。</p><h4 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h4><blockquote><p>st表灵活的使用了倍增的思想<br>可以进行对区间最值问题的快速查找与更新<br>预处理O（n·logn），查询O（1），空间（n·logn）</p></blockquote><p>线段树虽说是区间维护的全能王，但是也恰巧这样导致了他在一些特别的方面处理比较慢，线段树的查询是O(logn)的，而且占用的空间也较大，所以容易被卡常数。</p><h4 id="字典树-Trie"><a href="#字典树-Trie" class="headerlink" title="字典树 Trie"></a>字典树 Trie</h4><blockquote><p>将所有字符串依据前缀构建的一棵树<br>其中的节点表示字符串的某个字符，树的根是一个空指针<br>是一种存放字符串的数据结构（就是为了其他算法的使用专门设计的</p></blockquote><h4 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h4><p>（好像顺序乱套了</p><blockquote><p>不是可以自动Acepte的程序<br>是基于kmp思想，建立在字典树上的自动匹配字符串算法<br>多个模板串，一个目标串<br><code>重要词典:</code><br>失败指针(fail指针)：指的是在匹配某个字符串的时候，如果到当前的位置发现不匹配，会跳到某个其他前缀匹配的位置，继续匹配。如果仍然没有，就会跳回到根</p></blockquote><h4 id="佩尔方程"><a href="#佩尔方程" class="headerlink" title="佩尔方程"></a>佩尔方程</h4><p>（没想到还是要学数论</p><blockquote><p>满足：x^2 - d<em>y^2 = 1 的方程<br>方程通过假设x1,x2两个解，解出了另一个新的解。这代表了如果知道方程中的最小特解，就能推论出所有的解。<br>通解：`Xn = Xn-1 </em> X1 + d <em> Yn-1 </em> Y1<code></code>Yn = Xn-1 <em> X1 + Yn-1 </em> Y1`<br>半难以发现正解公式，需要通过自己一步一步推公式。</p></blockquote><h4 id="赛后笔记"><a href="#赛后笔记" class="headerlink" title="赛后笔记"></a>赛后笔记</h4><blockquote><p>先贪心再暴力<br>打表找规律推公式<br>关于long long 要先仔细读题思考哪些部分需要再修改部分</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://www.jelech.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装python3</title>
    <link href="http://www.jelech.cn/posts/21344/"/>
    <id>http://www.jelech.cn/posts/21344/</id>
    <published>2018-09-15T14:24:40.000Z</published>
    <updated>2018-12-01T13:36:22.891Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="一、首先，官网下载python3的所需版本。"><a href="#一、首先，官网下载python3的所需版本。" class="headerlink" title="一、首先，官网下载python3的所需版本。"></a>一、首先，官网下载python3的所需版本。</h2><p><a href="https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz" target="_blank" rel="noopener">wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz</a></p><p>想下载到那个文件夹下就先进入到那个文件夹下——cd /home/download</p><h3 id="二、然后，解压缩文件"><a href="#二、然后，解压缩文件" class="headerlink" title="二、然后，解压缩文件"></a>二、然后，解压缩文件</h3><p>tar -xvf Python-3.6.0.tgz</p><h3 id="三、创建安装文件的路径。"><a href="#三、创建安装文件的路径。" class="headerlink" title="三、创建安装文件的路径。"></a>三、创建安装文件的路径。</h3><p>mkdir /usr/local/python3</p><h3 id="四、编译。"><a href="#四、编译。" class="headerlink" title="四、编译。"></a>四、编译。</h3><p>./configure –prefix=/usr/local/python3</p><h3 id="五、安装。"><a href="#五、安装。" class="headerlink" title="五、安装。"></a>五、安装。</h3><p>1、make</p><p>2、make install</p><p>3、完毕</p><h3 id="六、创建新版本的软连接。"><a href="#六、创建新版本的软连接。" class="headerlink" title="六、创建新版本的软连接。"></a>六、创建新版本的软连接。</h3><p>1、修改旧版本</p><p>mv /usr/bin/python /usr/bin/python_bak</p><p>2、创建新的软连接</p><p>ln -s /usr/local/python3/bin/python3 /usr/bin/python</p><p>3、检查python的版本</p><p>python -V</p><p>python-3.6.0</p><p>软连接创建成功</p><h3 id="七、配置成功后，pip3用不了，需进一步配置。"><a href="#七、配置成功后，pip3用不了，需进一步配置。" class="headerlink" title="七、配置成功后，pip3用不了，需进一步配置。"></a>七、配置成功后，pip3用不了，需进一步配置。</h3><p>若已有pip3：</p><p>1、PATH=$PATH:$HOME/bin:</p><p>2、PATH=$PATH:$HOME/bin:/usr/local/python3/bin</p><p>3、完成</p><p>或者没有pip3：</p><p>sudo apt install python3-pip</p><p>这时pip3就可以使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.jelech.cn/tags/linux/"/>
    
      <category term="软件配置" scheme="http://www.jelech.cn/tags/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>日（口）记</title>
    <link href="http://www.jelech.cn/posts/34232/"/>
    <id>http://www.jelech.cn/posts/34232/</id>
    <published>2018-08-31T14:12:04.000Z</published>
    <updated>2018-12-01T13:41:33.271Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.jelech.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="语录" scheme="http://www.jelech.cn/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>更新一波新模板</title>
    <link href="http://www.jelech.cn/posts/33987/"/>
    <id>http://www.jelech.cn/posts/33987/</id>
    <published>2018-08-28T14:26:40.000Z</published>
    <updated>2018-12-01T13:37:09.287Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="m染色问题板子"><a href="#m染色问题板子" class="headerlink" title="m染色问题板子"></a>m染色问题板子</h2><blockquote><p>常规用法：求无向图种，m种颜色可以染成几种<br>可使用二分查找不同m，每次dfs(return if ans &gt; 0)来查找最小m使得图可以被染色成功。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,k,m,x,y,i,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>][<span class="number">1001</span>],f[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">if</span>(ans &gt; <span class="number">0</span>) <span class="keyword">return</span> ; <span class="comment">// ans is bigger than 0 meaning it can be colored</span></span><br><span class="line"><span class="keyword">if</span> (dep==n+<span class="number">1</span>)&#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,m+<span class="number">1</span>) <span class="keyword">if</span> (!f[dep][i])&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,n+<span class="number">1</span>) <span class="keyword">if</span> (a[dep][j])&#123;</span><br><span class="line">                f[j][i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(dep+<span class="number">1</span>);</span><br><span class="line">            rep(j,<span class="number">1</span>,n+<span class="number">1</span>) <span class="keyword">if</span> (a[dep][j])&#123;</span><br><span class="line">                f[j][i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">cin</span> &gt;&gt; T; T; T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        m = <span class="number">3</span>;<span class="comment">// m colors</span></span><br><span class="line">        rep(i,<span class="number">1</span>,k+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            x++,y++;</span><br><span class="line">            a[x][y]=<span class="number">1</span>;</span><br><span class="line">            a[y][x]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"N"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Y"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nmk硬币问题"><a href="#nmk硬币问题" class="headerlink" title="nmk硬币问题"></a>nmk硬币问题</h3><blockquote><p>从n种硬币中选m个投k次，问最终向上的硬币数的期望计算</p><p>//dp 计算的是概率，代表了投第i次增加了向上硬币数可以有上次较少的成功得到，也可以由同样的数失败得到。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d[<span class="number">200</span>][<span class="number">200</span>],p[<span class="number">200</span>],c[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        c[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)c[i][j]=c[i<span class="number">-1</span>][j<span class="number">-1</span>]+c[i<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)p[i]=p[i<span class="number">-1</span>]/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;t);</span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">        d[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[i][j]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=t;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(n-j&gt;=t)d[i+<span class="number">1</span>][j+k]+=d[i][j]*c[t][k]*p[t];</span><br><span class="line">                    <span class="keyword">else</span> d[i+<span class="number">1</span>][j-(t-(n-j))+k]+=d[i][j]*c[t][k]*p[t];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans+=d[m][i]*i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈密尔顿回路问题"><a href="#哈密尔顿回路问题" class="headerlink" title="哈密尔顿回路问题"></a>哈密尔顿回路问题</h3><blockquote><p>只经过所有点一次，能否走完并回到起点，以及最佳路径</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> c[V][V];<span class="comment">//edge</span></span><br><span class="line"><span class="keyword">int</span> x[V];</span><br><span class="line"><span class="keyword">bool</span> flag[V];</span><br><span class="line"><span class="keyword">bool</span> vis[V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hamilton</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">        x[i] = <span class="number">-1</span>,vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    vis[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    x[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        x[k]++;</span><br><span class="line">        <span class="keyword">while</span>(x[k] &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[x[k]] &amp;&amp; c[x[k - <span class="number">1</span>]][x[k]])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x[k]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((x[k] &lt; n) &amp;&amp; (k != n - <span class="number">1</span>))&#123;</span><br><span class="line">            vis[x[k]] = <span class="literal">true</span>;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((x[k] &lt; n) &amp;&amp; k == n - <span class="number">1</span> &amp;&amp; c[x[k]][x[<span class="number">0</span>]])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            x[k] = <span class="number">-1</span>;</span><br><span class="line">            k--;</span><br><span class="line">            vis[x[k]] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line"></span><br><span class="line">        rep(i,<span class="number">0</span>,m)&#123;</span><br><span class="line">            <span class="keyword">int</span> a,b;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            a--,b--;</span><br><span class="line">            c[a][b]=<span class="literal">true</span>;</span><br><span class="line">            c[b][a]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hamilton();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> f = <span class="literal">false</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">            flag[x[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!flag[i]) f=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f) <span class="built_in">cout</span> &lt;&lt;<span class="string">"no solution"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==n<span class="number">-1</span>) <span class="built_in">cout</span> &lt;&lt; x[i]+<span class="number">1</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; x[i]+<span class="number">1</span> &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.jelech.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="刷题" scheme="http://www.jelech.cn/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="acm" scheme="http://www.jelech.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>中石油大学训练赛题解(Personal)</title>
    <link href="http://www.jelech.cn/posts/55713/"/>
    <id>http://www.jelech.cn/posts/55713/</id>
    <published>2018-07-22T09:55:41.000Z</published>
    <updated>2018-12-01T13:39:58.219Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="第三阶段个人训练赛（USACO2018-Open）"><a href="#第三阶段个人训练赛（USACO2018-Open）" class="headerlink" title="第三阶段个人训练赛（USACO2018 Open）"></a>第三阶段个人训练赛（USACO2018 Open）</h2><blockquote><p><a href="http://exam.upc.edu.cn/contest.php?cid=1388" target="_blank" rel="noopener">这里是源地址</a></p></blockquote><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>B：给你n个数据，求其中两个数据进行AND操作(&amp;)后的最大值是什么【n&lt;=1e6 ai&lt;=2^31】</p><p>C：给你n个数，m种序列，问尽量满足前X顺序的情况下，取得的X最大时候的序列顺序是什么（两个序列进行合并操作按照字典序最小）【1≤N≤1e5 1≤M≤50,000】</p><p>E：问这种操作下回打印多少次moo</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; sorted = <span class="literal">false</span></span><br><span class="line">&gt; <span class="keyword">while</span> (<span class="keyword">not</span> sorted):</span><br><span class="line">&gt;    sorted = <span class="literal">true</span></span><br><span class="line">&gt;    moo</span><br><span class="line">&gt;    <span class="keyword">for</span> i = <span class="number">0</span> to N<span class="number">-2</span>:</span><br><span class="line">&gt;       <span class="keyword">if</span> A[i+<span class="number">1</span>] &lt; A[i]:</span><br><span class="line">&gt;          swap A[i], A[i+<span class="number">1</span>]</span><br><span class="line">&gt;    <span class="keyword">for</span> i = N<span class="number">-2</span> downto <span class="number">0</span>:</span><br><span class="line">&gt;       <span class="keyword">if</span> A[i+<span class="number">1</span>] &lt; A[i]:</span><br><span class="line">&gt;          swap A[i], A[i+<span class="number">1</span>]</span><br><span class="line">&gt;    <span class="keyword">for</span> i = <span class="number">0</span> to N<span class="number">-2</span>:</span><br><span class="line">&gt;       <span class="keyword">if</span> A[i+<span class="number">1</span>] &lt; A[i]:</span><br><span class="line">&gt;          sorted = <span class="literal">false</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>【1≤N≤100,000 0&lt;=Ai&lt;=1e9】</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>B:（题外话：一开始就想的字典树维护，可是他们一堆人就开始莽交，让人怀疑人生，没办法只有强行暴力过）直接暴力肯定不行，需要压缩一下复杂度。首先，两个数&amp;操作后得到的数肯定比最小的数还要小，这是一定的。所以，我们可以想到，在维护一个最大值的情况下，如果后序遍历到了比这种数要小的，就不用进行运算了。因此答案可以是直接进行排序，从大到小遍历，维护一个&amp;操作的最大值，如果取得的数比这个数小，就直接跳过后序的访问，这样减去了很多多余操作。</p><p>C:（题外话：这道题是真的没想到用拓扑排序。。）由于X是前几个，有顺序。并且前X个序列合并后都是独立判断，所以，我们可以直接二分答案，每次二分直接建图，再跑一次拓扑排序判断有没有环。因为有环的时候代表了这个合并的序列是不合法的（这个比较难想到）</p><p>E：（题外话：这不就是问冒泡排序次数吗？然后WA了）首先，这是双向冒泡（当然看得出来）然后，通过观察。我发现从每次从头往后找一个需要往后移动数，那么这次是肯定会移动的，而从后往前移动的数，可以是自己移动的，也可能是之前的数往后移动，将它顺便移动到前面的。那么我们维护一个最大值。设定一个中间变量，每次找到一个应该往后移动的数，就加一，如果找到的是向前的，并且他要去的位置是之前其他数已经移动的位置，那么久减一，这样从头到尾遍历一遍就得出了结果。（代码和解释稍微有更改）</p></blockquote><h3 id="C题源代码："><a href="#C题源代码：" class="headerlink" title="C题源代码："></a>C题源代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FI(n) FastIO::read(n)</span></span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="keyword">char</span> buf[SIZE], obuf[SIZE], str[<span class="number">60</span>];</span><br><span class="line"><span class="keyword">int</span> bi = SIZE, bn = SIZE, opt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (bn) &#123;</span><br><span class="line"><span class="keyword">for</span> (; bi &lt; bn &amp;&amp; buf[bi] &lt;= <span class="string">' '</span>; bi++);</span><br><span class="line"><span class="keyword">if</span> (bi &lt; bn) <span class="keyword">break</span>;</span><br><span class="line">bn = fread(buf, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">bi = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (bn) &#123;</span><br><span class="line"><span class="keyword">for</span> (; bi &lt; bn &amp;&amp; buf[bi] &gt; <span class="string">' '</span>; bi++) s[sn++] = buf[bi];</span><br><span class="line"><span class="keyword">if</span> (bi &lt; bn) <span class="keyword">break</span>;</span><br><span class="line">bn = fread(buf, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">bi = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">s[sn] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> sn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = read(str), bf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; <span class="keyword">if</span> (str[i] == <span class="string">'-'</span>) bf = <span class="number">-1</span>, i++; <span class="keyword">else</span> bf = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; i &lt; n; i++) x = x * <span class="number">10</span> + str[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span> (bf &lt; <span class="number">0</span>) x = -x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; <span class="comment">// 快速读入挂</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,cnt;</span><br><span class="line"><span class="keyword">int</span> head[MAXN], to[MAXN&lt;&lt;<span class="number">1</span>], net[MAXN&lt;&lt;<span class="number">1</span>], r[MAXN], vis[MAXN];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    to[cnt]=v;</span><br><span class="line">    net[cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp;a) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.id &lt; id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span> :: priority_queue &lt;node&gt; dl;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="keyword">sizeof</span>(r));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mid;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;q[i].size()<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            addedge(q[i][j], q[i][j+<span class="number">1</span>]);</span><br><span class="line">            r[q[i][j+<span class="number">1</span>]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">topsort</span><span class="params">(<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!r[i])&#123;</span><br><span class="line">            sum++;</span><br><span class="line">            dl.push((node)&#123;i&#125;);</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!dl.empty())&#123;</span><br><span class="line">        node now = dl.top();</span><br><span class="line">        <span class="keyword">if</span>(f) <span class="built_in">printf</span>(<span class="string">"%d "</span>, now.id);</span><br><span class="line">        dl.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now.id];i;i=net[i])&#123;</span><br><span class="line">            r[to[i]]--;</span><br><span class="line">            <span class="keyword">if</span>(!r[to[i]] &amp;&amp; !vis[to[i]])&#123;</span><br><span class="line">                dl.push((node)&#123;to[i]&#125;);</span><br><span class="line">                sum++;</span><br><span class="line">                vis[to[i]]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum==n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    while(~scanf("%d %d",&amp;n,&amp;m))&#123;</span></span><br><span class="line"><span class="comment">//        freopen("in.txt","r",stdin);</span></span><br><span class="line"><span class="comment">//        freopen("out.txt","w",stdout);</span></span><br><span class="line">        FI(n),FI(m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s,x;</span><br><span class="line"><span class="comment">//            scanf("%d",&amp;s);</span></span><br><span class="line">            FI(s);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=s;j++)&#123;</span><br><span class="line"><span class="comment">//                scanf("%d",&amp;x);</span></span><br><span class="line">                FI(x);</span><br><span class="line">                q[i].push_back(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=m+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            build(mid);</span><br><span class="line">            <span class="keyword">if</span>(topsort(<span class="number">0</span>))&#123;</span><br><span class="line">                l=mid+<span class="number">1</span>;</span><br><span class="line">                ans=mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        build(ans);</span><br><span class="line">        topsort(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E题源代码："><a href="#E题源代码：" class="headerlink" title="E题源代码："></a>E题源代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FI(n) FastIO::read(n)</span></span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="keyword">char</span> buf[SIZE], obuf[SIZE], str[<span class="number">60</span>];</span><br><span class="line"><span class="keyword">int</span> bi = SIZE, bn = SIZE, opt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (bn) &#123;</span><br><span class="line"><span class="keyword">for</span> (; bi &lt; bn &amp;&amp; buf[bi] &lt;= <span class="string">' '</span>; bi++);</span><br><span class="line"><span class="keyword">if</span> (bi &lt; bn) <span class="keyword">break</span>;</span><br><span class="line">bn = fread(buf, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">bi = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (bn) &#123;</span><br><span class="line"><span class="keyword">for</span> (; bi &lt; bn &amp;&amp; buf[bi] &gt; <span class="string">' '</span>; bi++) s[sn++] = buf[bi];</span><br><span class="line"><span class="keyword">if</span> (bi &lt; bn) <span class="keyword">break</span>;</span><br><span class="line">bn = fread(buf, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">bi = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">s[sn] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> sn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = read(str), bf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; <span class="keyword">if</span> (str[i] == <span class="string">'-'</span>) bf = <span class="number">-1</span>, i++; <span class="keyword">else</span> bf = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; i &lt; n; i++) x = x * <span class="number">10</span> + str[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span> (bf &lt; <span class="number">0</span>) x = -x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; <span class="comment">// 快速读入挂</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,p;</span><br><span class="line">&#125;emt[<span class="number">100007</span>];</span><br><span class="line"><span class="keyword">int</span> t,n,m;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">100007</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.val==b.val) <span class="keyword">return</span> a.p&lt;b.p;</span><br><span class="line">    <span class="keyword">return</span> a.val &lt; b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    while(~scanf("%d",&amp;n))&#123;</span></span><br><span class="line"><span class="comment">//        freopen("in.txt","r",stdin);</span></span><br><span class="line"><span class="comment">//        freopen("out.txt","w",stdout);</span></span><br><span class="line">        FI(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//            scanf("%d",&amp;emt[i].val);</span></span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            FI(a);</span><br><span class="line">            emt[i].val = a;</span><br><span class="line">            emt[i].p=i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(emt+<span class="number">1</span>,emt+<span class="number">1</span>+n,cmp);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(emt[i].p &gt; i)++cnt;</span><br><span class="line">            <span class="keyword">if</span>(vis[i])--cnt;</span><br><span class="line">            vis[emt[i].p] = <span class="literal">true</span>;</span><br><span class="line">            ans=max(ans,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="刷题" scheme="http://www.jelech.cn/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="acm" scheme="http://www.jelech.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces Round 47 题解</title>
    <link href="http://www.jelech.cn/posts/40135/"/>
    <id>http://www.jelech.cn/posts/40135/</id>
    <published>2018-07-18T15:09:57.000Z</published>
    <updated>2018-12-01T13:40:35.835Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="Educational-Codeforces-Round-47-Rated-for-Div-2"><a href="#Educational-Codeforces-Round-47-Rated-for-Div-2" class="headerlink" title="Educational Codeforces Round 47 (Rated for Div. 2)"></a>Educational Codeforces Round 47 (Rated for Div. 2)</h2><blockquote><p><a href="https://codeforces.com/contest/1009/problem" target="_blank" rel="noopener">原文链接</a>ABCDEFG</p></blockquote><h3 id="A题意"><a href="#A题意" class="headerlink" title="A题意"></a>A题意</h3><blockquote><p>A题： 用钱包walt买价值emt的物品，顺序用钱，不找回，最多购买</p></blockquote><h3 id="A题解"><a href="#A题解" class="headerlink" title="A题解"></a>A题解</h3><blockquote><p>顺序扫一遍，有满足的就加，并后移。一种卡尺操作。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,emt[<span class="number">1007</span>],walt[<span class="number">1007</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;emt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;walt[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,j=<span class="number">0</span>;<span class="comment">// to the walt</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(walt[j] &gt;= emt[i])&#123;</span><br><span class="line">ans++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B题意"><a href="#B题意" class="headerlink" title="B题意"></a>B题意</h3><blockquote><p>B题：一个字符串只能交换0-1；1-2 问最小串</p></blockquote><h3 id="B题解"><a href="#B题解" class="headerlink" title="B题解"></a>B题解</h3><blockquote><p>看得出来1可以到任何位置，0和2的位置只能固定。所以，记录一下0，2的位置。<br>在输出完第一个2的前面的0之后，输出所有的1，再继续输出剩下的固定0,2位置。就是结果了。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,emt[<span class="number">100007</span>][<span class="number">3</span>],len=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">memset</span>(emt,<span class="number">0</span>,<span class="keyword">sizeof</span>(emt));</span><br><span class="line"><span class="built_in">string</span> s,s2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>; <span class="comment">// 1 nums</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'1'</span>) cnt++;</span><br><span class="line"><span class="keyword">else</span> s2 += s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s2[j]==<span class="string">'0'</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(cnt--)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;s2[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C题意"><a href="#C题意" class="headerlink" title="C题意"></a>C题意</h3><blockquote><p>C题：每次对一个序列输入x,d；每个数都+x,选择一个点j，向外扩散增加d，分别加到对应的位置上。问最大的平均数是多少？</p></blockquote><h3 id="C题解"><a href="#C题解" class="headerlink" title="C题解"></a>C题解</h3><blockquote><p>题也说的很清楚了。每次输入的值都加到一个总和里，最后在除n就行了。<br>二者，如果d大于0，则应该尽量让他递增更多，如果d小于0，则应该让j的位置尽量靠中间。公式化简一下，套进去就做出来了。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t,n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;d);</span><br><span class="line"><span class="keyword">if</span>(d&gt;<span class="number">0</span>) ans += n*x + d*(n<span class="number">-1</span>)*n/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> ans += n*x + d*(n-(n+<span class="number">1</span>)/<span class="number">2</span>)*((n+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.15f\n"</span>, <span class="number">1.0</span>*ans/n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D题意"><a href="#D题意" class="headerlink" title="D题意"></a>D题意</h3><blockquote><p>D题：问能否建立一个连通图，这个连通图的所有边的两端点互质，n个点m条边</p></blockquote><h3 id="D题解"><a href="#D题解" class="headerlink" title="D题解"></a>D题解</h3><blockquote><p>连通图首先得所有点都连上边。其次，所有数都和1互质，因此，直接判断一下n和m的关系，可以a掉部分数据。<br>然后跑一边所有的N个数，对每个数判断大于i的点是否互质，是就加到边几何中，最后判断一下所加的所有边数是否大于了m条边。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;emt[<span class="number">100007</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> len = m; <span class="comment">// 需要加的边数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= n &amp;&amp; len; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (__gcd(i,j)==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">len--;</span><br><span class="line">emt[len] = (node)&#123;i,j&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(len || n&gt;m+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Possible\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, emt[i].x,emt[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E题意"><a href="#E题意" class="headerlink" title="E题意"></a>E题意</h3><blockquote><p>E题： n千米，有n段路，共有n-1个可能可以休息的地方，则共有2^(n-1)种可能的休息方式; 计算 p⋅2^(n−1)</p></blockquote><h3 id="E题解"><a href="#E题解" class="headerlink" title="E题解"></a>E题解</h3><blockquote><p>这道题就是简单的数论问题。。。但是就是没读懂题。<br>这里的p代表的是期望，p<em>2^(n-1)也就是计算所有的可能的休息方式下的消耗之和。也就分别算出不同ai对结果的贡献就行。最终可以找到规律**a[i]出现的次数是 2^(n-i) + 2^(n-i-1) \</em> (n-i)**<br>但是我看了一下大神的代码，更简短，因此贴个大神的超短代码。5 5 </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,l,s,a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">l=(l*<span class="number">2</span>%p+b)%p;</span><br><span class="line">s=(s*<span class="number">2</span>%p+l+a)%p;</span><br><span class="line">b=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F题意"><a href="#F题意" class="headerlink" title="F题意"></a>F题意</h3><blockquote><p>A题： 用钱包walt买价值emt的物品，顺序用钱，不找回，最多购买</p></blockquote><h3 id="F题解"><a href="#F题解" class="headerlink" title="F题解"></a>F题解</h3><blockquote><p>F看题解说是用 DSU on tree。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="G题意"><a href="#G题意" class="headerlink" title="G题意"></a>G题意</h3><blockquote><p>A题： 用钱包walt买价值emt的物品，顺序用钱，不找回，最多购买</p></blockquote><h3 id="G题解"><a href="#G题解" class="headerlink" title="G题解"></a>G题解</h3><blockquote><p>顺序扫一遍，有满足的就加，并后移。一种卡尺操作。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="ACM竞赛" scheme="http://www.jelech.cn/categories/ACM%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="刷题" scheme="http://www.jelech.cn/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="acm" scheme="http://www.jelech.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>又是期末</title>
    <link href="http://www.jelech.cn/posts/50181/"/>
    <id>http://www.jelech.cn/posts/50181/</id>
    <published>2018-07-17T14:56:50.000Z</published>
    <updated>2018-12-01T13:41:48.295Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/Qh/60Y0f/n7vvjxmGQv9XGesoZEokw0qQQ2TR2IPjKdr2Fq7F9CU0rB6vmpPYmQtIe0BOP4z480dgVQmUv0FQ2KX97EpZdVWAv7vBjEluqC/+xpjRe9/IjUl7Te1de+Ya+OZD1duViiKrG4ssUhKst7yS3cF/8ikV0Ik8+ECJUUcZ32jVVzgWxFKMfm2f6PuLJbfPbfksp0es1nX6i+l8Tj7MrwCabotfktlsTGt43U8CVKQMso2R1O6pXAPVg85oA5cOvDghIiBRPthjCdrucYY65ddKYAlqL42K3hwL7hh6WQwPGrDC2JUm96Of0Ff1No+lkVyBdq4Srl0ou1KX4lUVWlF6yPimbk2yihGrqPgIqBetAWcL7ZoZGTnFDYhcu1/9kkbqsfBBk3sCIcOeQN0iw3FXAM5pT61djTbU372nqYL8tNd6R3/BSOYkMtcEh9Eyrqlt7XJdfqDYMSMrWfYQ2F3hHbr2Ro+iVFXpz8ZjiaJx58jNYTNHoseqIW3+AjCxgSq7trgmbqOyNOzQBixNHjQHnAdGvm/XJ5vxUHs30QOIxIQXH+N8ryxcnH4/V/BM7PqnctGvIjwoJnvyv+ZTO/9V5pNzG1KDmSq4uP1W/GmNpIHaX+ahDGQD/f2XSZ1vnAEwcODYS4sz9veNtuQLtNSSnMbGuqGmObTU0ihTRXJOyTpm4ZKvEHalmrArLCl3oksTJt03ozRhFmY1c8jWlHr5Iq7MFLnCTPWuGkc07dMrdrlNq1qq2Y8NKGRrSbB+hXxgvNd9+JedVVFdTEoY+orAU915ylxyxBr4+NAnpu/hZSrDF7sq2IydMvfbVsKrJSMSo8seu1m/KcYDk+wAG8caSBb8p4wp87wZRqUQT7CKbA3gRkTCRhY+umTPdbOBnSRwUixwGh6k3BYbATLMEb66kQyJ4mkOaPxJGLex+jrS/Rc8JLHS4PSD0zZCvLVN2E37tzDe1GumX/f1XalnbEL8FoeUMiP5njxvbOVcysP6iaE8</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.jelech.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="日常" scheme="http://www.jelech.cn/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo + GitPage建立博客遇到的bug和解决办法</title>
    <link href="http://www.jelech.cn/posts/40608/"/>
    <id>http://www.jelech.cn/posts/40608/</id>
    <published>2018-06-17T02:45:53.000Z</published>
    <updated>2018-12-01T13:39:43.295Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><blockquote><p>Hexo可以将markdown+模板文件生成静态html页面，使用它可以快速的建立一个博客。但是这个过程中难免会遇到一些bug，这些bug时常是因为一些错误的操作，或者错误的参数导致的。这篇文章中我会逐一举出我遇到的问题，当然，也希望，如果你遇到的其他的问题，在下方评论区给我留言。</p></blockquote><h2 id="Deployer-not-fund"><a href="#Deployer-not-fund" class="headerlink" title="Deployer not fund  "></a><u>Deployer not fund</u>  <i class="fa fa-bug"><i></i></i></h2><p>这种bug出现是因为hexo找不到_config中提到的deployer。<br>就好比是向一个人指明了让他向北走，但是北方向并没有路，或者这条路被其他因素阻塞了。</p><ul><li>查看bug中提示的文件地址，会标注出出现错误的文件地址，根据这个地址找到错误的node_module，然后删除它，用<code>npm install</code>重装它</li><li>查看_config中的deploy选项，查看是否有写入的参数有错</li><li>查看node_module中的内容，看是否所有需要编译你各种文件的插件已经有了。<br>比如我的博客基础编译需要<code>hexo-renderer-sass</code> <code>hexo-renderer-pug</code></li></ul><h2 id="To-Be-Continue"><a href="#To-Be-Continue" class="headerlink" title="To Be Continue  "></a><u>To Be Continue</u>  <i class="fa fa-bug"><i></i></i></h2>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="BUG文档" scheme="http://www.jelech.cn/categories/BUG%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="刷题" scheme="http://www.jelech.cn/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="acm" scheme="http://www.jelech.cn/tags/acm/"/>
    
  </entry>
  
</feed>
