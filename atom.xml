<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jelech的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.jelech.top/"/>
  <updated>2019-09-14T14:54:08.394Z</updated>
  <id>https://www.jelech.top/</id>
  
  <author>
    <name>Jelech</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux基础篇</title>
    <link href="https://www.jelech.top/posts/34317/"/>
    <id>https://www.jelech.top/posts/34317/</id>
    <published>2019-09-14T04:09:33.000Z</published>
    <updated>2019-09-14T14:54:08.394Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>只有光头才能变强 <strong>这篇文章是转载自 <a href="https://zhuanlan.zhihu.com/p/36801617" target="_blank" rel="noopener">知乎</a></strong> 虽然很基础，但是感觉基础篇的总览很全。文中主要整体是介绍了linux 的常用命令的使用。</p></blockquote><p>这个学期开了Linux的课程了，授课的老师也是比较负责任的一位。总的来说也算是比较系统地学习了一下Linux了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">本文章主要是**总结Linux的基础操作以及一些简单的概念**~如果不熟悉的同学可下个Linux来玩玩(或者去买一个服务器玩玩【学生版的不是很贵】)，对于开发者来说，能使用Linux做一些基本的操作是必要的！</span><br><span class="line"></span><br><span class="line">那么接下来就开始吧，当然了**我的Linux仅仅是入门水平**，如果有错的地方还需请大家多多包涵，并不吝在评论区指出错误~</span><br><span class="line"></span><br><span class="line"># 一、为什么我们要学习Linux</span><br><span class="line"></span><br><span class="line">相信**大部分人**的PC端都是用Windows系统的，那我们为什么要学习Linux这个操作系统呢？？？Windows图形化界面做得这么好，日常基本使用的话，学习成本几乎为零。</span><br><span class="line"></span><br><span class="line">而Linux不一样，**可能**刚接触Linux的人会认为：Linux好麻烦哦，不好玩，都是字符界面。不直观、这个破系统是用来干嘛的~~</span><br><span class="line"></span><br><span class="line">日常用的话Windows是比较顺手的，但是我们要知道的是：我们开发出来的程序**一般都是放在Linux下运行**的。</span><br><span class="line"></span><br><span class="line">那可能就会有人提出疑问了：Windows同样是操作系统，**为啥要放在Linux下，而不放在Windows下呢**？？相信Windows也是可以运行我们写出来的程序的。</span><br><span class="line"></span><br><span class="line">我总结了Linux的**几个优点**：</span><br><span class="line"></span><br><span class="line">1. 免费</span><br><span class="line">2. 很多软件原生是在Linux下运行的，庞大的社区支持，**生态环境好**。</span><br><span class="line">3. **开源**，可被定制，开放，**多用户的网络操作系统**。</span><br><span class="line">4. **相对安全稳定**</span><br><span class="line"></span><br><span class="line">参考资料：</span><br><span class="line"></span><br><span class="line">- [www.zhihu.com/question/19…](https://link.zhihu.com/?target=https%3A//link.juejin.im/%3Ftarget%3Dhttps%253A%252F%252Fwww.zhihu.com%252Fquestion%252F19738282)</span><br><span class="line"></span><br><span class="line">所以开发者**选择了Linux**来跑我们自己写出来的程序。</span><br><span class="line"></span><br><span class="line"># 二、Linux的基础知识</span><br><span class="line"></span><br><span class="line">**Linux系统的组成**：</span><br><span class="line"></span><br><span class="line">1. **linux内核**（linus 团队管理）</span><br><span class="line">2. **shell**：用户与内核交互的接口</span><br><span class="line">3. **文件系统**：ext3、ext4等。windows 有 fat32 、ntfs</span><br><span class="line">4. **第三方应用软件**</span><br><span class="line"></span><br><span class="line">## 2.1Shell的基本知识</span><br><span class="line"></span><br><span class="line">除了Shell、其他的都应该挺好懂的，那么**Shell是什么东西呢**？？？</span><br><span class="line"></span><br><span class="line">&gt; Shell是系统的用户界面，提供了**用户与内核进行交互操作的一种接口**(命令解释器)</span><br><span class="line"></span><br><span class="line">Shell可以执行：</span><br><span class="line"></span><br><span class="line">- **内部命令**</span><br><span class="line">- **应用程序**</span><br><span class="line">- **shell脚本**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![img](../../assets/v2-4fcde8239ff2880bfb031a06d9fe1252_hd.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用`type`命令可以**区分**内部命令和外部命令</span><br><span class="line"></span><br><span class="line">于是乎，我们利用Shell就可以干下面这些事了：</span><br><span class="line"></span><br><span class="line">- **命令行解释(这是用得最多的！)**</span><br><span class="line">- 命令的多种执行顺序</span><br><span class="line">- 通配符（ wild-card characters ）</span><br><span class="line">- 命令补全、别名机制、命令历史</span><br><span class="line">- I/O重定向（ Input/output redirection ）</span><br><span class="line">- 管道（ pipes ）</span><br><span class="line">- 命令替换（ 或$( ) ）</span><br><span class="line">- Shell编程语言（ Shell Script ）</span><br><span class="line"></span><br><span class="line">Shell的主要版本有以下这么多：</span><br><span class="line"></span><br><span class="line">- 我们**常用(默认)的就是bash**(bourne again shell)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![img](../../assets/v2-cd92e075aa7969547ea21350c884f1e6_hd.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用`ps`命令观察正在执行的shell</span><br><span class="line"></span><br><span class="line">![img](../../assets/v2-ec001bde288437d0aef5324c5a638382_hd.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 2.2Linux基本目录结构</span><br><span class="line"></span><br><span class="line">在Windows下，会有**基本的目录结构**的：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![img](../../assets/v2-a91b527c13491c3668b3ab3dd2315810_hd.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![img](../../assets/v2-e7a0c6942a78a3e13f1b5fe0eac2cc2c_hd.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Linux下也不例外了，也是有基本的目录结构的：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![img](../../assets/v2-1f6cdbc3e0765ae8484624eaa2a08ab9_hd.jpg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Linux 文件系统是一个**目录树的结构**，文件系统结构从一个根目录开始，根目录下可以有任意多个文件和子目录，子目录中又可以有任意多个文件和子目录</span><br><span class="line"></span><br><span class="line">- **bin 存放二进制可执行文件(ls,cat,mkdir等)**</span><br><span class="line">- boot 存放用于系统引导时使用的各种文件</span><br><span class="line">- dev 用于存放设备文件</span><br><span class="line">- **etc 存放系统配置文件**</span><br><span class="line">- home 存放所有用户文件的根目录</span><br><span class="line">- lib 存放跟文件系统中的程序运行所需要的共享库及内核模块</span><br><span class="line">- mnt 系统管理员安装临时文件系统的安装点</span><br><span class="line">- **opt 额外安装的可选应用程序包所放置的位置**</span><br><span class="line">- proc 虚拟文件系统，存放当前内存的映射</span><br><span class="line">- **root 超级用户目录**</span><br><span class="line">- sbin 存放二进制可执行文件，只有root才能访问</span><br><span class="line">- tmp 用于存放各种临时文件</span><br><span class="line">- usr 用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录</span><br><span class="line">- var 用于存放运行时需要改变数据的文件</span><br><span class="line"></span><br><span class="line">## 2.3命令基本格式</span><br><span class="line"></span><br><span class="line">`cmd [options] [arguments]`，options称为选项，arguments称为参数</span><br><span class="line"></span><br><span class="line">选项和参数都作为Shell命令执行时的输入，它们**之间用空格分隔开**。</span><br><span class="line"></span><br><span class="line">- Linux是**区分大小**写的</span><br><span class="line"></span><br><span class="line">**一般来说**，后面跟的选项如果**单字符**选项前使用**一个**`减号-`。**单词选项**前使用两个`减号--`</span><br><span class="line"></span><br><span class="line">- 这是一般的情况，有些命令还是不归属这种规律的(相对较少)</span><br></pre></td></tr></table></figure></p><ul><li>例子：<code>ls -a</code>和<code>ls -all</code>，<code>a</code> 单个字符使用一个<code>-</code>，一个单词<code>all</code> 使用两个<code>--</code></li></ul><p>在Linux中，<strong>可执行的文件</strong>也进行了分类：</p><ul><li><strong>内置命令</strong>：出于效率的考虑，将一些常用命令的解释程序<strong>构造在Shell内部</strong>。</li><li><strong>外置命令</strong>：存放在/bin、/sbin目录下的命令</li><li><strong>实用程序</strong>：存放在/usr/bin、/usr/sbin、/usr/share、/usr/local/bin等目录下的实用程序</li><li><strong>用户程序</strong>：用户程序经过编译生成可执行文件后，可作为Shell命令运行</li><li><strong>Shell脚本</strong>：由Shell语言编写的批处理文件，可作为Shell命令运行</li></ul><h2 id="2-4通配符"><a href="#2-4通配符" class="headerlink" title="2.4通配符"></a>2.4通配符</h2><p>学过一些正则表达式的或者有点基础的同学对通配符应该就不陌生的了，在Linux也有通配符(在搜索的时候挺有用的)</p><ul><li>*：匹配任何字符和任何数目的字符</li><li>?：匹配单一数目的任何字符</li><li style="list-style: none"><input type="checkbox"> ：匹配[ ]之内的任意一个字符</li><li>[! ]：匹配除了[! ]之外的任意一个字符，!表示非的意思</li></ul><h2 id="2-5文件的类型"><a href="#2-5文件的类型" class="headerlink" title="2.5文件的类型"></a>2.5文件的类型</h2><p>在Linux下文件的类型有这么多：</p><ul><li><p><strong>普通文件</strong><code>-</code></p></li><li><p><strong>目录</strong><code>d</code></p></li><li><p><strong>符号链接</strong><code>l</code></p></li><li><ul><li>硬链接： 与普通文件没什么不同，inode 都指向同一个文件在硬盘中的区块<ul><li>软链接： 保存了其代表的文件的绝对路径，是另外一种文件，在硬盘上有独立的区块，访问时替换自身路径(简单地理解为 Windows 中常见的快捷方式)。</li></ul></li></ul></li><li><p>字符设备文件 <code>c</code></p></li><li><p>块设备文件<code>b</code></p></li><li><p>套接字<code>s</code></p></li><li><p>命名管道<code>p</code></p></li></ul><p>我们常见的就是普通文件，目录和符号链接。其他的了解一下即可~</p><p>符号链接参考资料：</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//link.juejin.im/%3Ftarget%3Dhttps%253A%252F%252Fwww.jianshu.com%252Fp%252Fdde6a01c4094" target="_blank" rel="noopener">www.jianshu.com/p/dde6a01c4…</a></li></ul><h3 id="2-5-1用户主目录"><a href="#2-5-1用户主目录" class="headerlink" title="2.5.1用户主目录"></a>2.5.1用户主目录</h3><p>可能在网上查阅资料的时候会出现<strong>用户主目录</strong>这么一个名词，那他是什么呢？？？</p><p>前面已经说了，我们的Linux是<strong>多用户的网络系统</strong>！所以，我们可以在Linux下创建多个用户，<strong>每个用户都会有自己专属的空间</strong>。</p><ul><li>所以，在创建用户时，系统管理员<strong>会给每个用户建立一个主目录</strong>，通常在<code>/home/</code>目录下</li><li>比如：用户osmond的主目录为：<code>/home/osmond</code></li></ul><p>用户<strong>对自己主目录的文件拥有所有权</strong>，可以在自己的主目录下进行相关操作。</p><h1 id="三、常用的命令"><a href="#三、常用的命令" class="headerlink" title="三、常用的命令"></a>三、常用的命令</h1><p>上面说了一堆的基础概念，这是给我们敲命令之前打了一点基础，在敲命令的同时也会遇到一些比较重要的知识点的。那就到时候再说说了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 3.1常用的文件、目录操作命令</span><br><span class="line"></span><br><span class="line">这是我们**使用得最多**的命令了，**Linux最基础的命令**！</span><br><span class="line"></span><br><span class="line">- 可用 `pwd`命令查看用户的当前目录</span><br><span class="line">- 可用 `cd` 命令来切换目录</span><br><span class="line">- `.`表示当前目录</span><br><span class="line">- `..` 表示当前目录的上一级目录（父目录）</span><br><span class="line">- `-`表示用 cd 命令切换目录**前**所在的目录</span><br><span class="line">- `~` 表示**用户主目录**的绝对路径名</span><br><span class="line"></span><br><span class="line">**绝对路径：**</span><br><span class="line"></span><br><span class="line">- 以斜线（/）开头 ，描述到文件位置的**完整说明** ，任何时候你想指定文件名的时候都可以使用</span><br><span class="line"></span><br><span class="line">**相对路径 ：**</span><br><span class="line"></span><br><span class="line">- 不以斜线（/）开头 ，指定**相对于你的当前工作目录而言的位置** ，可以被用作指定文件名的简捷方式</span><br><span class="line"></span><br><span class="line">tips:**输入命令的时候要常用tab键来补全**</span><br><span class="line"></span><br><span class="line">- `ls`：显示文件或目录信息</span><br><span class="line">- `mkdir`：当前目录下创建一个空目录</span><br><span class="line">- `rmdir`：要求目录为空</span><br><span class="line">- `touch`：生成一个空文件或更改文件的时间</span><br><span class="line">- `cp`：复制文件或目录</span><br><span class="line">- `mv`：移动文件或目录、文件或目录改名</span><br><span class="line">- `rm`：删除文件或目录</span><br><span class="line">- `ln`：建立链接文件</span><br><span class="line">- `find`：查找文件</span><br><span class="line">- `file/stat`：查看文件类型或文件属性信息</span><br><span class="line">- `cat：`查看文本文件内容</span><br><span class="line">- `more：`可以分页看</span><br><span class="line">- `less：`不仅可以分页，还可以方便地搜索，回翻等操作</span><br><span class="line">- `tail -10`： 查看文件的尾部的10行</span><br><span class="line">- `head -20`：查看文件的头部20行</span><br><span class="line">- `echo`：把内容重定向到指定的文件中 ，有则打开，无则创建</span><br><span class="line">- `管道命令 |` ：将前面的结果给后面的命令，例如：`ls -la | wc`，将ls的结果加油wc命令来统计字数</span><br><span class="line">- `重定向 &gt; 是覆盖模式，&gt;&gt; 是追加模式`，例如：`echo &quot;Java3y,zhen de hen xihuan ni&quot; &gt; qingshu.txt`把左边的输出放到右边的文件里去</span><br><span class="line"></span><br><span class="line">学了这些命令我们能干嘛？**其实就是在Windows下复制文件、粘贴文件、创建文件、查看文件这几种**</span><br></pre></td></tr></table></figure></p><h3 id="3-1-1常用的文件、目录操作练习题"><a href="#3-1-1常用的文件、目录操作练习题" class="headerlink" title="3.1.1常用的文件、目录操作练习题"></a>3.1.1常用的文件、目录操作练习题</h3><p>巩固一下基础，<strong>来做做题目：</strong></p><ul><li>（1）Linux的shell程序默认是<code>bash 程序</code>；</li><li>（2）Linux命令格式包含三个部分，分别是： <code>命令</code> 、 <code>选项</code> 、 <code>参数</code> ；</li><li>（3）Linux命令选项前为单个减号（-），后面一般为 <code>单字符</code> ，选项前为双减号（–），后面一般为 <code>单词</code>；</li><li>（4）Linux命令中使用的通配符有 <code>？ * []</code> ；</li><li>（5）命令 ls /usr/bin/w* 的效果是 <code>列出指定目录下的所有以w开头的文件或目录</code> ；</li><li>（6）命令 ls /usr/bin/w?? 的效果是 <code>列出指定目录下的以w开头名称长度为3的所有文件或目录</code> ；</li><li>（7）命令 ls /usr/bin/[xyz]* 的效果是 <code>列出指定目录下的文件名以x或y或z开头的所有文件或目录</code> ；</li><li>（8）命令 ls /usr/bin/[!a-h]* 的效果是 <code>列出指定目录下的文件名不以a到h区间字母开头的所有文件或目录</code> ；</li><li>（9）目录操作时，“.” 表示 <code>当前目录</code> ；</li><li>（10）目录操作时，“..” 表示 <code>上一级目录</code> ；</li><li>（11）目录操作时，“-” 表示 <code>上一次工作目录</code> ；</li><li>（12）目录操作时，“~” 表示 <code>用户主目录</code> ；</li><li>（13）命令ln可以建立文件链接，这种链接分为： <code>硬链接</code> 和 <code>软链接</code> ；</li><li>（14）命令touch可以改变文件的三种时间，分别是： <code>access time</code> 、 <code>modify time</code> 、 <code>change time</code> ；</li></ul><blockquote><p>进入/tmp目录，建立一个文件，goldXX（XX为学号的末两位），查看文件的时间</p></blockquote><p><img src="../../assets/v2-083b189266df3b4763c61bbc7660f6e1_hd.jpg" alt="img"></p><blockquote><p>在账户的主目录中，建立一个dog目录，进入dog目录后，建立一个catXX（XX为学号的末两位）目录,进入catXX目录，显示当前目录；然后返回上一级目录，删除catXX目录；</p></blockquote><p><img src="../../assets/v2-8a1edbd12153628e63823d7c2e60a215_hd.jpg" alt="img"></p><blockquote><p>复制/etc/passwd文件到账户主目录，修改账户主目录下passwd为passwdXX（XX为学号的末两位）</p></blockquote><p><img src="../../assets/v2-6ea2d285a98552810b985d3ed1d22468_hd.jpg" alt="img"></p><blockquote><p>查找文件名叫做zcat的文件；复制该文件到/tmp目录；用长格式列出该文件；然后删除/tmp目录下的所有文件，并检查文件是否已被删除</p></blockquote><p><img src="../../assets/v2-c32992a735b62cf8ff3d7547a3f70c60_hd.jpg" alt="img"></p><blockquote><p>复制/etc/hosts文件到账户主目录下；在账户主目录中建立一个硬链接文件（文件名为hostsYYY（YYY为学生姓名拼音缩写）），链接到主目录下的hosts文件；分别查看hosts和hostsYYY的文件的inode信息</p></blockquote><p><img src="../../assets/v2-d464ba90e2a8df38d62e77fac3577a44_hd.jpg" alt="img"></p><blockquote><p>复制/usr/bin/vdir文件到账户主目录下；在账户主目录中建立一个软链接文件（文件名为newdir），链接到主目录下的vdir文件；分别查看vdir和newdir的文件的inode信息</p></blockquote><p><img src="../../assets/v2-b50e7976668eb88b0e873a985aa596e3_hd.jpg" alt="img"></p><blockquote><p>用长格式列出目录/usr/bin目录下的所有文件，输出重新定向到文件outXX（XX为学生学号末两位），检查结果；用长格式列出目录/etc目录下的所有文件，输出结果补充到文件outXX末尾</p></blockquote><p><img src="../../assets/v2-e49b9ac69b467c80f54d02f66c5bac2e_hd.jpg" alt="img"></p><blockquote><p>用长格式列出/usr/bin目录下的所有文件，通过管道与more命令连接，实现对文件列表的浏览</p></blockquote><p><img src="../../assets/v2-663ec64831c48ac2d3c1937a41a18efa_hd.jpg" alt="img"></p><blockquote><p><code>&gt;和&gt;&gt;</code>有何区别？</p></blockquote><p>答：<code>&gt;</code>是<strong>覆盖</strong>方式重定向到新的文件；<code>&gt;&gt;</code>是以<strong>补充</strong>方式，添加到原文件的末尾。</p><blockquote><p>通过管道和more命令，浏览文件列表方便在哪里？</p></blockquote><p>答：对于文件列表超出一个屏幕显示的情况，这种方式可以<strong>分屏浏览，比较方便</strong>。</p><h2 id="3-2文件打包和压缩命令"><a href="#3-2文件打包和压缩命令" class="headerlink" title="3.2文件打包和压缩命令"></a>3.2文件打包和压缩命令</h2><p>在Windows操作系统下，我们会使用WinRAR或者快压等等的压缩软件来进行压缩或者解压。</p><p>在Linux下<strong>当然也存在压缩或解压的操作咯</strong>，下面我们就来学习一下在Linux下是怎么压缩和解压的！</p><p><img src="../../assets/v2-ac115c134dd032a5435e7f9cc5db65a9_hd.jpg" alt="img"></p><p><img src="../../assets/v2-6efeebf101ba6c482b29a74e7b1b5f11_hd.jpg" alt="img"></p><p>压缩的方式也是有好几种，我们<strong>常用</strong>的有下面这三种：</p><ul><li>gzip</li><li>bzip2</li><li>tar</li></ul><p>常用的压缩的命令就有：</p><ul><li><code>gzip filename</code></li><li><code>bzip2 filename</code></li><li><code>tar -czvf filename</code></li></ul><p>常用的解压命令有：</p><ul><li><code>gzip -d filename.gz</code></li><li><code>bzip2 -d filename.bz2</code></li><li><code>tar -xzvf filename.tar.gz</code></li></ul><h2 id="3-3正则表达式-grep"><a href="#3-3正则表达式-grep" class="headerlink" title="3.3正则表达式+grep"></a>3.3正则表达式+grep</h2><p>上面我们已经学过了<code>cat、more、less、tail</code>这些查看文本文件的命令了，但是我想<strong>快速查看这个文本文件下的某些关键字是否存在</strong>，那怎么办？？？</p><p>在Windows下就比较简单的，几乎所有的文本编辑器(记事本)都支持<code>CTRL+F</code>，往里面输入关键字就可查找出来：</p><p><img src="../../assets/v2-6c6f7925d93540e8ca587ae49d9ba206_hd.jpg" alt="img"></p><p>那在Linux下，没有图形界面，没有<code>CTRL+F</code>的情况下，<strong>如果不懂一些命令的话，那还真是难找对应的字符出来</strong>。下面我就来说说如何快速<strong>查找一个文本文件下的某些字符</strong>。</p><h3 id="3-3-1正则表达式"><a href="#3-3-1正则表达式" class="headerlink" title="3.3.1正则表达式"></a>3.3.1正则表达式</h3><p>首先我们就来说说正则表达式，如果接触过的同学就知道：这玩意并不好记。一旦不用就很容易就忘记了，所以只能在用的时候查查了~~~所以下面我就直接给出一些规则了，不多说啦。</p><p><img src="../../assets/v2-ed48988ece4c23cd1ad865e4b5bb87d8_hd.jpg" alt="img"></p><p><img src="../../assets/v2-dc43daa14f6beb7a20d9abbee2bdc8b8_hd.jpg" alt="img"></p><h3 id="3-3-2grep命令"><a href="#3-3-2grep命令" class="headerlink" title="3.3.2grep命令"></a>3.3.2grep命令</h3><p>grep(global search regular expression)是一个<strong>强大的文本搜索工具</strong>。grep 使用正则表达式搜索文本，并把匹配的行打印出来。</p><p>格式：<code>grep [options] PATTERN [FILE...]</code></p><ul><li>PATTERN 是查找条件：<strong>可以是普通字符串、可以是正则表达式</strong>，通常用单引号将RE括起来。</li><li>FILE 是要查找的文件，可以是用空格间隔的多个文件，也可是使用Shell的通配符在多个文件中查找PATTERN，省略时表示在标准输入中查找。</li><li>grep命令不会对输入文件进行任何修改或影响，可以使用输出重定向将结果存为文件</li></ul><p>例子：</p><ul><li><p>在文件 myfile 中查找包含字符串 mystr的行</p></li><li><ul><li><code>grep -n mystr myfile</code></li></ul></li><li><p>显示 myfile 中第一个字符为字母的所有行</p></li><li><ul><li><code>grep &#39;^[a-zA-Z]&#39; myfile</code></li></ul></li><li><p>在文件 myfile 中查找首字符不是 # 的行（<strong>即过滤掉注释行</strong>）</p></li><li><ul><li><code>grep -v &#39;^#&#39; myfile</code></li></ul></li><li><p>列出/etc目录（包括子目录）下所有文件内容中包含字符串“root”的文件名</p></li><li><ul><li><code>grep -lr root /etc/*</code></li></ul></li></ul><blockquote><p>用grep查找/etc/passwd文件中以a开头的行，要求显示行号；查找/etc/passwd文件中以login结束的行；</p></blockquote><p><img src="../../assets/v2-3a50ef99672b7609fbd2413133d136d4_hd.jpg" alt="img"></p><h2 id="3-4几种提高工作效率的方法"><a href="#3-4几种提高工作效率的方法" class="headerlink" title="3.4几种提高工作效率的方法"></a>3.4几种提高工作效率的方法</h2><ul><li><p><strong>自动补全命令</strong></p></li><li><ul><li>TAB键</li></ul></li><li><p><strong>历史命令</strong></p></li><li><ul><li>上下箭头键</li></ul></li><li><p><strong>别名alias</strong></p></li></ul><p>这里感觉要说说的就只有别名alias了，我们下面看看例子就懂了！</p><blockquote><p>显示shell当前已经定义的别名；执行其中的两个定义别名的命令；定义一个别名grep，要求其采用彩色方式显示结果</p></blockquote><p><img src="../../assets/v2-8253211dd5d05c2af9f6837f3f7fe9ef_hd.jpg" alt="img"></p><p><img src="../../assets/v2-7d2d2d68cf968e11dc1141ce2aff1047_hd.jpg" alt="img"></p><h2 id="3-5Shell变量-和-Shell环境"><a href="#3-5Shell变量-和-Shell环境" class="headerlink" title="3.5Shell变量 和 Shell环境"></a>3.5Shell变量 和 Shell环境</h2><p>在Windows下有用户的环境变量，系统的环境变量。在Linux一样也是有的。</p><p><img src="../../assets/v2-ccb5b8c6ec82e3cc9adb2f5988c52205_hd.jpg" alt="img"></p><p>Shell 变量大致可以<strong>分为三类</strong>：</p><ul><li><p><strong>内部变量</strong>：由系统提供，用户只能使用不能修改。</p></li><li><ul><li>?<ul><li>GROUPS</li></ul></li></ul></li><li><p><strong>环境变量</strong>：这些变量决定了用户工作的环境，它们不需要用户去定义，可以直接在 shell 中使用，其中某些变量用户可以修改。</p></li><li><p><strong>用户变量</strong>：由用户建立和修改，在 shell 脚本编写中会经常用到。</p></li><li><ul><li><p>变量赋值（定义变量）</p><ul><li><ul><li><code>varName=Value</code><ul><li><code>export varName=Value</code></li></ul></li></ul></li><li><p>引用变量<code>$varName</code></p></li></ul></li></ul></li></ul><p>Shell变量的<strong>作用域</strong>：</p><ul><li><strong>局部变量</strong>的作用范围仅仅<strong>限制在其命令行所在的Shell或Shell脚本文件中</strong>；</li><li><strong>全局变量</strong>的作用范围则包括<strong>本Shell进程及其所有子进程</strong>。</li><li>局部变量与全局变量<strong>互换</strong>：可以使用 <code>export</code> 内置命令将局部变量设置为全局变量。 可以使用 <code>export</code> 内置命令将全局变量设置为局部变量。</li></ul><p><strong>export命令</strong>：</p><ul><li><p><strong>显示</strong>当前Shell可见的全局变量</p></li><li><ul><li><code>export [-p]</code></li></ul></li><li><p><strong>定义变量值的同时声明为全局变量</strong>。</p></li><li><ul><li><code>export &lt;变量名1=值1&gt; [&lt;变量名2=值2&gt; ...]</code></li></ul></li><li><p>声明已经赋值的某个（些）<strong>局部变量为全局变量</strong>。</p></li><li><ul><li><code>export &lt;变量名1&gt; [&lt;变量名2&gt; ...]</code></li></ul></li><li><p>声明已经赋值的某个（些）<strong>全局变量为局部变量</strong>。</p></li><li><ul><li><code>export -n &lt;变量名1&gt; [&lt;变量名2&gt; ...]</code></li></ul></li></ul><p>Shell环境变量：</p><ul><li>环境变量定义 Shell 的<strong>运行环境</strong>，保证 Shell 命令的正确执行。</li><li>Shell用环境变量来确定查找路径、注册目录、终端类型、终端名称、用户名等。</li><li>所有环境变量<strong>都是全局变量</strong>（即可以传递给 Shell 的子进程），并可以由用户重新设置。</li></ul><p><img src="../../assets/v2-5e3a232eb91bb000cc4171efb1366c37_hd.jpg" alt="img"></p><p><strong>Shell变量：查询、显示和取消</strong>：</p><ul><li><p>显示当前已经定义的所有变量</p></li><li><ul><li>所有<strong>环境变量</strong>：<code>env</code><ul><li>所有<strong>变量和函数</strong>（包括环境变量） ：<code>set</code></li></ul></li></ul></li><li><p>显示某（些）个变量的值</p></li><li><ul><li><code>echo $NAME1 [$NAME2 ……]</code></li></ul></li><li><p>取消变量的声明或赋值</p></li><li><ul><li><code>unset &lt;NAME&gt;</code></li></ul></li></ul><h3 id="3-5-1Shell变量-和-Shell环境练习题"><a href="#3-5-1Shell变量-和-Shell环境练习题" class="headerlink" title="3.5.1Shell变量 和 Shell环境练习题"></a>3.5.1Shell变量 和 Shell环境练习题</h3><blockquote><p>定义Shell变量stuXX（XX为学生学号末两位），初值为学生姓名全拼，用echo命令显示stuXX变量的值；用unset命令取消stuXX变量，检查结果；用env命令观察当前有哪些已经定义好的shell环境变量</p></blockquote><p><img src="../../assets/v2-3038910d6d732c229e292511f5ba2e33_hd.jpg" alt="img"></p><p><img src="../../assets/v2-bc18fb4e4ed1509ba7725a0259cc3e35_hd.jpg" alt="img"></p><blockquote><p>Shell环境变量的值是否可以修改？为什么？</p></blockquote><p>答：环境变量的值一般情况下，可以修改。但一定要<strong>慎重修改</strong>，因为一旦修改错误，对shell正常运行造成严重影响，甚至导致shell无法运行。</p><h1 id="四、VI编辑器"><a href="#四、VI编辑器" class="headerlink" title="四、VI编辑器"></a>四、VI编辑器</h1><p>相信没有用过Linux的同学在看一些段子的时候都会看到过两个编辑器：</p><ul><li>vim</li><li>emacs</li></ul><p>下面我们学习如何简单使用vi。vi 是 “Visual interface” 的简称，它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且<strong>用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的</strong>。</p><ul><li>vi可以看做成我们Windows下的记事本</li><li>vim 即 Vi IMproved，vi 克隆版本之一</li></ul><p>使用Vi来编辑文件：</p><p><img src="../../assets/v2-0901ed18ce2beeb7ef3f22d23ad61c81_hd.jpg" alt="img"></p><p>Vi有三种模式：</p><p><img src="../../assets/v2-0faad2c75ff2da130fb93c6452dce016_hd.jpg" alt="img"></p><h2 id="4-1普通模式"><a href="#4-1普通模式" class="headerlink" title="4.1普通模式"></a>4.1普通模式</h2><ul><li><code>G</code>用于直接跳转到文件尾</li><li><code>ZZ</code>用于存盘退出Vi</li><li><code>ZQ</code>用于不存盘退出Vi</li><li><code>/和？</code>用于查找字符串</li><li><code>n</code>继续查找下一个</li><li><code>yy</code>复制一行</li><li><code>p</code>粘帖在下一行，P粘贴在前一行</li><li><code>dd</code>删除一行文本</li><li><code>x</code>删除光标所在的字符</li><li><code>u</code>取消上一次编辑操作（undo）</li></ul><h2 id="4-2插入模式"><a href="#4-2插入模式" class="headerlink" title="4.2插入模式"></a>4.2插入模式</h2><p>在 Normal 模式下输入插入命令 <code>i、 a 、 o</code>进入insert模式。用户输入的任何字符都被vim<strong>当做文件内容保存起来</strong>，并将其显示在屏幕上。</p><ul><li>在文本输入过程中，若想回到Normal模式下，按 Esc 键即可。</li></ul><h2 id="4-3命令行模式"><a href="#4-3命令行模式" class="headerlink" title="4.3命令行模式"></a>4.3命令行模式</h2><p>Normal 模式下，用户按冒号 <code>:</code>即可进入 Command 模式，此时 vim 会在显示窗口的最后一行 (屏幕的最后一行) 显示一个 “:” 作为 Command 模式的提示符，等待输入命令。</p><ul><li><code>:w</code> 保存当前编辑文件，但并不退出</li><li><code>:w</code> newfile 存为另外一个名为 “newfile” 的文件</li><li><code>:wq</code> 用于存盘退出Vi</li><li><code>:q!</code> 用于不存盘退出Vi</li><li><code>:q</code>用于直接退出Vi （未做修改）</li></ul><p><strong>设置Vi环境:</strong></p><ul><li>:set autoindent 缩进,常用于程序的编写</li><li>:set noautoindent 取消缩进</li><li>:set number 在编辑文件时显示行号</li><li>:set nonumber 不显示行号</li><li>:set tabstop=value 设置显示制表符的空格字符个数</li><li>:set 显示设置的所有选项</li><li>:set all 显示所有可以设置的选项</li></ul><h2 id="4-4Vi练习题"><a href="#4-4Vi练习题" class="headerlink" title="4.4Vi练习题"></a>4.4Vi练习题</h2><blockquote><p>在用户主目录下，执行vi程序，编辑文件install.log；移动光标到第10行，第五个字符；按大写字母G，达到文件末尾；不存盘退出；</p></blockquote><p><img src="../../assets/v2-2285af10a7d22ef7e369051ac1f3b8dc_hd.jpg" alt="img"></p><p><img src="../../assets/v2-6ef5e936a6eedef03c0e0b926d943599_hd.jpg" alt="img"></p><blockquote><p>在用户主目录下，执行vi程序，编辑文件install.log；用/命令查找字符串sudo，复制包含字符串sudo的行</p></blockquote><p><img src="../../assets/v2-a711ded30ed171b30b8357e8817984a8_hd.jpg" alt="img"></p><blockquote><p>在用户主目录下，执行vi程序，编辑文件install.log；进入命令模式，设置显示行号；用？命令查找字符串openssh，用命令n查找下一个</p></blockquote><p><img src="../../assets/v2-74dfd3d28a7286c32ccc06d40e5c7ccb_hd.jpg" alt="img"></p><p><img src="../../assets/v2-98f6169c12ff72d84a148ff8a7535aca_hd.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="https://www.jelech.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>游戏服务器源码学习笔记</title>
    <link href="https://www.jelech.top/posts/34423/"/>
    <id>https://www.jelech.top/posts/34423/</id>
    <published>2019-08-10T09:09:33.000Z</published>
    <updated>2019-09-14T14:31:59.287Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章暂时不公开的哦&lt;/br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="游戏服务器" scheme="https://www.jelech.top/tags/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>短到超乎想象！！！</title>
    <link href="https://www.jelech.top/posts/30301/"/>
    <id>https://www.jelech.top/posts/30301/</id>
    <published>2019-05-25T13:09:57.000Z</published>
    <updated>2019-05-26T02:51:51.936Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="快排短到了15行"><a href="#快排短到了15行" class="headerlink" title="快排短到了15行"></a>快排短到了15行</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> curPos = l, tempVal = nums[l]; <span class="comment">// curPos代表前面的数都是小于nums[l]的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] &lt; tempVal)</span><br><span class="line">            swap(nums[i], nums[++curPos]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums[l], nums[curPos]);</span><br><span class="line">    quickSort(nums, l, curPos - <span class="number">1</span>);</span><br><span class="line">    quickSort(nums, curPos + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="大数乘法短到了22行"><a href="#大数乘法短到了22行" class="headerlink" title="大数乘法短到了22行"></a>大数乘法短到了22行</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">ans</span><span class="params">(<span class="string">""</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiBigIntegerDFS</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> num, <span class="keyword">const</span> <span class="built_in">string</span> &amp;a, <span class="keyword">const</span> <span class="built_in">string</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>, k = i, tempa, tempb;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = i, j = <span class="number">0</span>; k &gt; <span class="number">0</span>; k--, j++) &#123; <span class="comment">// 把所有个数位长度相等的加一起，得到这一位的答案</span></span><br><span class="line">        tempa = tempb = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= b.size()) tempb = b[k - <span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; a.size()) tempa = a[j] - <span class="string">'0'</span>;</span><br><span class="line">        num += tempa * tempb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i) multiBigIntegerDFS(i - <span class="number">1</span>, num / <span class="number">10</span>, a, b);</span><br><span class="line">    ans += num % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiBigInteger</span><span class="params">(<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(*a.begin() == <span class="string">'-'</span>) flag *= <span class="number">-1</span>, a.erase(a.begin());<span class="comment">// 处理正负号</span></span><br><span class="line">    <span class="keyword">if</span>(*b.begin() == <span class="string">'-'</span>) flag *= <span class="number">-1</span>, b.erase(b.begin());</span><br><span class="line">    multiBigIntegerDFS(a.size() + b.size() - <span class="number">1</span>, <span class="number">0</span>, a, b);</span><br><span class="line">    <span class="keyword">while</span>(*ans.begin() == <span class="string">'0'</span>) ans.erase(ans.begin()); <span class="comment">// 处理前导0</span></span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">-1</span>) ans.insert(ans.begin(), <span class="string">'-'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="算法" scheme="https://www.jelech.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法" scheme="https://www.jelech.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>今日信息</title>
    <link href="https://www.jelech.top/posts/58264/"/>
    <id>https://www.jelech.top/posts/58264/</id>
    <published>2019-05-17T12:31:17.000Z</published>
    <updated>2019-05-17T08:22:30.403Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.jelech.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.jelech.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习（一）</title>
    <link href="https://www.jelech.top/posts/4539/"/>
    <id>https://www.jelech.top/posts/4539/</id>
    <published>2019-05-08T03:15:09.000Z</published>
    <updated>2019-05-08T04:26:55.961Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="Redis-key-value数据库（一）"><a href="#Redis-key-value数据库（一）" class="headerlink" title="Redis key-value数据库（一）"></a>Redis key-value数据库（一）</h1><blockquote><p>基础使用移植到单独的一篇文章中：《速查Redis》</p></blockquote><h2 id="数据结构与对象"><a href="#数据结构与对象" class="headerlink" title="数据结构与对象"></a>数据结构与对象</h2><blockquote><p>redis中实现了一些redis自用的、快速的数据结构。他们组成了redis内部的运行结构，也展现了redis是如何存储key-value值的。他们分别为：</p></blockquote><ul><li>简单动态字符串 | 对c语言字符串的封装，优化了许多特性</li><li>链表 | 双向链表</li><li>字典 | 哈希字典，可以进行扩展收缩操作</li><li>跳跃表 | 快查节点，有序集合的底层与内部数据结构中使用</li><li>整数集合 | 集合键的底层实现，只支持升级操作</li><li>压缩列表 | 列表键与哈希键的底层实现</li><li>对象 | 对以上结构进行包装，每个两种以上的编码方式，自带内存回收机制</li></ul><blockquote><p>之后再详细更新数据结构的内容</p></blockquote><h2 id="单机数据库操作"><a href="#单机数据库操作" class="headerlink" title="单机数据库操作"></a>单机数据库操作</h2><blockquote><p>基础使用移植到单独的一篇文章中：《速查Redis》</p></blockquote><ol><li>数据库由dict和expires两个字典构成，dict负责保存键值对，expires负责键的过期时间</li><li>主服务器发现过期键后会给所有的从服务器发送DEL命令，显式地删除键。而从服务器发现过期键后并不会删除，而是等待主节点发来DEL命令</li></ol><h4 id="过期键的删除策略"><a href="#过期键的删除策略" class="headerlink" title="过期键的删除策略"></a>过期键的删除策略</h4><ul><li><p>定时删除：（主动）创建一个定时器，让键在<strong>过期时间来临</strong>时，立即对键进行删除操作</p></li><li><p>惰性删除：（被动）放任过期的键不管，只有在对键进行访问前，进行检查。如果过期，则删除并返回null</p></li><li><p>定期删除：（主动）<strong>每隔一段时间</strong>对数据库进行全盘检查，删除过期的键</p><p>  而我们常使用的是第二个与第三个的结合</p></li></ul><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><blockquote><p>Redis是保存在内存上的数据库，如果断电，则数据会被完全清除。为了持久化数据，出现了RDB持久化技术。他的工作方法是对内存上的键值对数据进行二进制压缩后，写入到磁盘中。</p></blockquote><p><code>SAVE</code>停止redis现在的工作，进行RDB保存，数据量大的时候会让数据库怠机</p><p><code>BGSAVE</code>创建一个子进程进行RDB保存，父进程继续进行数据接收返回操作，但操作的数据会暂时保存在RDB缓存空间</p><p><strong>自动保存</strong>则需要在配置文件中设置save选线项<br>比如<br>save 900 1代表如果900秒之内有进行1次操作，就进行保存。当然，他是可以设置多个的。</p><p>如果不设置，redis会有默认的<br><code>save 900 1</code><br><code>save 300 10</code><br><code>save 60 10000</code></p><p>​    </p><p>dirty计数器记录了距离上一次save/bgsave操作经历了多少次操作，lastsave保存的是时间</p><h4 id="RDB文件的结构"><a href="#RDB文件的结构" class="headerlink" title="RDB文件的结构"></a>RDB文件的结构</h4><table><thead><tr><th style="text-align:left">REDIS</th><th>db_version</th><th>databases</th><th>EOF</th><th>check_sum</th></tr></thead><tbody><tr><td style="text-align:left">5字节</td><td>4字节</td><td>数据库大小字节</td><td>1字节</td><td>8字节</td></tr><tr><td style="text-align:left">字符’REDIS’</td><td>0006版本号</td><td>数据库号与保存的键值对</td><td>结束符</td><td>校验和</td></tr><tr><td style="text-align:left"></td><td></td><td>SELECTDB 表示接下来要读一个数据库号</td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td>db_number 数据库号</td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td>key_value_pairs键值对<br><code>[EXPIRESTIME_MS/]TYPE/key/values</code></td><td></td></tr></tbody></table><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><blockquote><p>翻书更新累了。。休一下</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="redis" scheme="https://www.jelech.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>关于高并发和秒杀系统的讨论</title>
    <link href="https://www.jelech.top/posts/10156/"/>
    <id>https://www.jelech.top/posts/10156/</id>
    <published>2019-05-01T11:44:47.000Z</published>
    <updated>2019-05-01T13:35:26.528Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><p>此次高并发的讨论先局限于对于设计一个大量请求的秒杀系统。</p><h4 id="何为高并发"><a href="#何为高并发" class="headerlink" title="何为高并发"></a>何为高并发</h4><ul><li>在用户访问请求时，对于一个单机单核的服务器的接受的线性的。那么如果有大量的用户同时访问，那么此时的服务器就需要短时间内接受和处理大量请求。而解决这样的问题，我们可以通过启用多个线/进程，并发地解决问题。</li><li>但是对于这个问题来说，一个电脑的CPU是有限的，那么再多一点的进程，最终也同样会造成服务器的压力。</li></ul><blockquote><p>像12306、各种电商平台的秒杀活动那样。对于一个有限的资源，也需要考虑资源的增减。</p></blockquote><h4 id="讨论的问题"><a href="#讨论的问题" class="headerlink" title="讨论的问题"></a>讨论的问题</h4><ol><li><p>高并发的瓶颈（一）程序设计</p><p> 服务器的优化可以分为三个方向，请求接收、请求处理、请求返回。</p><p> 请求处理中包括数据查询、数据处理。第一，对于高并发的秒杀系统来说，许多数据都是热数据，会被多个用户多次访问。那么这些数据就应该被放到缓存中，包括但不限于redis(yes，非常好用)。第二，数据处理依赖的是服务器程序的优化，这就要看算法的性能了，建议的是能尽量少传数据，少复制数据。</p></li><li><p>高并发的瓶颈（二）服务器CPU</p><p> 无论程序优化再多，一个服务器的CPU资源是有上限的。</p><p> 解决的一方面可以直接增加服务器的数量以1:1线性增加并发度，这时候就需要设计集群，但是<u>切记</u>拒绝假的分布式，比如：前端服务器是可以独立存在的，但是都依赖集中的一个数据库或者缓存系统，最后，一定是集中的那个数据库或者缓存系统受不了，同样无法做到一个好的分布式。</p><p> 第二方面，逻辑处理中，把速度快且提前中断的逻辑放在最前面，比如：验证登录，验证问答。做分布式方案的时候，尽量把资源调用放在最近的地方。</p><p> 第三方面，不要出现跨机房网络请求，不要出现跨机房网络请求，不要出现跨机房网络请求，重要的事情说三遍。</p></li><li><p>保证库存原子性</p><p> 可以用数据库操作，由于使用了锁，满足了原子性。但是性能差，访问慢。</p><p> 可以用消息队列，订单全部放到一个消息队列中，服务器一个一个进行处理。但用户等待时间太长，不同请求会因前面的请求等待很久。</p><p> <u><strong>redis递减</strong></u>性能极好。redis-&gt;incrby(‘product’, -1)操作首先是原子性的(应该说redis的操作都是)，并且内存中访问使得性能很好，再加上redis又自带集群操作。何乐而不为？</p></li><li><p>集群数据一致性</p><p> 现在一种解决办法是通过把多个资源散列到多个集群中，再在外部加一个中控服务来平衡多个集群的资源，这样就能解决出现不同集群的访问差异过大导致的数据差异过多</p></li><li><p>机器人抢怎么办</p><p> 添加IP限制判断，强制用户登录，提交订单时引入各种验证码、问答。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="技术探析" scheme="https://www.jelech.top/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E6%9E%90/"/>
    
    
      <category term="redis" scheme="https://www.jelech.top/tags/redis/"/>
    
      <category term="高并发" scheme="https://www.jelech.top/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>sscanf中的正则表达式</title>
    <link href="https://www.jelech.top/posts/20161/"/>
    <id>https://www.jelech.top/posts/20161/</id>
    <published>2019-03-10T13:09:33.000Z</published>
    <updated>2019-03-11T02:09:40.446Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h3 id="1-简易用法"><a href="#1-简易用法" class="headerlink" title="1.简易用法"></a>1.简易用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;china beijing 123&quot;;</span><br><span class="line">ret = sscanf(string, &quot;%s %s %d&quot;, buf1, buf2, &amp;digit);</span><br><span class="line">printf(&quot;1.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;1.ret=%d, buf1=%s, buf2=%s, digit=%d\n\n&quot;, ret, buf1, buf2, digit);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>1.ret=3, buf1=china, buf2=beijing, digit=123</li><li>可以看出,sscanf的返回值是读取的参数个数</li></ul><h3 id="2-取指定长度的字符串"><a href="#2-取指定长度的字符串" class="headerlink" title="2.取指定长度的字符串"></a>2.取指定长度的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;123456789&quot;;</span><br><span class="line">sscanf(string, &quot;%5s&quot;, buf1);</span><br><span class="line">printf(&quot;2.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;2.buf1=%s\n\n&quot;, buf1);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>2.buf1=12345</li></ul><h3 id="3-取到指定字符为止的字符串"><a href="#3-取到指定字符为止的字符串" class="headerlink" title="3.取到指定字符为止的字符串"></a>3.取到指定字符为止的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;123/456&quot;;</span><br><span class="line">sscanf(string, &quot;%[^/]&quot;, buf1);</span><br><span class="line">printf(&quot;3.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;3.buf1=%s\n\n&quot;, buf1);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>3.buf1=123</li></ul><h3 id="4-取到指定字符集为止的字符串"><a href="#4-取到指定字符集为止的字符串" class="headerlink" title="4.取到指定字符集为止的字符串"></a>4.取到指定字符集为止的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;123abcABC&quot;;</span><br><span class="line">sscanf(string, &quot;%[^A-Z]&quot;, buf1);</span><br><span class="line">printf(&quot;4.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;4.buf1=%s\n\n&quot;, buf1);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>4.buf1=123abc</li></ul><h3 id="5-取仅包含指定字符集的字符串"><a href="#5-取仅包含指定字符集的字符串" class="headerlink" title="5.取仅包含指定字符集的字符串"></a>5.取仅包含指定字符集的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;0123abcABC&quot;;</span><br><span class="line">sscanf(string, &quot;%[0-9]%[a-z]%[A-Z]&quot;, buf1, buf2, buf3);</span><br><span class="line">printf(&quot;5.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;5.buf1=%s, buf2=%s, buf3=%s\n\n&quot;, buf1, buf2, buf3);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>5.buf1=123, buf2=abc, buf3=ABC</li></ul><h3 id="6-获取指定字符中间的字符串"><a href="#6-获取指定字符中间的字符串" class="headerlink" title="6.获取指定字符中间的字符串"></a>6.获取指定字符中间的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;ios&lt;android&gt;wp7&quot;;</span><br><span class="line">sscanf(string, &quot;%*[^&lt;]&lt;%[^&gt;]&quot;, buf1);</span><br><span class="line">printf(&quot;6.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;6.buf1=%s\n\n&quot;, buf1);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>6.buf1=android</li></ul><h3 id="7-指定要跳过的字符串"><a href="#7-指定要跳过的字符串" class="headerlink" title="7.指定要跳过的字符串"></a>7.指定要跳过的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;iosVSandroid&quot;;</span><br><span class="line">sscanf(string, &quot;%[a-z]VS%[a-z]&quot;, buf1, buf2);</span><br><span class="line">printf(&quot;7.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;7.buf1=%s, buf2=%s\n\n&quot;, buf1, buf2);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>7.buf1=ios, buf2=android</li></ul><h3 id="8-分割以某字符隔开的字符串"><a href="#8-分割以某字符隔开的字符串" class="headerlink" title="8.分割以某字符隔开的字符串"></a>8.分割以某字符隔开的字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字符串取道&apos;-&apos;为止,后面还需要跟着分隔符&apos;-&apos;,</span><br><span class="line">起到过滤作用,有点类似于第7点</span><br><span class="line">string = &quot;android-iphone-wp7&quot;;</span><br><span class="line">sscanf(string, &quot;%[^-]-%[^-]-%[^-]&quot;, buf1, buf2, buf3);</span><br><span class="line">printf(&quot;8.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;8.buf1=%s, buf2=%s, buf3=%s\n\n&quot;, buf1, buf2, buf3);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>8.buf1=android, buf2=iphone, buf3=wp7</li></ul><h3 id="9-提取邮箱地址"><a href="#9-提取邮箱地址" class="headerlink" title="9.提取邮箱地址"></a>9.提取邮箱地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;Email:beijing@sina.com.cn&quot;;</span><br><span class="line">sscanf(string, &quot;%[^:]:%[^@]@%[^.].%s&quot;, buf1, buf2, buf3, buf4);</span><br><span class="line">printf(&quot;9.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;9.buf1=%s, buf2=%s, buf3=%s, buf4=%s\n\n&quot;, buf1, buf2, buf3, buf4);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>9.buf1=Email, buf2=beijing, buf3=sina, buf4=com.cn</li></ul><h3 id="10-过滤掉不想截取或不需要的字符串"><a href="#10-过滤掉不想截取或不需要的字符串" class="headerlink" title="10.过滤掉不想截取或不需要的字符串"></a>10.过滤掉不想截取或不需要的字符串</h3><p>补充在%号后面加一*号,代表过滤这个字符串,不读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;android iphone wp7&quot;;</span><br><span class="line">sscanf(string, &quot;%s %*s %s&quot;, buf1, buf2);</span><br><span class="line">printf(&quot;10.string=%s\n&quot;, string);</span><br><span class="line">printf(&quot;10.buf1=%s, buf2=%s\n\n&quot;, buf1, buf2);</span><br></pre></td></tr></table></figure><ul><li>执行结果:</li><li>10.android wp7</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="c" scheme="https://www.jelech.top/tags/c/"/>
    
      <category term="后台开发" scheme="https://www.jelech.top/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何自己编写MakeFile</title>
    <link href="https://www.jelech.top/posts/15789/"/>
    <id>https://www.jelech.top/posts/15789/</id>
    <published>2019-03-10T09:09:33.000Z</published>
    <updated>2019-08-12T15:11:08.037Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><p><a href="https://blog.csdn.net/haoel/article/details/2886" target="_blank" rel="noopener">《跟我一起写 Makefile》- haoel</a></p><h2 id="关于程序的编译和链接"><a href="#关于程序的编译和链接" class="headerlink" title="　　关于程序的编译和链接"></a>　　<strong>关于程序的编译和链接</strong></h2><p>编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。</p><p>链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（Library File)，也就是 .lib 文件，在UNIX下，是Archive File，也就是 .a 文件。</p><p>总结一下，源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是：Link 2001错误，意思说是说，链接器未能找到函数的实现。你需要指定函数的Object File。</p><p>　　下面我们开始看看如何自己写出makefile。</p><h2 id="Makefile的规则"><a href="#Makefile的规则" class="headerlink" title="　　Makefile的规则"></a>　　<strong>Makefile的规则</strong></h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">目标 ： 需要的条件 （注意冒号两边有空格）</span><br><span class="line">    命令　　（注意前面用tab键开头）</span><br></pre></td></tr></table></figure><p>　　解释一下：</p><p>　　1 目标可以是一个或多个，可以是Object File，也可以是执行文件，甚至可以是一个标签。</p><p>　　2 需要的条件就是生成目标所需要的文件或目标</p><p>　　3 命令就是生成目标所需要执行的脚本</p><p>　　总结一下，就是说一条makefile规则规定了编译的依赖关系，也就是目标文件依赖于条件，生成规则用命令来描述。<strong>在编译时，如果需要的条件的文件比目标更新的话，就会执行生成命令来更新目标。</strong></p><p>　　下面举个简单的例子说明。如果一个工程有3个头文件，和8个C文件，我们为了完成前面所述的那三个规则，我们的Makefile应该是下面的这个样子的。<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o /</span><br><span class="line">       insert.o search.o files.o utils.o</span><br><span class="line">        cc -o edit main.o kbd.o command.o display.o /</span><br><span class="line">                   insert.o search.o files.o utils.o</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">        cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">       cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">        cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">        cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">        cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">        cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">        cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">        cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">        rm edit main.o kbd.o command.o display.o /</span><br><span class="line">           insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure></p><p>　　反斜杠（/）是换行符的意思。将上面的内容写入到Makefile文件中，然后执行make就可以进行编译，执行make clean就可以删除所有目标文件。解释一下，也就是说生成最终的目标文件edit，依赖于一系列的.o目标文件，而这些.o文件又是需要用源文件来编译生成的。</p><p>　　需要注意的是，clean后面没有条件，而clean本身也不是文件，它只不过是一个动作名字，其冒号后什么也没有，那么，make就不会自动去找文件的依赖性，也就不会自动执行其后所定义的命令。</p><h2 id="make是如何工作的"><a href="#make是如何工作的" class="headerlink" title="　　make是如何工作的"></a>　　<strong>make是如何工作的</strong></h2><p>　　在默认的方式下，也就是我们只输入make命令。那么，</p><p>​    1、make会在当前目录下找名字叫“Makefile”或“makefile”的文件。<br>​    2、如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件。<br>​    3、如果edit文件不存在，或是edit所依赖的后面的 .o 文件的文件修改时间要比edit这个文件新，那么，他就会执行后面所定义的命令来生成edit这个文件。<br>​    4、如果edit所依赖的.o文件也不存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）<br>​    5、当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件生命make的终极任务，也就是执行文件edit了。</p><h2 id="makefile中使用变量"><a href="#makefile中使用变量" class="headerlink" title="　　makefile中使用变量"></a>　　<strong>makefile中使用变量</strong></h2><p>　　前面的知识已经足以让你自己完成一个简单的makefile了，不过makefile的精妙之处远不止如此，下面来看看如何在makefile中使用变量吧。</p><p>　　在上面的例子中，先让我们看看edit的规则：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o /</span><br><span class="line">            insert.o search.o files.o utils.o</span><br><span class="line">      cc -o edit main.o kbd.o command.o display.o /</span><br><span class="line">                 insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>　　我们可以看到[.o]文件的字符串被重复了两次，如果我们的工程需要加入一个新的[.o]文 件，那么我们需要在两个地方加（应该是三个地方，还有一个地方在clean中）。当然，我们的makefile并不复杂，所以在两个地方加也不累，但如果 makefile变得复杂，那么我们就有可能会忘掉一个需要加入的地方，而导致编译失败。所以，为了makefile的易维护，在makefile中我们 可以使用变量。makefile的变量也就是一个字符串，理解成C语言中的宏可能会更好。</p><p>　　于是，我们使用变量objects<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o /</span><br><span class="line">            insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure></p><p>　　这样一来，原来的makefile变成如下的样子：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o /</span><br><span class="line">          insert.o search.o files.o utils.o</span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">        cc -o edit <span class="variable">$(objects)</span></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">        cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">        cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">        cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">        cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">        cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">        cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">        cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">        cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">        rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure></p><p>　　这样看起来方便多了吧，也更加省事了。如果有新的.o文件怎么办？当然是在objects里面添加了，这样只需要一处改变，很方便吧。</p><h2 id="让make自动推导"><a href="#让make自动推导" class="headerlink" title="　　让make自动推导"></a>　　<strong>让make自动推导</strong></h2><p>　　GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。</p><p>　　只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一 个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o /</span><br><span class="line">          insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">        cc -o edit <span class="variable">$(objects)</span></span><br><span class="line">main.o : defs.h</span><br><span class="line">kbd.o : defs.h command.h</span><br><span class="line">command.o : defs.h command.h</span><br><span class="line">display.o : defs.h buffer.h</span><br><span class="line">insert.o : defs.h buffer.h</span><br><span class="line">search.o : defs.h buffer.h</span><br><span class="line">files.o : defs.h buffer.h command.h</span><br><span class="line">utils.o : defs.h</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">        rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>　　当然，如果你觉得那么多[.o]和[.h]的依赖有点不爽的话，好吧，没有问题，这个对于make来说很容易，谁叫它提供了自动推导命令和文件的功能呢？来看看最新风格的makefile吧。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o /</span><br><span class="line">          insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : <span class="variable">$(objects)</span></span><br><span class="line">        cc -o edit <span class="variable">$(objects)</span></span><br><span class="line">        </span><br><span class="line"><span class="variable">$(objects)</span> : defs.h</span><br><span class="line">kbd.o command.o files.o : command.h</span><br><span class="line">display.o insert.o search.o files.o : buffer.h</span><br><span class="line">clean :</span><br><span class="line">        rm edit <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><p>　　不过话说回来，本人并不推荐这种方法。<strong>虽然简单，但是这种方法破坏了文件本身的依赖关系</strong>。如果文件过多的话，可能你自己都不清楚了。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="c编程" scheme="https://www.jelech.top/tags/c%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>头条实习面&#39;筋&#39;</title>
    <link href="https://www.jelech.top/posts/35606/"/>
    <id>https://www.jelech.top/posts/35606/</id>
    <published>2019-03-05T12:31:17.000Z</published>
    <updated>2019-04-07T02:13:42.767Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+osK4pQr6ovtc54fzcplYJyWHCkWYXGBud2TsV8NWGvXkxtUmZQq3Ap3QBjkIan3x8peRoLaXGRXh7oR+aJq8w8dUV34v9rksV8M3JVjqMuCgt1VzP/azm97Sv9hTaaxHFt/hkxCYgkO0rWvM0Q2mdS7SumLYT6CUqgXEWDohGw7qv6EmDgD/2iMwQxsyxB06cYl4qwL6nDtYaNaHEOFZ5bax/9kSaO6TUaYEk3BTsH0cExdzZbj0TcVy5rnFZhp4uKfLr11WZB02jQU0VZOAItg47Z2uRUQGzHkgyvjP2FUfS1BwLkzpU85faxpBsqk/iomYbUzDjvv+P/ujPMy8ehyh4HkkmGG+0vMBQmabHIzbmJPPImgSHkAkxIxGpdgguvQV/uoSzDl2eZvsbOYVDFGgF+CORfP1zRbbOr17rkgHJ5TPlPGCB5t0AhupTUW/3ybSc5VYU5wa49wj5neB4pXMxjIPDIDtZQ1fHz8ArYsXrjJFDka4RMkyxV4I50uzcGvwXOsrfi3gnl/1S0keT3DldjPedgbTCEQmH0yUBUbF3ajTM4z1LZ+MgirGG6w8+ry3AF5UqfLLO/3F90rl9e2BvlGrSZaS6Dp6g0eoRn2pYu/SiNatFkaoDXMS1FNSxvmoAJlg9WBj2JdK5dicl9GmNSXGWgNjLtyta2UZH6bH0R1UB5nmwTIeM/dWwe6oU28ZHT8qU7dS5nj1/+3kWoOChVoBCwJARp5vh/upUNbXOb3Lb37MvnlhXuMABLlqwkyXy+ITbrPQh6529PEPvr81dMrtmkRZj7zjfDW42AyeDa/BBCIcB1WX9E1goJHaL7sUwJXQjXvgSDqf/UUvnNihNNtlssqg9dDfop/4hAAop8/AN2ShUg0F8nEXCfmiK5Q1Sg7CBXXe5JOOVmMhSm+XRuy//m9AKDWwco/9wvqy01B7AM6z2iIyUgsR5+Hy5SvHGWgJQNJaVYP1cllYFXnIM2Vjz7A0Z6BlImFxHnQ8gZW4j6gPa1qQBhjYW95BdasLRXGV5dvTEJvr/FJvpOxc0aoIF0/qBTXJn0mvM0TMxmBBYdWQUHXa/8cANTgEKY3S3yuqjWRH7RPLUu2wMakNsnEHfIW/PGNUADYi181m4wIiA8kniuuSYCmlM49juNg4s0fdJmqe9zblmgz5e4HpYuYxJoQkOdGeflFyjsaZeTBwtpaxYXGEK7wJZNg1OKNINfhz1ZlvfO4u29ChUiQhfOP4tO28QnLGWJQFaUzJvd0CHnxyMAHSwY1eiXEJ4VWiZzydmKUfVrQDskmo/LDrA7obTGNVKTup3lGhYCPKVvH4khwExyPah7JlAZjhXljGnXXSfDJO5HJZSXcZ22sA5VIofdnyO7JMD8RU48hK1WlDK/2JZredu1GiB0fzmZmO/BVr+4PQe5dDaXmK4HFklJILgIlzGvyhu9dmxgbvrEqcy2CQEOrFGqq0sfbk7u6DkVEcIpK6nItvnm1qqGSlRGDnAJk0CftoHKV3ua6xi/rD+wdCzKLd5KhkkF1hoNpLjFbjab2k+pcBSM/3Ve8QBvEa3jnt9gUkoM+6rYFQPee5JkjEAQV1WRhQYEII/m+6jQJ4RNb69YVXsG5s62GPiab/2fmuCVsi1C2SlAoCx85x2T9w0EEegkVia718pYCjsnOg/ftxQW2tlLNCMuJmRPdwpSRpCF1ECLr7ijDafDW7PZDFLKk9jyTgaAGHMRbhUHvQLRSGUI6+8TxV4tvN01laN+mAQNzmZaNvPq6ZE6yBvD+HG+gh+kjAuCbhJxXixZGoZx7t8qlpN0+5wJIQ6WzVgQjuX95MqIhjKygAlbkS9mSijgqpg7nDRojsSRNrTVHdHwAXEa5ba9HfLN2qADyokjjjZq1ishuzfRyOuM2bRvqCbdR0xpTP6LMbuWq3CaZ8hkxWBPe9BP97eBB8U+oCtprlMXvfao+7UyscWvvqI8WEgkj2N3XJeA3Jklkhz1wsMiudrmL9iaQlK6eQOWxFGYrVfOTFr5d8tuEv9Z9Qp3u8zRzrwCzRju4lcTnCXf0wljBp2abEetmOSvVzbWkIFFozMtDfoYzLax0igzK4joBQafoYMrxgn8mx1as9ISFT3Z0FUfz+9k8GfqYFdKAJNgJclLb4WBcOil9l0oug9gZHyfMUj205E7lPF6JVgYgRSTrTWvwZAosGrlnekNMgT1PQpuXhxeosvLmvWMgGcZf5GKzDPaj0YXUht9p+rNjxYIGvwoUEy5hRo1eh0aq3pKgV1RwEmsNyKl2NqGtsBF5Jb0Va5iwtlWgI0QrhL8T9hPtr18+GGU1Wwank+ksmjHwpyBsNNnJUJl+oxB9nmXCA/9UBdtGyJdSR/1iGAUXumIAOHDBWyhUbXn41CKkDtLoel1Jj+sKn06aiPZ4rk8HupDEwZqfNsrF1nBbmcCVGngwn9aIkfIBcWs/c6dWgy+qLPoKOOBdvJHQE9fkbzAlI68+wU6Gkv4pkts59SLjDU90UTRxUpNP7aAqeyV+Xg/cNxRnS8dzIcF7SQ9XkNdUWCV4yTCdWVbMAp/GuI/80LTZaQuy1LeBBDKMsHO0+skFJ3S3b+suLkddByvjWOVb8kNIAIlSBfcUVJADKuef3Lc3sRBmM12hHg4HFBqtongOETQsrp6HsLL/K6VHv2IOf3CD7J655ArV6a6qwxMHSS4K5081tzD6oV2TlH2KYT9uUtPUsryvcUu+BhZlVE/KZhCkhwyCCpzaB3oQAIsFMUaScVIRvKCL+eR97oy9RApAimn1KKzv78P512l08KgRUIJkUWjnfNMapw3Oj2mw2wFP6Cp4KAvf36AXsP6521a6GpyFTHGAqyfyLdg4ducQKHfrQuwO1i1REYzIYjDJZ5dF1fyQOoUqOP3/kF0nK9uMezSbIrdSMmnlm6985Eni4FDMi03ZV1RlwBDJL/NPazfrdWk4N4AB6GQWr0vPNVjnya6rq8TdgGhev2CHx5idGbn/PzckysmqmJpLrGwKorNu1Phm3UsoyP0lmw6EyNZZgGd77OzzSp9H8AHewjX5D6yAFsXOLwc88ccNe/8649S1URe/loGAwHLfAbwKyNX52pbM0xFTRQLgrxccxycC6+81x8nw3gbSO0vtYDT/OwBbvDUd8DrbuHw3YcVkgAEIGH4QhLQLSvZ6OOUJ0X0dJyC6uB8xgM4l34Y949AtsfVKcrXEsEF7CmUnl9d0TpUvYzgnKZbwUycse5n8BTi2z+vkl+NP5ZHT0f9BFvefFw9aoIrhNdSaKM3GzkWOCe6oO0ZG/V8wS4EjQsq9iIneJvKdx6Q6HwtwDmaAOzS6+AQev/XrGjjslHFrmScp8E+gV90gnLIJmvg3b8LyF1xfnL7dmlHvtj8GToOGYav5OTcW8ly3HGe9Y2QlXNEvxx2mfw5vcquphjk8CsWUNwDhXmzYG3azNSvV0sQ77menjCdrkGo4gmOODMRPnNdCYRfP/1IW5+6RDhqo51AK5tWxLGJY3s73rp7uSnWv6snMvGIvLBH01EXuXtKpvKtoxoeQDfMYfVde8pzUFGEW/uX+v7pFVYx2iyLRHwp6Nvm9FBlcb2e/DAArL22DMwtvdQMxsh1RO1bv6w0lGlQctCE73pkvDeuqnElvI3jYen/FyBaSc45zfN8kPjD186n3eFxo0vI/svi47l0z8nUOoQQpaddTaKO3M0w5x086gppC+xUECU0oHqE63zUB6Zy/w9ubuSgC6hU8rquIaCKOGokTP6qwKiCQunlNKRXYSzb0u8PEgKyVXDhr9pN7IaFETtNZFkxaZwaiKY+1TeA3pTa/1VhCCU+wvTUM+oUCRylNO8OkslEeT/7EJ8EuIqZCVdyUYWPNB497yGpSeujL8zB8JHOw8rGc67FnzsiHKW4InTmKJ6EsgLtHwRXMEg7ic+gqvZKBy7nuF4f9atxmBrf/eUehO2JgLrTPpOoUqPdgALBkgZagglz4rVPnqZNkXA/9slJR5XNQEI3NqOFLfttzo9g9MM+OywniZWOGFex7Hrx1+YOAIT8L6RkqvDjMHauq16YC/5+66Av5cxLRm24ilkOjDbdy8/B/rS7fAT8iTdd87GxDJ1277nl3F5wRSjke2ucjXFVkQmwCg6KISgUKNcx705m7qLZ+9rxJXIJuFN1BzwcBO42bjyVjiah0wrYWBebDGOrZsoEh0Vg/wcjalurmIQx2M7UYIeqIHRYs+xvHo4R1fdRE9kjxaWByVrL9yW1wteD4UYxTidu3ZUQPZSDgvipEao9OCuGI5LA38Kwl5aKsO7/HVpEO/09BKzLTpkynyMqx8L7C8OS79f8kHFpeFXgF1WPS+1pcoDdjR5O7jD49rZVFPRf5CqXQllRpCatzVwE7VS36/5/+sJqy6jRfvx9FQuI6T62AUq+Z0XYVUUORPlSlWp1Y5YF0lGozs80yG2ii0diiNwl8WgK1simAkDqiv0yHJcovgwxRV3Txq1bLNLEUpNbUKzv39STEw0TNHHBOFEdZCPWDHjgFMLMO8hk10Ru0uFVw19hLsOP4OfA2ip91aLQuGWKCTJluMfirR9dWOnVfx4NFDQwAJehFGLTMJaB7oLbRdgkLoUx+pFaWey8fNoegKZoxx9CAYhq2SIbP1AKNkG+DQ26Wck8yd+CSiuQh4qJsTEdYC8uHdvuhqprcasT/kCiJelpe9QmKixwOgwhC4C2IHz94OvNe0oRNyCIzD+GeFY9knu5QM86MI2XW2WEg0vwznMXFESIVsu+Ykn+9dKIM70D68X5H67u4x5Z9x0wh6M3rzINh9dEG/MqnxYClBzJMRiscTPrXJTfkvm4crc4amNH5DQs7Y8LRqO+4ZozR2uIHXHRTVZ9+dzwYZBdPJvEhiVQZxnn1Dbihk0uf2rBIq+g12I3fKedmRYew+wUdlvtn31w7OWmz+nZHQPkbViA1oU6I2ds8b+QU9D0jDKzVQakYpGhtM2mEFnqz/m52TnJEFHIx+47C7J4/YhfJ58aWOXKkCxB8lW999ZLrLhBHa4+KJ8vi09qwJFqxhNKLg9vw7vtWhD9guNop4/DLB2H68h7m++RosDXIHVsEBV/4RldmAWes8s2WGy4FZ73KJk0xaurdNH/XdyUhaXGHd1ZEvD1xFMqPztVM+IQvH0FyNBoEwBA2vHBq0aVHZb7/j4hYmOFsu5AlRiXksXjnIa08fqS1ZuC2QfK8xO1o4BMb6sjnQPb2oB72t1GOUVNSlKEOdw9BAjIryjs0wnJydLBTz4AgcvpQ3bmCswDj6xcuer2CPe6qLu6VFP2ikErtOmGQwGPQ8T6DZU/UlAEh+OV2Sn26ylGMfEkJ8yegmh2+W4KgvKuyJlXwW2LYDQM698twi9QUGANCbWCkCi6YopWRRbwCZ/sSNhONd6b4TNCaDIxj6jrBDfhzlJhMPnI9Rr8f5HWfRlQqg3e8fbcb1gKEQbUxs8WsxlDN0+57tLlPc23JqZaJxu5GbTfJlq0UVBEQUpkA4YJO7o+1rtZ6x7MJo1LuiJ2P1GM1Kb6XyyU3ZfaeJw9WSdM+bPiufP9Qt79by/uhnGpGLeS+2e/Ztli1RQT7P4o3YMuW46eYSSwn4ec3If/nX0LapmSTvtoRR9e1AxqylQJH57HF5x3cbbePtP4tnrVsGHFmRxKTM/BDzsUA03fCjpsD1cpYPPbEDkjy8oLRjV2+aYz7Q1L2NL7meh3eEBD0/kHFdfTcpHnZ62xNv8mkIfYsKJL9O2lQJoIxZtmOnZIMTM+oQol+8Fi1pbkQDapbLAK+uyczeDXbuN5CMuBjBcGq5qWRfH1mga3NCCeSstNz8AmRZeE+dqkt0gp88KelGmYOA/yTfz82no/rK2B6CnO8lUETBznLRCr5R9rcvokEkkhhj9VkF8GyedDJJ6XBV8vgxrcgZM6jU4/tmpeG2iw7UrF+zNb8kNzRq/N76XrAD2lBkHjNholat40QYDUaYAGwEDQw2fINfKYjdS+xt0iMgKR0Xbe0jo/oswT2WMSKumul80/cIpN23+Dfbab4CzNowYFUddzVgUaNuXwA9xyeO3FngRrDOwa/GZOycCkXDejjxnI83nRLDp+2ZN2ZdmmZ3KD8JaZ7qrf7awjX0+j7tPXmVIPK1tpNsfwqfes5pDtHW9NNgeUmGHcpP+wuiOlQYBvrU8jIm0X9UscLU5kDagsKLzVY9XypRn9R+ibM8eRYwKASpK6XnLmgse4Xb4HeBiDGi/58eyF45zJ97BQlJrhFgMy0C//fzB/NIMcGhUmRzl04ITe28oYfjkEQaSMH/QrLbw/LdFBP5061bfnK+vQSzRc8uob3jmK9uf+BbeKjlxaPbnQ5kOVeneSFFfnR8p8/qxDUYhruaxMMfWnfRXEv1yuTFSmro0vM33BtX4d6xZhLcYqpVaVHmIdbNucTpkxdbiOqCO8V6ciVv25A3/LWGMSbBexa4v+RKk3irLPyyXxxUqYmR3QDvcX+HoUX19cthKmSArDoggxnPKfxJaCe1/d/e3upMNJg32QTvr1pUMB5W1pSdkdjB12X3JiNcHYh/QScPd54fZBxKDo63dLTG7a5+gjOl6M9l8OVJeXBL3ygNB2NjedEWPE1pIj4M8JkJXB2WrifWg5HPZPUZ96AOYyDj6spptTGMEM0uxV4pQzB3EWM2YbPMGGsl3gCPHrpVkqUSAsJNRkFwaZadHvAwqHNPTj2UitOzal0c/PYVDbYjAMkEFtQe6Dan3YU8li2pffVu85gV5+Mlim9F/G7CSNp4GR8wvWStF40RAKXRv/7NxrrIunLieS0rN3ywVRtPZBTt4Lole0GH+RH/a3VkIp+MOhVFLfvaqcCux6NELO4jg70iPvHEUJAevTxam3xiT9GQTARCFV6emsjjIGRROcv7dqLANZJ/CbJnMOIsZCxu1MfUQsv78q/NCbKr0YQU4H4d2WgGueRMi6KSEQh74LYh8zIbVMLrFvYIzZbEAfjNpWz9MuTAzayZm0pk54QK4QbXzSgEJ5KFvGyBGiJ2qeP3C+U7uUNykmDnMdSF27lU6UYBLoLnBPVR8rqqJ+IbC/del1vGWIt/wQ+Fv4W0Ce8u83wdrVQLcE8ol+pOwrNKPk9i8J1TPHdniXDlkBf6RElPGE0jDwFXcUG0IaGcjhV6vnYOXcYNd6vaC12Gd/HlD4HWa/f52hp517KZTbOmSHjjo66VvJew4GUAz6Hh1oAfPLJuyy+cbvclMb2elUt/ExZs3oRcaFK51OPQK3sQdlJt+BNTgMtTlRf2LfOY0ptkKvSYVcoBzo1QGEiE6pWVlPSg/f9i1PlzR8AlDd+R1sv6rEt+QL2uV0/Dm0vuanEfOMhVBH6l41MtGqWFtIiNFaWh+W7fKLcai2jhDkCAd0oDH+qCfBVPElbCQ4X5Ql4gfjZ+hUnRwD0oG9rEBpDTdS4SPunhtn1OAz4bwXXLQ0fbBnVHub9G0kd6EXyWN5MiG7AkmpimQq8bsVa0KlBq4wFPBq7UT3uPruTvW0FuZ63KWusHABNs7wNPV59eYMfqEDOEqKHLAf9gMPpTv6YXkFA+8iLS5GnOFfiqkQDwsWPCannm6HRAVjt7Yl7eOOaN5a18imlAp2QKaO/JBKsgxN4uh6334pIbDdGtM+G8csP8CHhBk/s+X4FKQSaryBeRlNx+CeehE39X6DIG5zO6ZDYSfTdrd0Y0TCalRWfHEJqimo8aVjybfpgU9VunmY+D1Ro32lMuQ7HSP0D3EIVLgHD3d9G6CZa/ugPidMyYaoZM1EF/UivRbvsh6UXY+yf0YvA68l6+QRRy9qGfpO/5aoaXTHFIHErRwcKKVxR2vbLvL/XZLmP8OgqYv1Jt6C3c6eQRlpY4ifEddk6u5HRLxjcYFwNex5EitkRA+luCCBeqz1Y0fPFedT5o8Dd3uGFv0V5bs54ltsXzCMPlhalFXr8CG+QgFkMWYCYc8MzJf7V3rknuZOrvRnqwzkGU/XC1CjzZQIwVfTl5eL/ijVNUgrZuPB4GvFqjCN2ei9+lsPyrRw+MMP7F++eelXo1KqoCiIssWsnBnjvU/baZgiMWOTsRDfznI96sOMEsgJGPqx5Q1y6b910mhuf1Vm57kl0f6r3TP9nQ8gSp9WVhZ9zrNjvDyeAp3Wy+FF7Pzr2Xi8PhbDXexlK3Fih6oojVebGeqzCFMbjt/mdXwpXMSpAnlK/nm0bHOoYxD7oQYHcp+Rk017s9XuLPnF1+sHA2sO8ecuCrTYt/QNrkGO2cUWuCsFle8/BftjvjAFhJNEWeavWox4uu2kAUDKYTqmjgduM5i5O632zLOAYPFL7LMWXXo8YY9vgo5QveVoxwM700MyOjS2styAbSUx47wih7K1e1fCBtzq+XqZ3FS3BMCoE3uQpBKoeKeiQXx5647UlGYCYs9WsJn6WR8Gk5tEGc77SLGHlxi+XoUQBH4OGCLHoqBsmosus2EZzXIrmCwWmT3ZuhsVkFcaifzWcl5+FrtrZETgrXhPSJsscj3QqegTaHq4P9W+kYI7iDXh0tTMlHwkdRB9pVxeRwALItiyObhh2ZIb+u9En5BGt0MXtauWqKECnvubLUukhmwbPH+3HslKUv6e9gr2w/X06/+LNU6L53za/3vaO8cu01H6m4xWO0989VU0+yB/mTkeKsxRet2esyP6r2fMCBySPM6cTiAS3dpf1PqkKg5uUmcqc7Lf7XAC+8htG5kH7uQlKfV4JgwBjt72yU9LSLecrkBkX60dUc4FOE7bR9UYrfwIWhpSpXv5Z9EO8UX3orpZiCyuftMOWE3Rb0Ke71hVOew31lphgzF+dhHq6fKn5rkQlikDQxnBZvYSzydCMGxgblutlPhN8sg8DWNYuTYNDqkc1DT7qzomKBa7HlHZptYlVaujyzrvjgyR4dFvP0oo1VFhMDexRI40SPpi5EiEP2AmG+fFv4CQ/ElEpLE1OmH+iKTq5/Yk8RjGaAf34WnOOcOQ6T9dFJuMtjsr0zm4AW4DXl8zp154uekxH1M8GLTYRswMgb+G1Nbq0FUQ5FoqiKQ4GKB521dae4LgG2oY92YY0Bfw0WJKuzT08pCmp6EJKBCUmoc9P9ha5vsG7pwRv19DF9/aZIy4xTsYsCnpgsLOdoQ62Cs78zNeRqUzdGlF9wKoX8LxqNm/GerN9K1OkqAqQgRUgG+akw0mzlC2l9Aoa640hJo7ApoJ21ohw4KaiHb7oUrxs0Z+AbvVR+wlHcZLYqh3iJjVMXUhkprKkRszX3rHmKRh6OukMs7Bgwjj7Uh6FUpAB3/qsg8W0yJMHMduHeYpa1FZXtliDCmyzcwhWrJHxamuj5LeQKRe1PJwIGQDKgRYhDqkkBKdy4kplD41OZPW9lalXUEyFwqg3rddfu7rrQb5nBd6sCVI1sVeWcl46FgkOVu6bnrSSxN0dLH2haXnbpRMGXSrtm7yY0dRaaAEKuaqlxr+bAEX3Erforg4vrABHTWGwKmKHBeOMNR9aL0B+h3h8ZIzJQWvJ0uPEJT1c2GxuyF0Lq9FXfDEdN2jGNmCjX3Bj+Kce4j4rurnskVtrcqXouFBmQJ1tZ1ZUTjGtpqFxgTbSriuZ8YgRGVmoHrZNpxpLNatODMew0ZxEHrR+M25PJHFXd05aqLJRTFGrinE5xvSmmPrFbo38ypcApYITWIAE+mg8gB83E9524lHqlRBfqzai3HlCm5Cv6wFwy6Vtef1ZlT8HFc3ib4zy+Lmy3s8IDhawpdsxwUDPNpmwRrCuvdV9lo7YFpPCGOn70f0sB3Cm6R2FACcvpGIBPQZz1hZziKJdJED6ZPFPOKa92gOfIflJ2j6DL8Oci15vFEXAGxaSAfg6okkggNG1Wlz53x7GwDWB5qy8bqBmkER6U0CgjFoVcGFikRf8Jj6tJbzln+YggBvSTrlXwBUse7xEEb6B9eqDTFwyafdh58oyR/bRSG+/Pyg0dwoIoHuRoqt2TslgFuuGNMrDiKiiJKccIjIQJz7Nv1rRLCbtncR3FqeqfIi73qqJ+5cVzl39w3oScOe0QhKyqSGRa3QtBpm5fmoz3n00tdX2eBpTn3pteW4g/azKFF/Cr4eEH+3RlsWiV1DuzGT9i2pYnAd0Z1aqmQjtcAkM+zb9PFtq6n8sLKTSUuOlF++kbAXI5aTlMsMUT5W3Do6qoC2/2p35k4uYx5QoOEZbEv1Z8yZ3monBDACFnhVgfw7tIv01+eoNHbLA+PEa5g3OMzldyrY8UoDOH9N0/G4R3ybzcJL16/Y9p4yna986m8m49DJKiZq6/0pv85sVP8jFH4VtniFYIATMUozP73Ydzycjwh3c1gEPGfhpEIg6AA71AFtuRqL6bcPXxMgHiOWXW6wuCbKZoRgWV7jO4p4yIUwOvhCTi4oCbeoAMw3AwrCQN8O5Xh9+9LG4n7IENm7IwQYKX1N1MCcAhPo7y4lYLuKRz4Xfzbnf3lsTrvuJq7p+M3N5bY8Or39BKUenWpxeIsTg6NtJjBTTkjf2wki18aBdrxPMuV27i5f7VlCULztnCQQCSqGlNysVchd8zqYE72OvMn/m9B0kowC5LH6OI3+F+kRCyejVwvHbwRzsWxwooRUo8v3FzVSY2IINCdsB7z8AMuwIfjuhlGsrPDYrhzZhrHY6RTIY+MjlnbQWTJogVEhf54ql3osRf56R32+5QbSrWhf08vst6JCXZrTPdpmPAuErO7Njlv8RhbDTwxLLFafdxNv+afoPHsJSSRpf9NO1UCUECtX5Cap8YDf6rTgRp7jt4J5HukcIis14YjbrI4Hvj6aoOZmXAX/vbGOQrZphK6rmScBQCR0XEv34YURRaJtQ319/zvTOX8iKaBNxsOL4+XF6KBUblLhszY6fcKA3aycRvcQ9/H79ONW9VHleHP3lzrt4QEtP4B4ps86CVCSfiS9Lo1PN3+qD0lG30TNDUL4uxtzEwOZvOl7S5fycYoUWIEae6OsS5dxu0uIyGG+CRyvUiboyaOTlj9PKZhip/KfZ0zwFaeDWL2Z55nZ4lDTVV+SXyaWz2wbFQ7LlmYFjc2sjjCWEFdzWPNJejwelcRCEoEM8vJEzy1ev8Z53I2WsqybpWqZGeQcVEDjZCvztL8rVimXgYD2EmG/zAYDjQh4kHety4xM893hX1cviUiW3yFH6VB7bXOQ+CIsjBXlgXyEW7rluotVrFaNxB9gpBX6BlDNtfEJqS+Bbc5QpQIY+dBF7Gddv61VKo5hNyJhfdU0JmL3w2bpiSVOm1oC9ZjUcJBVQKUoFITUqnyVlMUHAsocw3lMp9BCvYZ5EosLDEZPtvVmoQoPHyQ4O/ny7ShKxunZD4jgYwYRU13eCOboCJ9JyWQXwzOUjYjy/Q5lTqDGQO2O1qzL0An0LWAL/9T2F6381xcS2Jci04qhF76PUMi9NcXaU8g5dEt/Dixvqq3dXGa81JJnRsi28EvVCACsfpKBLOzj1oIrIjS+ANPvbIkB/ur0+5mlb8WdLmhpCcnMwKrrx0kUQL3guSt3yIQSQhblHoIuOcrFdE8pe6BmNvPb1fGAVxhP48/AMjGD9ujaaeCOpLRF/hnDc0WQoW57V1UHtKSTVzRjx8ZHDU154eltm6vj0hJ/lLq/w6u3H7H4W6KjfACAQK9CqNtYUwFX0ht32m6/y28f3yQtZBg12o5SpyxAzTOqc8ZCbh3Jh0XX6GepgYOUcEZQcGaNv6joVD9589BZwMxSHhU/4eiK1TmJJJdDVXlCqT0SH8G9KloZ9LdTjGzo9NwzGs52l6y2gg+m+xviALwgKQtKVqzzc2FyXq2WLdWz8zDF7D4KJPAHgbK83zeaFW+pjkUt+aGxsXbG1oEQ4yAxkBZdIefEvTAby96vLkQQr5gA7XRkYZjRZ8Yr2ugvTgJO3Klt9j2wRwId+hqGIk23UcwDN2Yr+AT5gReAcNKpAwVgq24zqq3W6C7wP1ZepYilrtbnJ1vlAdw9RgGUcQ+Jcb75+XQBwm9U3lRga3Gpul+UqF5lL/iS9yulLEvWpLLCOJ3Q81FXty0GokHd7fkYY3pjjCeqTVXVXjWfQHmBImR1HH5rAx6bTS9Lw2Agx1rFEcrxpCD0GfdxCKwgSJEZETjj8XKzKtz/A4hHD0fvJw0VkhTnMGy/wG6YUoO8eB6iszYBb0FFzHvodtAcJYXJdBZbbUKe4JBSsmkEvK6/9SYwBD4IqTbZfSvAW6enWaV5A9ilWjNxznfL/adgS7m6x1MTv68/jPieXUW/5faLm1oqY5nxufFXhT3GXS3zeJciKXJv/EpNyEZx5z+Art/cbnsZM2IelLlr8zoYackwkAajY0nLfcGM+w4eqvWX+qT30JAl2jauoBnTy8FkL74OxF+3MTycD4Ib6lr2vRf/yS2MCozNy1JaBtPcVu5Y/pIlDF6wXTnVGHnBvafVuWE/MO+iuZU9tRmODMAQYwo1aA64jbKAnm3ETYuf+mdMmaTbazPIjC06j1s44ClIaviHgK00mKbG4cMzM+42N+loudegI4Q+3/5p4nuGRt5VCYugZXhgi8SdDTRhmL6bpdH53YKqcLSX18U3lLhNIgiEXh+QEiXRQXp/l1FrWN3UdcXPQCnaIkIGGFzK2YVV4KEEJ6EaGE3jmS+/zAcuNyqkx3QhQmoYbWfhNLLAV51rAYhvO4GbgVQiFbt2he2UY4+pt6AmOelux/LeQtzFJ5ApKMP2G6RfMUu2QJSXzuw0jzOKAih/5ZvWY3Xp74mSFhe2T2yFcYIsUQ+L5AxR+sbYR9MoagDHZTyDbhrAxYWENFs2Hxrj11ZNfM8Besk2v8xu1ioID+/4ifmM+o1Mws58pBaPDehK/7W3qCnUumUb3va2oxB4Fyx4M6b+Eiuh7fTrN+DC5keMts0PUkDOJN83H67TuPgAfQtf3La7cdXgfzb//B0D6HLn1GJy/DmbzfRRMMoPrvSCG+kHxcVvyNA5ag5rnnlFP+pi2wiC6j0HlBSNr2990oFHJZpfqsxOtEWH+zUMCPGKO9vknReL+aDYy+KClaBNFMiKhcHejbgdTJfFjetGh8MT3k2OU8q8Uc7Piw+FuODBlghcMmnX1fONUkhrN2D5zxE/B4djgekIP/lf4KRhcyVtGMoKoCHUFDYqWQ8c1pJh2MERaaDgx3l4CVam/EP4LPUhhTWTj/1lu3P7V7z04UohvcjtglicdmYHl8vvFcUHXwbj4DE3coMVVd+A6/b/LITyTEKh9ztc7qm7eAiqJsIUIeEuGC9r9I4BC5IYtnjCFRhYGXRErLkkmIeKenXqH7ljoiFqLAx5UXiZ7BSyWUVT//Tsr0FscJksyY1l8oHz922l9WFBvzp+xcKiEBeV12oZL1bRmTWyHohLdfveGnfViu+vYtG5vJhz/DlgZEkcQurjiQ74ovbpUD86J7WMbFmxaSLjLNbDpZRD3pLYeS9ZpYZPWmGcIS1P6TvRkbOJMWC4/oJg7cw1hHqaqGnhXhWdltJMhRM1WNTxx2x5H2fJxyVXzur0nge2/z15z62Rx4d0kKN14EKWddMYT3zoruzt1kUYdZjtGhxRXjFWbwVOtb4VxjHg1qrdIEX5f2cODpDV+oNYq4yYueJbdJrgPoywfSnrvMPSa7FTBeCGNTj82ISg/LohJ0ObGn35vwcObE5GTHYhBdGWtzAjg/of0Uch1iFSK2YwwTMcZbcCD9dP2oYnn08tfETMp+HH3COE2JaTnzrhiyZwFKNtQ9GysRLFcMsnzHDeq668m3+PfI/Cy4InV6vSr7+uu4NIH8NYa5Rcoqa8r0QzOiFYRHOrtdO3i8BVtISNZT9wDMkAa11vr5iUaIxiEIFIMWnDO9MG8dTiBGcPkAoq+gY7Io8vbnumk18iu8082F73YPIa0jZ7yNQ0vdCNKd6LoLZ/uKqrrPra6jtIYXCSbWod52699UcKXoneTBZ1EmdFyevHVqEXM87zr8QjCFxdf8Cl7cAhzNV90Xw4RK6TP/6/6DKfMCk8duRn4LaUsCt69FBFmJh3u/Mb9AveLC5YeEZmJh/ykxFh/8ocDemKdbZDQeHyMEBGSlHpnMT6hF0GQdflXbVfEi5JBXUdUJxLjYhfk7r16PuB7YsaoHvzlwYXpER7arKhWweHfXTWGDYyad3vGihpZ2TOHIptCTKmrdcIbxBSvwHXbVUBKThFVlPLdXJjolH3kpH3D+DJ8pIG5/gz3Hg/WTMP2EYQ8A50rDwHaioKI0LThqc3XSPCGBjRpjQ92VDU8eM6OBT6WVZvIywmX7TCSNtRRA9iJKfV+L+KRXQKWLrZCo/BvUc0t08oxL+KAntSLqX4JzBFCPf5neqJyCks+HzWMLSg/prKCqXz26nWPM32XbphbfehQt68lCcgS1534eBwJBjrGC2i5D9p/1GIm+33bzFU8+IcMokC8Eh+n4NoQtjEbPJx6zqz8JgzULZmdU1vsH62gcvYwnK2pwOe2MxuslV+Feu8F7GG0PVh2xpmTjokvBWX7lkLpLvWWFP3QfjlTw/1Z18rnlzliR3fyoYVKUb4kRuJyYqEI3oSBSK5iz69YnLWaEkX638kGDMeaCnYcMPzKMB2rsut6I6hj1M/niVnW+u9M6P9EJ0421LtPx/uidYQsZNewlk+ioLCts0BfqCqEz6kA9K/kEbpdyh0wOeFbQP/ZH6izwPz9A5gN86vp4w6I8EcJ5nXFsgrBkZr3ePssJT3IUTg10qiANjAHob1hwRNFtWI5mZWjtmdXILE8NUuXKMnwd2CiLWmkhrW/dvx7+P35QSPkAi/53RMSEFUdMuyT23eH2yjo50nDl3bBlcbX4VR2C6julDqJRWNVPww1/i/D8deTsFJrEvFu+/7j05a214UZH3gyHpPcthPYwktoijH8ZI9Wr3lP3H2n2i9a28Pi6adFl84VHjhi3ohj08bN96aOS6RO0LO5PhyoDZzNYfAUrZeFeGB28hfFSbqluf+Wx6MqkOoJt4nqa7DCBosDYv4y+rEs+KI35N4anbFRXuhCE9m9AmuckNU8naZOGZM72UvWlaGNQ4I14Ax4y+XbbbYa5TvEH6nEL9TZm5YDwQiU129jU+as8Set/l+q0ZBDOsOyOFZ7llHuKjYuHodssVv/QpuqJmZLiHxfSFT4yuJ9Tv7mNj40Vx2wtBgJ9QMekIrrIkbLCWumFWbRoEKYKEmsgcfhZKqxpLa0eSGfG3zEBbk96O1ALF5V2s3CTrJDC47R3R7W3Mz4ygCLiMjIeN0YcmqpGL7YrI5+38D1q8xuE/q9zAGFQdjssrbJw9l5F6fUPsmOnteafQdpp6Yx6BxjZlPdK4+8Up9r3+meeCi8+P1DhRdd2cZoUc4LCdHSBHgzbxauIYCOA+vTTECYJZVFH3i2JQ2qYNpdpXCUWdi9e2kiKzAbx3tI73N7Lyr4aWQLQ3pNq9zbeUnHeL8J5exlcAX4U/i080fN+t7oFZct5ISOaYiDhN8b5LDS/tbX7jPlV45jEqIDgA1oppkZlt2aHXEBFVqfVDio6hkFDV2mlHT6co956bbUYA38AEMsAfQTjz/BEMuxLra4Tkf9Fhjm/N531wWdK15DWXs40l/qi7VFQbaXfHOrNEpCP2pErVB1rOgHkxS4lSTVMQjs1H/49zlf+6uXLn5H/7usNWUqryqPf+TZGJTRIPK4ccW/6LJG9ho6cIDUMj/LTtc4RirPVYSMJ5bO81YSH21b8WKxPO+4QmeTfhXy3T3BUSoOYTrw2SMaJuiFnTpmpNWJLoIrRPzvjCAz6bbY2fJS0dztJsbWM6KcZW7w7ypahEnOWSpBxdDoU8umyGRHInqD10R8hs9O+vHgykaYL5nOqVpOVtTtyWVGdfIDf6JTX6wzj13s71CztuvY9Ax2i5TO/hgwJBpkq1xePhD8D7DwZmdy1qkFlmJwUxNEgTNwNcDIJzqtTK/wri6OT0ea6rk4h0XdvPhWGzYyxYE+EX7iEjct6C0LiQeIORlm5hQBg29J9wiaNv2j3HmvA5WJ7nK8YbIubL3Bnuat19DMePWz5JTGFS6r5FzyT44lh2sqGdlk9p7o4kBgpymaZ+e/66qirsUMz+1OhOfun6mEDYd36xwpKl4sxo5nb9e7hqDBBcsrCBND0yyRX0CbDCEo4B+fsyeTY+mVmhbyJNYToNahtqEA2eF3OVPeo9WOxD4TvEiXg03pZ2wVIUGqBK6YK0etE881MMb7ce1PEO8aE8r728g1IK2W6IAgTphm8akTfzju5AyoNVlGm1EihYzzv11n13onqZLYfYCFxXcKb7+ekKLRMT9Fy/jj07/59Eii2OQx0y6xSg2Fp1oZkt4ZFPTFkVFgrAVM+cIJ4efyk33oOhyArNrMd3IG4d9Dxmnnd0FUYItsHxlHDExIFoluWHffXrw/fvDQ13ODLFNHEw4C6PXF7hK/ddD+9uO431CuBbmhq8/UIR97zxPWVyGJWw8CzH3ua40jgIk2Y54rx7wz0KVp6+Io1ZymckeFU4OtF9jqGt0tT3xJUp3c4uWdfxAuL/Qg3EepvWPGFDuRp78MVEjbuiONh3p7lOKD8MqbtqRwAzvs/i5Wi3jSDfDbM+N64tg1/2efut75LlBz5OB0JHLw0JJxSS7bk2Rq+CNxQ9p5350kPEXj3fweUgCtY/3gNyKOTL4JE9nQe62+EDkYwmcTiD3/cPF+1wdBp3JaL23Xd30j+G6teuvErGCEBNcBpHmrn8IAUCCepcYHk/8+nXZHMvOFntDuClTnvzSqi0AldYh+t1CW0eU8B07SQjMjXh6hAf0D+BNw4ItRrEo2EAJhucmH54niSY33uVu3YnlyeQT0gV31FfeTOdo9au8Tw07EAZ9FYNvY/c/GbjL6rVCEa4MZ2U6CQkNccbX2f9u49OF2vrc4NbSmgKadHAmNLx3Tj2jGJ2wTh5mRfTHRh1isUF+zwCIHkA+GY7hIVek/8G+jELvayitzcin9OOcXUL/DoVKEaXM+EV9nPyZiui23yucFRSI5jN95fsQ5ccEi4IBQwYnQjmD7fcOZA7w8WXR5faAP8+CoTAhN2NU1oi4G6FIVadzmggWIt/griO/JEI5Tzx+HEnZpWOde1EzNUZPf8MrZ8yMS8Nch20N9+GNW2vCk0KEy1oGruPfI8zDkcmGyzEe0YxJAYOnyHz0zCaesEFb7mnAvW6oaQ7ilcOiacB/WYwTvjvjyoIFvf+VQ4VhEc3q2NCsaKEjCYqmCayMFZZzEwkqpsXxNO/sFGnxI+dzD+yuwE5zRHFXcR8iR+iEHeGEIkWox/LUc5VcFIqt0NkhlQblhvy2Gx0sXtg0KfEgG6fMS/hSi8/v0mxxPqdf+iGkdcvjV04fVKOZbHyu5kxJj3YK4nf/2yHDw3UWmIA89IU6cfrmVutxbhO1dsUoMPA8VDEkGM2eTJ2dQEiG2T9Hq53wxwi7Nz5chRN34V1KVaNGyOCrUePh2/KeFC/fn7tGxu05WpgLc2CgbmCawS1S4+eEnpwrNZ/TfAkcnJ+eb1LVkoChotirPXyL0Zik2q2yI2heTo6dnVBxoeLA1e9SMcApmengeLlqkwCmsrhMCG37HKe3LGxLtbRv4kZaOgB25kN/mPXpB1cKljeESc33YqT5X4hbd+tbdS0IVeZtda+iATUy3/gIGKzFxP3MLQRK0SPufNE6vBlmgcYnkTPVWwmuVGb96Ep2flpUy2oJ94UQCudmp9n3t7QcEzkJsNxcZf+X7pvi1uK8JykFGFSow1SGx9zKtLdz/BH3Iq1NqqW8/oNdhpdjrJRQ08VUIE/mNrUIJcySrY0JOC7xMiaXRVu/4egev/c9pcGHRcyCw6NW8BiCWCDvNodG5B/8Yc2/JQeDMfaDGDkwC4IQeBp4bkMYEH7iCrifbjTlznpuiEkD3rpOjowMpH3tRUKa4rj+tEtt6ajuyMMGcJmqT1SMyVnUjWn3UhQNqsNQBJZrTFJ8Evvp0wNbZX8zsaon5+scVfM8B0Rwerk+JvsfAHo6fp4KielMkVHMwF+8Y4WN6Mhd9nizypyaO7mNce1gIYKoIwTXI3+n93/6Lg4cTrbZEQkyEzaqYl8TdEYxS+IMJq2EifP5lZkgE8Kp5FACBe2OyAeQTyJaZf3RQcXwMjBdeLWS6GID8MhpGIGRTcfHQn2ZAgfIozwObM4BqnvMUuhKKqCVl9N83X0C/aA1W5PhHHHw+KNwJl8igy/tg+b4efWxHWS6N/Q+iof8TTq1ZejiOc7fo+CCukRtLLMn5DBC+7r3L14ySo4f3fMVFZPuukNUQDqUfKqoi6jjajIN3aaCEu70xviEfu2qllMiRjuNsq9nllEv9p4ZSzB0Li+tUgw2fck0GZx/dEadaMk4OJ4NdcYItgQSmkT2yyIEmHlZmHoC0sA3bLh8zT57sjWRuKTy6fJs4TInJCeA33Q9Levf6wuFnEaY9dNAjICzbxiKdGj5rxrPTd3lkGkH3z1cpETge86ERv+bCNO1mvIvsMpWjoGLzRbRBWPvlMVMzS4mCqvGMOOX3S7tbMqIp9caRcOU1WKKq6fCLyXKkrV7lVkdahXWHQx9u15cfHWf1HTk3FScdluCcpQiuFNXSenV/4z6AQNviE4ZcXFxAsK4LW+sS4stIHwNrwAARY7nReWTgtsW6DYdzwJia04WEI/3BTK4IxlhR8kefxSDAQfW7+930ezobPvHKXk3E/Yeq6HrsgrTS/RyrkxRB28u/57dBsvVuAr4QHAL1DedRfxXG/ZLJHG4bBsOiHfJ+oHqbXl/xACpYncfreh1CAwa/uwCi0AuFrGUfWV2BAsJe/MjgW1q6oDdahsVqhumkKwP2tH/iHx00W35ibtNlVO9zigpYlR02kbcK8QORvk+GaCFIeBSMYbGieSfGGxO62Qmy5s3bdh2MqzQEYtt10SJLzHvTAreaLZi9pWW9GbbOZ0WY8vBrCo/KEpi0SaR0X+BxFnj7tqMnDalPHCmkuYDdZcmrT1mUNqP0sn/kld9IGnJaTGviTAI/pf4BnBHp6zX+9zYu8BPrBiWrJWlkbEhsx2i+eQIdQZcv8Rfd0Cf4wQ2GYgzH0qGt2YVe8gR0Icvs9ppQrVrJeqYp+r50g06JghGM/NejTFGDsJ8eED3Ys4uYpB489MyQsUrSUQTmgjCDKTU8DljmADHTADSVvyHRl7+PQG8GW6Wd4hbNIc2giEK3fP/4j73lMJe66EDj9AcXoRI7I8PYtTXRXyMyDuFLytUUnERTwFwP5A8x/5I9msd5c0vVBICpTe/aJ58vr1ewb6Mto640bUC8diKfnTDNIeVQJiYhZzwejKb0TGrpxtYYZucfZAbrFlq4uXqZFSSQHm9lnQPGiS3zPVZDhNGzhbuxpHng5hNxhdVDOm/9wvdhp7J0ao6gSF0jKd77Le/Ekx+xdRfTGa1AhOXnVP1RKZl17n9ujlJf0mnepQDThmip529211S3a9hN19J3X2JW6F40q+TJKf2P/gORalLUe2RojNwd24gSUBoF7tANdIklEVFWIumPPjyxiXM1nWBQ3tdHtHxJKzqdqaOIGACOTlpGRW8vMpe1oRH1qohmJCi8Jg69uVGvvAFUts2hAalEKAMD/ZFo+wKEoydB8XriDBjRRZbtFoWcwo8RfMPqhyDIpY3JA2cTRFIo6Ea2NOJVNcETwiGItc1IzUq3nZgGg/TA5uqcZv44Lu0KqxYMm+4gqKdhoUlbzcK+QGYDpSpqHvt8j4CofsEsTTbKuonf1Plw7i7rfl0cx4SuIgo2ggGZA6refAhFBEQ3K6gVpaH2EpDs/mudiUKlFeCKyUC4YMDZ7Jm0rV3JX03wjF2rVjd6vi50x8uJ3b9myav644YmSktT7OEtSuEzcuXB0X86lafVFwo2lq/10tEBd8LOPluZdatwJExee0PRX2PBvgd3IBy3GhBHgqnAvJZRnt488h0QJ7lE2C2MGg2JNZyW/t4LHlJMD6YyGOrW4SezzmR2mWRpysWv/kp5ZkvnoGRZtKhR4zb89nbkUFc4KxbFTvLDmrTygxeRlzE3gNeYEhs5BdpCBW2pFKRcA9ztZtiZAPojriB9pExYgtiRi4+6fmerIIzPzta/v5la0OdtY4u+Ce32Y/q6GQNKSc2IbLQFqiuFRipxOlT4QVc+V0rWmiWTydF2ag7VZMfneXOsRnL0lgYK5z+uIOhCIvuNh5sPYL8BHGM2K8u9DYJyzVs4frMphlw+zJgAC5vgWvOHuRQntm6krS3ITdXVEahzug1182FqwphZjwUiWuco415+oN3nhjMdc0uwdY+AP0apgUH3sm/1YYWPG2FRTwfjbEKA9zbruBDUzFWogPadZdgyA7tWG3vnL5VSlydEk9wObVKvQuCLOFlNlJCensOZUTVNptIsPg9Vhded/e2kRS1FAu3w/IOyuVdXbCdKT/5pPsB7/gWWA2ItB5MGnfLza2l9GH+VEdhhXVKxW66wdpIUmo7fmOu7HajR6X1/sk0lPno3isNxgSDAVnzLed5yEujiVhz+gOvTACqOgzyvEm37wFUDBrRweE40w3H1hi/KHD04Ov1Fh9y2JBrf8ApXBPnuYiArne+aO++wQNLBYsl5ZsFCV9t6/rXAGuPJvIHhO+TmCqEQRRdqlAinxXO31qpORdizEpXwtkFDgU5Kx5sbjQtgghvLfE6y91zGw0tT1qsfm5LoSToknc6viuSe4XJQ4wA4937scbUiQgqoLFPm0w9uaoFymtHcDKNohWfa5y+8vhprtj8rbhjQYLCSHUKKSkttYX3bnNwzzPbOCvxC1cwh1kbKaOSztdrTw9scXCpKBbII8EHOmnFP7OMDMpmcOtF921QPEkXS4/B+mDihUZ+wl5za37XHV/oFzwd0Cw4E6UnSJ1JADEMPIijrGmM57rmmp47+mb1WHeMgYFq7aM1jyxPG5PHGevhkyQmsiza+HrfRie+JZFC0p6g4lhzzcdJsa7h0bT6x6h8QmvGqHw9tAVG1XSNMqFj9WIAKkWHyvtjWQpmmUjNXUAs85VRfkTE2KerUCxcPTesIAm5DAqLUumBu+qX/dmXS0F1ULaH2SaHpfywcTxOtMce9HPu0wBKowDnqaoalcDjDTxbyUgK+T+76jzQ09Q7xqzZLD9bkmx5FUjACc+39B5qp3JiUbuXRBxCJ4Rvuea9m7dMxFo5tfEapyTc7OM0E2/m8N0h9ahbRcPpMocEnAX20o3vn+W+ouTgc0dfNDldaJ3eMlAYYvGqICX/eIGkmET1IlojIY+8GNHKMZUJzP5GqaAjyZW/+db42UuTjz81rwmbVgws/tPklN+Uo+x0RckmenqcrLL4T2YnwIC6nRmR7FelWyvWOfnSupjKzfMtT7hN5QuxX2DcCUFsnIUvhdpsmi1VA27GXvtuG4++bbDtMbSt5372ktQdBn3+uqKsIhKhFnKQ8VEpJ8wlknjnzDu3wJXWhRddYmKkBz+pSn/ojxfD8+frsiqWdYv3hO9BHamcx0MQK1YZq+UX0/xbPlueiGyqv57wgKeefAie4+uxEQGGA5MeBcrjkqsn5x2YHX1ypBYRrKK+mtCMr2ccRhMK5JKOAST7xyNH9zqH3WN9RVl98H6Mr0bsn6le1+TUwd7hTvF2u0i+7rQdjcmh0ysLHaGAdOjBLF3k9qtWaY6Ju4XCUwBkSsM63ihqe+/UMFJDWbi1o3kPem0iBaM1rTiHM9ZD/Z/OmaBur/ZXcwilHfKnK3JpDK9YnPJChTypWRxFlbICJdDXvCY7CKb2r69rSjnLye85R2Zv89TFYuV+v6xtZRNVUqUDEbBIw3m1jfarmeMpY4u5aea3Fp47JbH1Smlr2124MhrW1PVJ8jwPifwG9XpmJ3+8r0QSAY+QRcI/3VLCA4sNYsRoPPlv+F5aa/HI5Vr6TpW2n1tCnR1Eb5UXq29yAc5k23NsO1NTnRB+/Jumz1AGPuqzc7tAUEuC50OUfiDYP1lt6QVDe9T5Xi2XsSbszcuT4lUL9MMVlzMcaDzB2bpsk3ThNAwd5DuB5/rQG1sHVbohdRIfLPmSnG7wluqeuzOwY2+7SSHYrzhDLVPpcFqA9upW9rK1lSOTbjSdvigJh2GcGllfR9SA+du3XzN/XiBEQlSanY8m54ncEtwj9hb1Kq7cydqeJw/u9foLdTYwrkaM2va8fXlj6wcLy5dJY7L2z1NHOUS1q0tzJF6eZIGzSeiMXvIsgG7I32Q/uD/nwSQ7q9C0H3NVP30ZSMPVh33q2MELusCHHjTKGIbHigIk+zLqZOtgTGaHbG/GoJ7MtS960GibADAyEGYV2dldZgVb5eDX+4Y27TztSDnliNrybYOHpCLnIuk0Js4/vczDW/YJDRRoiekuWV8Z/GB9vJGpUPEFPvAiOEITXp1FB+uX5J1HbsMXSbVp/CTCKUSXK7VHg9WNzLPUDQ0gyfisPVdtKsoFGltlt43tqB4BV7LAcmkCJ58nnn2AHz6xltDKuB9Va3n5LS/p81ynpTy7P7HYJSVYQvgMPFJEADavbqU6GVuA+Vagp8ddnasC8GwxJFvNfv9d0nLohO0oLYU2XBvPLV8GJiJAKWRmUiN+gIzZ22/VoyD3zWFE+Ypu1OClBDgaOeJ/VLaWAPkeBcXPt8cPnXaegSC6OQCArAlKK62tal55sy56XM6/yCdSc6Ad9a2oTSuI/lHO8lffJxf69x/ALEQCfB/W+UuO4Y3qM1c2WY1hAlu83x1UkePKBgRaqThLMXYT0TOJvhB5hKb2hphHZukDKJGu1b0iNJ0Ov4TvxjMkqLDaXIuBjMZb0JW5dmwbQbnvsBeYhP68WvYsTUUh85Q4Oxvi0JYHlqdOrhJ4g9apGihsjt+NMm0twcKqM4VsJAur9bA3MSQWyAxPMHdHsgqnclxWwzjs4UDKn2OozRp2l5Kv3ylLezLceL4t1/QfE66CldqWnVCRh3uJ4+HssHPLGlkAHj/JixMx9mdj01HVrG7qiybeSMeDtOVXVbN5nfS4PDBmt5Ab0KVp4vJkC6KtKwsFIRgEsmfv+S4rctNpOx/Qvc72P2hY08aENcOmn7zUY+RF5cBp3W6TQ7K+bhbhKUiq2FuPn4vtVrtM/tJ/r+wCfeTNBFMhQ0ya6ttFM0sFOLExgE/acK0GlnPfaNmBLY34c/6DIyL/UzS6pSCcgEs7BbpoEiU2xtfRCg0qwE7KbaJf/hQMeGtIrYYt1uN+Ded94buLM25d4/2d+C72GWwplCiHOjPdgVshZ+MkFQ2ASkh9vdYPa8vqgbI3OHwxrbQ7UteYjm9F0IUr8wiQ4C+WrLa81WTamj7wxDVSm8UNiKH7vFGgrJZ/UCRSjidIShHirSAZc7ISonVXurEMqqDtYVyxbFfOZMTKRL/lKT3twZIlCGzP1JhiU3HYIPIZ2zAGqCqH7hW3X2W8nEu/JuohSac1ri2uflu/UEtMs4xPhfDwb0PsCprlCoz/LPPTbE5bRWH7lIZzQA0XppedhK9Ldsyzdl6nSlGzyBHrq8HDwHo0NKQxPdCiid3uET2Ev0RTyOJvcr7rIjp+zXdlLelN9B/VaxtWLMoWJ7GzBqnBowTZKbDoTklSWeC6VXAkvNahjz/WCAy/HhnBug2tXPhtU+5mAMi6LZuDgChHCsERutyvMdSt+/HzHvW4OA6N6/Ez/q15JDYWRTXzyw48tfKXehO00G9Bu6txWHK2555MgB6Bx051S0xqmKh5r117jZXomrwQi0A/mMDMAZsH1plr9sqsEBDNUU/1tBW/927vDJHtxaapABMKm1NhjUjrTBlKS1uiG9GtWQJbQA7fb9i1RRybhihlG1itG3chsm7VdGuwxbUvF5mJt1dKCL2R4m539xhN4tmIvp3oNGmbSBydNLw4sCPrarMywT3QPU0m12a/3fsMc4i7xSRGZO/2YJ4OnBXmvuSDIHzph2pdUOHkAawJEbuHnJFdJAUjPPjAj98xJUpvDgr/R2TwAfg6kXC62c/u70u/0YsemOhpD8ISnOtkyys5bKQUzw3Dk9Rn1zyf2rfPh0YRxLrEDbvRMHG16swuENyehby4AAlBVCLacjUE7j+PxRjlmHe6ZHyhWjFxWaNnRmAeb/Y7et+krEZIJeMJRcmvwwj4Facj0IV5XGjzsBhnhb5mZR4MsS2HFQjLXjIcmqgPMh0PbP2D+zk3oOFsAe4s3qgxXKe3cWWQoKbE6bVI/+tdo9E7pCZAxIIadXcQWFFF82rYgpCFM5fkHs2SJHb6Zw1SHITSGbwwom6dDnaZRXNef6BCi67dIKjy8ndwYcmQUpx5Cgynm8uD3EsWpmgGf3HTW/esOMAiE9aJk2SZ1/e7SLoLKcuvCFtw/Nf/0wrrHT2bragKUdfXLNfJI7r2LQlzgcvhHDo9dWzZUMiyc3/VQRahuSUXusJCyLX0NThj7evPipEuyMXHxHMq0yOu9K48VMm6YHZWb24/m+/2GUORTpBXthdi/ufwcOyOwk3x3ZEaB6B58qXrhv6lehekcfLXavbWVGFBJREGVDmLUDHktj2Ta8s6SY3xJaL1Y8h5j+79xlXba8tI8aKqSg63zktqLMBx1sUExPaLUREzmmtJ9Ol6c/5DhDF+zP/t6bRcVo2xEBcX5Y5CQY/mPizyXvObGlgI8Qzc13VjGTNzIBlj90ueOvc6y+Z9P+ZSA3yhzbPxrsswgEoKGWqM+nU3InDHwmueyX22cW8eg9ev0oe75EVZJ6J2NjxTFT001JpDRcDbTycgcrTp4AZL2WhJeY9MekY8BMSOcMWnJt54JwR0//ozoy/iizqskT0bv65g+Y9pPza67y67ne1r7pZycME8J7vs38zdUhR+yYdQ5KGzlFU7d7pxFWWUt7y3yVugsmZlcNLxMVnHZKl+i52xAsr+U2qchd0+/aTMO8XtFBHJ3HaWtitMiqt01Vkk10MQsug97HmY/XuVkVVOnz2zeXWQWrpE7Xo6r+HgYZg4tXqW7+OPeKQ/0qpaN5IWF/sxRwrsc3MiF3JB4mJsqMxfgSaVsjDsIG2Wx2x0v6+rTmOGRX4ZYq42ci/BHHzPCsL9L+DzaoraTe/+FYq9JWJsGv20hXCKbk7AeSRhF/N0t/FkZs6rs8ERM5+8/YXnUjjs6O3VaMRi84h5smXpGWv6Utl1e0kc4MC1bYwSaAFYiXrrEGdG63AgVroh8aAmgGOuGxJRMCO0Uw0//Tjgxx5RQJ3a/SQtZ/P7GuDGlHxV0MirUqLG/6pAWwqzkvcAUKXb+HR6tVFzV7Z128efqLDbAha0g2XEiiCZslOITESh68O1NEra+p7CZu/vY3kz8eC8i/yREQlhq2rnKZVhrPMzsg88+LLIzA2ulw07g5lmNGm1VdE50jMriH1sHwrEQa2+5wzqMRfuKc82P9OGl4LRjwKbK2fYd0XXsSV1PE5+OokQYS6CfWZr2i1qSRHAiAMsew+UnjconKx52LmGDA3Xaxx0WxRfxkhyMKS3TWYu02I3tnwH5eccMYZfLPcqqD7itHKkO2jTs3XRDT6iuR4NlphRAK/W0CaPitWFUUp9sGmKceTWHsQ6cR63weQZAWINgFUoPusx6TwxdKulyWaTj/dYaohDpnpSDn6glH1DPb1j8aF2DhkOyvMj3idwUDW/K5sDkToCbmCqkJaiCVauL5ndEeZ/cba8GW7O/ZQtCNVJhdfzvEOxuLeCN4py2DE630aNbjfjye0PrteY8n+MBL00ELIbjgYHtopFwbVxs/veUMMWNMRXd5JfpieeDSJmBpp25Hy53YfFpsmTZ8fcO34jnktKlqtY9VXvIrnbh8TbFL3ue9v4yjxJ7jyepND5RxzkG3Le2PwXzfrArc4OK4rVVcJ3DPhPUNqqpV8Hj5WP1IVQpaZrA6oJyLxjg9aGHkfCeAO4ylRxNRRTXSbis9ezm1jgurztJfQyjHHf8IxNrmxgW50/xbjpvDGUTh6GL0HZsVNvTtWkQgcZGpUOxvlIQV0D6dnGrwc/LsxyabWQL545BR1o6E0hU1BqWNx8s3PxMe8BTuZ/BQlS6Fvf1u+wssPaQ5bt8xosz400Y3gBa/6rGh6yyp41uaCc7cYWIx5bdXFFGmN20o7VoZ+sXvu7coSOllSs5pLEyEsxLVq0fhX62DvcUNNTb8Bz7IH5tQnVMHk2gI7zbBhditmeuModJglSxL7jJSM51xYQfSfT2oDCTHX8eWNSC8JbcJIAJAoOsZ1BXegN4SphGK9zhpOt7nurgN4X3TvqA2+magkD2qgKBT+swDTkKfFhAeK4qCthqoa+7gio+7iasBn4xQExo/EjmzIG5tMgJPnyOasAj/m89m+18+4CiVnyBb6kR69mzUV2EtOxxfMWtuWf04Rp/7OuQwb9a9Y+gnOjlBszKhdXHBRHJaPn4ldWdB/14GrbEsjJ5Vb9ZEbma2ygj38QFDfpa88SjlEAh4JNS+Q/WtTO9VONGQzSdCzz12aiIOHyH2fIHlYj3/W+THueLLpgyPFk57Jr3Ptgclij2VmpDYbxy4LfUo+MGYHdfv4xGQ9o3KxjpEcmIxhZ0aLGiVthBuTkU5TD9RVi7iPReqvRWDH0NturxLIyZkUPYoruK5TDRymeLwWGeBhSqQXpz11xWVwoVfOJqcYvGm6yXJ0UoVwOeTHfVFEQZ0zjOTtv4OF1EyzmjUncOapo/YaLw/DxeQdVTDTvr6dOZjc/dqlpVMjpo5l2HDj6CSARkTryavUXe5xuKGEKA8PFbuI+MIiWjPUOTU5qpQEdehQhaY+LWEKgHc0vzUYNiYtMBAOUkg7AP4RNKORJ4hoTeHz6NSUD2kplJvpBE0ScjnMZ+LrvXwTRcM11LMlJSF+pWzvjOlzcyfx+D8m4J9EniMO71tlEl3I4UlZm2RPAcu2CMEvM1RhPRgwN4UXX5irnH5ksZYdIGo21Y/NQmI1dpyzJ8pcubMFwlAmCLaIu4JcwyVe8qnBpZEPXjL6KMPYM/EY0CGaSqUXMwxiF2Hd753gsQFJd4vufI+uW3tMnxoZJAdYrgV0ndplESCHihLLhwFduxArV8IH9XkpiyzjiYRwB6SK5H2JVdEKNeYSYyfpPNl3ejBb+FtwsPCJLlni+Vawjbt6XEMVriLWsDW2UcEW8lkrMl5W8jawe4coNZ92P6qb1HL30m1eLKkLmygyFX1EhiFPDvUtWH22mkhgY9rSOZPwoj+j9UQ4UK1sa/mNnjy7dQKbpopByZ7ChHF/9VH6gewmOPGlQSGnulgLOZTXIRnZHXVYucSy2mbPU4xO8XSAxX88D1+JIxkdOPGguDLo8unWrdOZ2fdD7BuGwJQOX+WQquEYtab6kFcyuDKKGwB+FaYKwr9U53j6jVkIJywlq6bbgTaX0or4aKwPFvU3nCJ4O9Rbn6iuGOkQyCsUJ5yKrZBjLZp0027utEFZQtm0UP61uslKVmub1v2hShFXzODQfaBEaELr4xYTQ7SbMniRJeBQcxITzPsQnJWHKtpvoZAfeONe6mQvRKmFN/ww9EKw5LMfD+jNYDnO5N1CX0DXnfBTLJrED1H9U6LzonN/+y87MpiwQktaY0s+DeRob6dEHqXvhev3rdWOsoR1GFTCRWWwvis3y4HSBI9Ljifn2XHZPS5p0DKG4uhQIqhr5CHt4kgaDCMJISTPt5BSxGJq2f7jOmR2MZb3ONNyEHYDsuBi5R5/dHhtkhfSDEGeXfiFqjZLzBmdPPfdLit+D8ur/+oWsWQ3RHiokp9XzGVbvMdQ380I0s3ua/MHKCuDBmXAkuP6Fv8rg1dHBX02riMUBIxfHYwaOBjNTfvGaJuiIAjIEKqw6DJVKg8FB4AGzyeCJRGUU5gSviAjAdQrmPOxdHtCH2+RHNzNseEbh6VuliNiwnsnmd8M8ULRYxkdY+Zf0sCGsE9werVzFpjVQIM0cItcDbBLtzEDuh9SzDlkBsdDQ74C7HINptH3fwj4REPdIHSw2aBBUMS0gayTpcDM6jEzDeSYwzipTSYTU3FhuflT2OFOYN00W6fdMGBmt8jppWF+5+g64YrGHfdMi5p6OHLvN+7jo51kuKTBIrD5CnBG/hKgpT61HfPYKcbkap2lacHSN52le7z3baosiAwPEwDMB/LON8wEArW7xtIrq1yJi/L5dDKKkajYw7ZRnIQK2CHR7qnn6BuJJb+Wcg4+R22J/afFFfLS0393BAr6TLj2j4TC+Rgsw/tlmNuGJDViDw7hYpvfx97saB0qIROfb4jgsbomZdrT4y902bCrHmqd9kq32aES+6q2SqWyJjYGPMLGUhqh6M6xHqsV9k/nLd9pBP4RPS82DbETiEJfxUxDqCmsRGpPKgHkMPtjVZ2MJnq7YDyj8yFn3z85ewpPFUBrSQHdk3ZtZC/GbFacBxVYgQZj6OiMpC1nNrBg12qaZKBLsTYJhYKE3pd/RNfVW1DgzJoBzmL32fhznHCk0ar72hfZVoiLK563vFFWVC/tIkt8bV1Vr59fPG/K7FDe055jTDVnDblKMGqDVpusQi8q0lYB5s1LYqSdmNg40v+YH1ryTrV703jYqZNld+gK96BNyzLKqxhLfH7hhg1McYqy9GFwD5RXcrNcRMJPbrTubHFlqMzp7b7D7iLs+p920+EotKm+wnMiZBqmI+fzQL07gewucORHqmXlWEy/LQK7ujXc4wQXssOUrIlQdmDAua/pl6CL0mb2B9V025GldOj8o4tpNmY7RX9RKdJu50Va1TRim6ltBTtO0CNDRmZHSc5LiQrBEDOPmZuFGwgu3dacI3HhlHaGZmxu/5yOzSroLZxX26tH5jL6QNWW3Zy5bT7UTyhtjnTHlx1NuREP/LyKABWahN3KVSPUdIBbAhFvri6G1VPMJY9lFTLmlDRYAkfFTTsuUFD/rHI98DH01U9qfCaNO2XR7Vh47IhIxs6t8iRsyBUDAproV2uOALiXtfiKH64Fl1Y1Dd0PuKaKyJf6z3FquRZ8Yc+3D5Y2Z/LsLajq6GIv8OxeXiBIrELD//kN9T2HcmvKr9UDkxkIeBJXJxyT2kLKMBvPxsTwykIINmz+1eaL1LA2rVJKSFsxGQ6U/cue3TE4Ifk/Nfwl4x+3pbIjQV3TIYUNE+3d1QgBCzIQrV9lyq/UJRTB8XXMNxaCkpDMaQH4X/dLJnQjZWUYERyTz43nIYYiw71IaEVi08dwhAx1amsn8n02o6pRYuacmkF0db/+d8T4XGW2YuNSZrYpbtnAaX3DL8QZTIDLJjTHpusjjZZ/+TwQonPeXnFbCVsZ3/lfTYp1l63iNrbFJQJSMJd7v+GX9x1WYuyviLoiBOoQQWDQa3tyzNURFjqmi1PhzdRX7T+ewCxo0OL6U3ab/B3Nk9Vjfzq1V1YK9bV4fpiJ6wh1iPz06qAzVdBK1Fvql3/Ca6DTLdBypXChDs9+5IE8n9G6fze9YPR/gCoV9ygctUbAx1tzXdiYlAB02YUcgvABbNWbtVCMHuyG8FekTq1fCHFIwoe3CuGVkT+1T7ei7rcLgjNnPAemMM9yqUf5UsjCDx4ZvUt43z994b6ufWB07ltDvxDLkQPib5hYX8J8xiA1e9IY0nuS4OUmeL/82e2WhGwE5bhL7Rloao5QIXw5aZkV4E4aDj0qkqx2tLuX5fOC3/H1XB4aHZJwBOdQCBuIuZQiAfzLyfRUkP1Oi3y7wNid18zi/YtVqRy7E+Lr+imK14z7k4/u2SE49hLZ4+atJqpvel+wB+UcYoacAiDmetw85yrWGvpK+/cY9WLJteq1mAxNJjankSPY3r37hYaR21330anWOScnM2pzntWNud63pS/MVfLwVUjeiI2XHnjiPSoFKC2A2QCzwpNTgBLLWeZF9GkJBNve5QMqCThVmhkHu3Iu8ku2jHh7OzJAXsdgj9Wx+ydaVs5kCB5CRrtVXA0SNjkqiWWkx9tTriS10d1A35grLu1kCKe3SuSb0QeoMwOf0kH1OURWzlz03Nwe9O8+tHe6QqT9RGxi2fFe8wg9h1g/y2jehMa1xHr6GHA/slDVWParqQ2qts3foWROXg6koTA8NmpgUMYWHVAxicLWTuLx4R639V+0zdT1ULmfdy+TwXuk90ZHeb1JJ/snWv1Parkv4FYh+9NvnPG7g470V4zx4dB8Sb2eDDnzoBtXTnhjexQTxod/JxDo/lIe6SM0CgzcB6cqmEgHzkoexfZHx3opI9MiEz4xxT7f/yzrPZH+7CW+fYjmdBcWpcgimkp6afLLYXiEhxRZCOLxtWhAN+3OUgDQiJZSJaYtk/LfgeYQvnj7FuHnIOvmeTu1v1uqEeEtsRb+KVCtmxQjbkS7YIuH5PoD7UdYETfdDPz+JA/CCE0qf0yQJ28XFx++CjUjXWKbW/qDe1afPjMImmfiNPsBkxUTqEiXBYZwtI+iFXr8IMpqF8k6k7qU8cxS1tov8ciA4kQCPkuw91Lxtw53hlchBD+03VyDctXuBqDaRUnJl7dMEzGeEfDK3FfA1FTTQ1GizZa3v6eumezet6RzAZI+8P9qfsltsr/4o5wmJCbmem7/ThlMwW1afPNVk+0Z2fecWc0utpbkxRdi9C9oYGb1c2DcOOHJLKSAc5h8zoNKWxuC7SfZn5Q3MNFqBvmAMFZ5DZcSZfDkyTAchOHoot3X0SgXxK3jXNp9036TgDtJEkcgTw/YkjwPqxI8p38vFQ5DtGqfjf7Xq49ZouCnx2+TNwoDd9a8vPCbuoWfdK6j2vYFUNGaq38LvsvXR0R27r3WKtzN+avt5GwUsukZXWe2PttxYSF4CsY9/dhwQaJfMItTp4l4b6W47WLbiQokz1hlZQNEbd28qV0RSGqNoaJyLfJZ672LdZc3ne0F2bqIznkE9SxZy+Sr+WMPks1flKK+5HqYl2KTLhbfAyKN2oyZnuvA9lBdG+a+Bk5fYHkiE3SIF/Hpir29vMvnXgSWvp3I7KBm1fpy3fL+RJYFoj+tldskdiYHQxuwROlTMkyQ7LS7m2EDIMcXjXWCNQnRX4mBA7Te2iWca2/OmtqKv8gyDTowKJNAE7pk6hVUkXr6YX7p9EwQRvSsm6DhrNXQhYkBSkvG2gaLg91zNyimrfRJcjm7yiPIvm7s9NPYVhW1NYJw6yw6Kvq0fVZa8ktTNI/M9443KUXnH0sG3f25GJabatEsskgtr7Vtv3UoavnC5fZtmzEKzB8l6MkEJ+Ued1+jknu1uvTDRCrf+k3AbexCX2EkAffgLKLQQA4Y8FoDQ1Y8+WKMjrYtEFUB6305GWdwIUMFPdy8oLyHykqJlTWU1jdUe6IzY9KjnnzR3ejAYNKHaFEM91zAzlJaVW2/0OPhc++6YtXfYUC80DGueDp/g0bgP4sPX7IZM3SYtm4dqXyqYh85nNiuwJbT</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.jelech.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.jelech.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="感想" scheme="https://www.jelech.top/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>I/O 多路复用</title>
    <link href="https://www.jelech.top/posts/40254/"/>
    <id>https://www.jelech.top/posts/40254/</id>
    <published>2019-02-03T04:09:33.000Z</published>
    <updated>2019-03-04T07:47:34.665Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="IO-多路复用是什么意思？"><a href="#IO-多路复用是什么意思？" class="headerlink" title="IO 多路复用是什么意思？"></a>IO 多路复用是什么意思？</h1><blockquote><p>来源：罗志宇&lt;知乎&gt;：<a href="https://www.zhihu.com/question/32163005/answer/55772739" target="_blank" rel="noopener">链接</a></p><p>假设你是一个机场的空管， 你需要管理到你机场的所有的航线， 包括进港，出港， 有些航班需要放到停机坪等待，有些航班需要去登机口接乘客。 </p><p>你会怎么做? </p><p>最简单的做法，就是你去招一大批空管员，然后每人盯一架飞机， 从进港，接客，排位，出港，航线监控，直至交接给下一个空港，全程监控。 </p><p>那么问题就来了： </p><ul><li>很快你就发现空管塔里面聚集起来一大票的空管员，交通稍微繁忙一点，新的空管员就已经挤不进来了。 </li><li>空管员之间需要协调，屋子里面就1, 2个人的时候还好，几十号人以后 ，基本上就成菜市场了。</li><li>空管员经常需要更新一些公用的东西，比如起飞显示屏，比如下一个小时后的出港排期，最后你会很惊奇的发现，每个人的时间最后都花在了抢这些资源上。 </li></ul><p>现实上我们的空管同时管几十架飞机稀松平常的事情， 他们怎么做的呢？<br>他们用这个东西 </p><p><img src="../../assets/ioMulti1.jpg" alt="img"></p><p>这个东西叫flight progress strip.  每一个块代表一个航班，不同的槽代表不同的状态，然后一个空管员可以管理一组这样的块（一组航班），而他的工作，就是在航班信息有新的更新的时候，把对应的块放到不同的槽子里面。</p><p><em>这个东西现在还没有淘汰哦，只是变成电子的了而已。。</em></p><p>是不是觉得一下子效率高了很多，一个空管塔里可以调度的航线可以是前一种方法的几倍到几十倍。 </p><p>如果你把每一个航线当成一个Sock(I/O 流),  空管当成你的服务端Sock管理代码的话.</p><p><strong>第一种方法就是最传统的多进程并发模型 (每进来一个新的I/O流会分配一个新的进程管理。)</strong><br><strong>第二种方法就是I/O多路复用 (单个线程，通过记录跟踪每个I/O流(sock)的状态，来同时管理多个I/O流 。)</strong></p><p><em>其实“I/O多路复用”这个坑爹翻译可能是这个概念在中文里面如此难理解的原因。所谓的I/O多路复用在英文中其实叫 I/O multiplexing. 如果你搜索multiplexing啥意思，基本上都会出这个图：</em> </p><p><img src="../../assets/ioMulti2.jpg" alt="img"></p><p>于是大部分人都直接联想到”一根网线，多个sock复用” 这个概念，包括上面的几个回答， 其实不管你用多进程还是I/O多路复用， 网线都只有一根好伐。<strong>多个Sock复用一根网线这个功能是在内核＋驱动层实现的</strong>。 </p><p>重要的事情再说一遍： I/O multiplexing 这里面的 multiplexing 指的其实是在单个线程通过记录跟踪每一个Sock(I/O流)的状态(对应空管塔里面的Fight progress strip槽)来同时管理多个I/O流</p><p>. 发明它的原因，是尽量多的提高服务器的吞吐能力。</p><p> 是不是听起来好拗口，看个图就懂了.</p><p><img src="../../assets/ioMulti3.jpg" alt="img"></p><p>在同一个线程里面， 通过拨开关的方式，来同时传输多个I/O流， (学过EE的人现在可以站出来义正严辞说这个叫“时分复用”了）。 </p><p><em>什么，你还没有搞懂“一个请求到来了，nginx使用epoll接收请求的过程是怎样的”， 多看看这个图就了解了。提醒下，ngnix会有很多链接进来， epoll会把他们都监视起来，然后像拨开关一样，谁有数据就拨向谁，然后调用相应的代码处理。</em></p><p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br>了解这个基本的概念以后，其他的就很好解释了。 </p><p><strong>select, poll, epoll 都是I/O多路复用的具体的实现，之所以有这三个鬼存在，其实是他们出现是有先后顺序的。</strong> </p><p>I/O多路复用这个概念被提出来以后， select是第一个实现 (1983 左右在BSD里面实现的)。 </p><p>select 被实现以后，很快就暴露出了很多问题。 </p><ul><li>select 会修改传入的参数数组，这个对于一个需要调用很多次的函数，是非常不友好的。</li><li>select 如果任何一个sock(I/O stream)出现了数据，select 仅仅会返回，但是并不会告诉你是那个sock上有数据，于是你只能自己一个一个的找，10几个sock可能还好，要是几万的sock每次都找一遍，这个无谓的开销就颇有海天盛筵的豪气了。</li><li>select 只能监视1024个链接， 这个跟草榴没啥关系哦，linux 定义在头文件中的，参见<em>FD_SETSIZE。</em></li><li>select 不是线程安全的，如果你把一个sock加入到select, 然后突然另外一个线程发现，尼玛，这个sock不用，要收回。对不起，这个select 不支持的，如果你丧心病狂的竟然关掉这个sock, select的标准行为是。。呃。。不可预测的， 这个可是写在文档中的哦.</li></ul><p>​         “If a file descriptor being monitored by select() is closed in another thread, the result is     unspecified”<br>​    霸不霸气</p><p>于是14年以后(1997年）一帮人又实现了poll,  poll 修复了select的很多问题，比如 </p><ul><li>poll 去掉了1024个链接的限制，于是要多少链接呢， 主人你开心就好。</li><li>poll 从设计上来说，不再修改传入数组，不过这个要看你的平台了，所以行走江湖，还是小心为妙。</li></ul><p><strong>其实拖14年那么久也不是效率问题， 而是那个时代的硬件实在太弱，一台服务器处理1千多个链接简直就是神一样的存在了，select很长段时间已经满足需求。</strong> </p><p>但是poll仍然不是线程安全的， 这就意味着，不管服务器有多强悍，你也只能在一个线程里面处理一组I/O流。你当然可以那多进程来配合了，不过然后你就有了多进程的各种问题。</p><p>于是5年以后, 在2002, 大神 Davide Libenzi 实现了epoll. </p><p>epoll 可以说是I/O 多路复用最新的一个实现，epoll 修复了poll 和select绝大部分问题, 比如： </p><ul><li>epoll 现在是线程安全的。 </li><li>epoll 现在不仅告诉你sock组里面数据，还会告诉你具体哪个sock有数据，你不用自己去找了。 </li></ul><p>epoll 当年的patch，现在还在，下面链接可以看得到：<br><a href="https://link.zhihu.com/?target=http%3A//www.xmailserver.org/linux-patches/nio-improve.html" target="_blank" rel="noopener">/dev/epoll Home Page</a></p><p>贴一张霸气的图，看看当年神一样的性能（测试代码都是死链了， 如果有人可以刨坟找出来，可以研究下细节怎么测的). </p><p><img src="../../assets/ioMulti4 .jpg" alt="img"></p><p>横轴Dead connections 就是链接数的意思，叫这个名字只是它的测试工具叫deadcon. 纵轴是每秒处理请求的数量，你可以看到，epoll每秒处理请求的数量基本不会随着链接变多而下降的。poll 和/dev/poll 就很惨了。</p><p>可是epoll 有个致命的缺点。。只有linux支持。比如BSD上面对应的实现是kqueue。 </p><p><em>其实有些国内知名厂商把epoll从安卓里面裁掉这种脑残的事情我会主动告诉你嘛。什么，你说没人用安卓做服务器，尼玛你是看不起p2p软件了啦。</em> </p><p>而ngnix 的设计原则里面， 它会使用目标平台上面最高效的I/O多路复用模型咯，所以才会有这个设置。一般情况下，如果可能的话，尽量都用epoll/kqueue吧。</p><p>详细的在这里:<br><a href="https://link.zhihu.com/?target=http%3A//nginx.org/en/docs/events.html" target="_blank" rel="noopener">Connection processing methods</a></p><p>PS: 上面所有这些比较分析，都建立在大并发下面，如果你的并发数太少，用哪个，其实都没有区别。 如果像是在欧朋数据中心里面的转码服务器那种动不动就是几万几十万的并发，不用epoll我可以直接去撞墙了。</p></blockquote><h1 id="几种高性能IO模型浅析"><a href="#几种高性能IO模型浅析" class="headerlink" title="几种高性能IO模型浅析"></a>几种高性能IO模型浅析</h1><p>来源：白小狮<csdn> <a href="https://blog.csdn.net/baixiaoshi/article/details/48708347" target="_blank" rel="noopener">链接</a></csdn></p><p>服务器端编程经常需要构造高性能的IO模型，常见的IO模型有四种：</p><p>（1）同步阻塞IO（Blocking IO）：即传统的IO模型。</p><p>（2）同步非阻塞IO（Non-blocking IO）：默认创建的socket都是阻塞的，非阻塞IO要求socket被设置为NONBLOCK。注意这里所说的NIO并非Java的NIO（New IO）库。</p><p>（3）IO多路复用（IO Multiplexing）：即经典的Reactor设计模式，有时也称为异步阻塞IO，Java中的Selector和Linux中的epoll都是这种模型。</p><p>（4）异步IO（Asynchronous IO）：即经典的Proactor设计模式，也称为异步非阻塞IO。</p><p><strong>同步和异步</strong>的概念描述的是用户线程与内核的交互方式：同步是指用户线程发起IO请求后需要等待或者轮询内核IO操作完成后才能继续执行；而异步是指用户线程发起IO请求后仍继续执行，当内核IO操作完成后会通知用户线程，或者调用用户线程注册的回调函数。</p><p><strong>阻塞和非阻塞</strong>的概念描述的是用户线程调用内核IO操作的方式：阻塞是指IO操作需要彻底完成后才返回到用户空间；而非阻塞是指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成。</p><p>另外，Richard Stevens 在《Unix 网络编程》卷1中提到的基于信号驱动的IO（Signal Driven IO）模型，由于该模型并不常用，本文不作涉及。接下来，我们详细分析四种常见的IO模型的实现原理。为了方便描述，我们统一使用IO的读操作作为示例。</p><h2 id="一、同步阻塞IO"><a href="#一、同步阻塞IO" class="headerlink" title="一、同步阻塞IO"></a>一、同步阻塞IO</h2><p>同步阻塞IO模型是最简单的IO模型，用户线程在内核进行IO操作时被阻塞。</p><p><img src="../../assets/ioMulti5 .jpg" alt="img"></p><p>图1 同步阻塞IO</p><p>如图1所示，用户线程通过系统调用read发起IO读操作，由用户空间转到内核空间。内核等到数据包到达后，然后将接收的数据拷贝到用户空间，完成read操作。</p><p>用户线程使用同步阻塞IO模型的伪代码描述为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">read(socket, buffer);</span><br><span class="line">process(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即用户需要等待read将socket中的数据读取到buffer后，才继续处理接收的数据。整个IO请求的过程中，用户线程是被阻塞的，这导致用户在发起IO请求时，不能做任何事情，对CPU的资源利用率不够。</p><h2 id="二、同步非阻塞IO"><a href="#二、同步非阻塞IO" class="headerlink" title="二、同步非阻塞IO"></a><strong>二、同步非阻塞IO</strong></h2><p>同步非阻塞IO是在同步阻塞IO的基础上，将socket设置为NONBLOCK。这样做用户线程可以在发起IO请求后可以立即返回。</p><p> <img src="../../assets/ioMulti6 .jpg" alt="同步非阻塞IO"></p><p>如图2所示，由于socket是非阻塞的方式，因此用户线程发起IO请求时立即返回。但并未读取到任何数据，用户线程需要不断地发起IO请求，直到数据到达后，才真正读取到数据，继续执行。</p><p>用户线程使用同步非阻塞IO模型的伪代码描述为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">while(read(socket, buffer) != SUCCESS)</span><br><span class="line">;</span><br><span class="line">process(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即用户需要不断地调用read，尝试读取socket中的数据，直到读取成功后，才继续处理接收的数据。整个IO请求的过程中，虽然用户线程每次发起IO请求后可以立即返回，但是为了等到数据，仍需要不断地轮询、重复请求，消耗了大量的CPU的资源。一般很少直接使用这种模型，而是在其他IO模型中使用非阻塞IO这一特性。</p><h2 id="三、IO多路复用"><a href="#三、IO多路复用" class="headerlink" title="三、IO多路复用"></a><strong>三、IO多路复用</strong></h2><p>IO多路复用模型是建立在内核提供的多路分离函数select基础之上的，使用select函数可以避免同步非阻塞IO模型中轮询等待的问题。</p><p><img src="../../assets/ioMulti7 .jpg" alt="img"></p><p>图3 多路分离函数select</p><p>如图3所示，用户首先将需要进行IO操作的socket添加到select中，然后阻塞等待select系统调用返回。当数据到达时，socket被激活，select函数返回。用户线程正式发起read请求，读取数据并继续执行。</p><p>从流程上来看，使用select函数进行IO请求和同步阻塞模型没有太大的区别，甚至还多了添加监视socket，以及调用select函数的额外操作，效率更差。但是，使用select以后最大的优势是用户可以在一个线程内同时处理多个socket的IO请求。用户可以注册多个socket，然后不断地调用select读取被激活的socket，即可达到在<strong>同一个线程内同时处理多个IO请求的目的</strong>。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。</p><p>用户线程使用select函数的伪代码描述为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">select(socket);</span><br><span class="line">  while(1) &#123;</span><br><span class="line">    sockets = select();</span><br><span class="line">    </span><br><span class="line">    for(socket in sockets) &#123;</span><br><span class="line">      if(can_read(socket)) &#123;</span><br><span class="line">        read(socket, buffer);</span><br><span class="line">        process(buffer);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中while循环前将socket添加到select监视中，然后在while内一直调用select获取被激活的socket，一旦socket可读，便调用read函数将socket中的数据读取出来。</p><p>然而，使用select函数的优点并不仅限于此。虽然上述方式允许单线程内处理多个IO请求，但是每个IO请求的过程还是阻塞的（在select函数上阻塞），平均时间甚至比同步阻塞IO模型还要长。如果用户线程只注册自己感兴趣的socket或者IO请求，然后去做自己的事情，等到数据到来时再进行处理，则可以提高CPU的利用率。</p><p>IO多路复用模型使用了Reactor设计模式实现了这一机制。</p><p><img src="../../assets/ioMulti8 .jpg" alt="img"></p><p>图4 Reactor设计模式</p><p>如图4所示，EventHandler抽象类表示IO事件处理器，它拥有IO文件句柄Handle（通过get_handle获取），以及对Handle的操作handle_event（读/写等）。继承于EventHandler的子类可以对事件处理器的行为进行定制。Reactor类用于管理EventHandler（注册、删除等），并使用handle_events实现事件循环，不断调用同步事件多路分离器（一般是内核）的多路分离函数select，只要某个文件句柄被激活（可读/写等），select就返回（阻塞），handle_events就会调用与文件句柄关联的事件处理器的handle_event进行相关操作。</p><p><img src="../../assets/142333254136604.png" alt="img"></p><p>图5 IO多路复用</p><p>如图5所示，通过Reactor的方式，可以将用户线程轮询IO操作状态的工作统一交给handle_events事件循环进行处理。用户线程注册事件处理器之后可以继续执行做其他的工作（异步），而Reactor线程负责调用内核的select函数检查socket状态。当有socket被激活时，则通知相应的用户线程（或执行用户线程的回调函数），执行handle_event进行数据读取、处理的工作。由于select函数是阻塞的，因此多路IO复用模型也被称为异步阻塞IO模型。注意，这里的所说的阻塞是指select函数执行时线程被阻塞，而不是指socket。一般在使用IO多路复用模型时，socket都是设置为NONBLOCK的，不过这并不会产生影响，因为用户发起IO请求时，数据已经到达了，用户线程一定不会被阻塞。</p><p>用户线程使用IO多路复用模型的伪代码描述为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void UserEventHandler::handle_event() &#123;</span><br><span class="line">  if(can_read(socket)) &#123;</span><br><span class="line">    read(socket, buffer);</span><br><span class="line">    process(buffer);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">Reactor.register(new UserEventHandler(socket));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用户需要重写EventHandler的handle_event函数进行读取数据、处理数据的工作，用户线程只需要将自己的EventHandler注册到Reactor即可。Reactor中handle_events事件循环的伪代码大致如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Reactor::handle_events() &#123;</span><br><span class="line">  while(1) &#123;</span><br><span class="line">    sockets = select();</span><br><span class="line">    for(socket in sockets) &#123;</span><br><span class="line">      get_event_handler(socket).handle_event();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事件循环不断地调用select获取被激活的socket，然后根据获取socket对应的EventHandler，执行器handle_event函数即可。</p><p>IO多路复用是最常使用的IO模型，但是其异步程度还不够“彻底”，因为它使用了会阻塞线程的select系统调用。因此IO多路复用只能称为异步阻塞IO，而非真正的异步IO。</p><h2 id="四、异步IO"><a href="#四、异步IO" class="headerlink" title="四、异步IO"></a><strong>四、异步IO</strong></h2><p>“真正”的异步IO需要操作系统更强的支持。在IO多路复用模型中，事件循环将文件句柄的状态事件通知给用户线程，由用户线程自行读取数据、处理数据。而在异步IO模型中，当用户线程收到通知时，数据已经被内核读取完毕，并放在了用户线程指定的缓冲区内，内核在IO完成后通知用户线程直接使用即可。</p><p>异步IO模型使用了Proactor设计模式实现了这一机制。</p><p><img src="../../assets/151608309061672.jpg" alt="img"></p><p>图6 Proactor设计模式</p><p>如图6，Proactor模式和Reactor模式在结构上比较相似，不过在用户（Client）使用方式上差别较大。Reactor模式中，用户线程通过向Reactor对象注册感兴趣的事件监听，然后事件触发时调用事件处理函数。而Proactor模式中，用户线程将AsynchronousOperation（读/写等）、Proactor以及操作完成时的CompletionHandler注册到AsynchronousOperationProcessor。AsynchronousOperationProcessor使用Facade模式提供了一组异步操作API（读/写等）供用户使用，当用户线程调用异步API后，便继续执行自己的任务。AsynchronousOperationProcessor 会开启独立的内核线程执行异步操作，实现真正的异步。当异步IO操作完成时，AsynchronousOperationProcessor将用户线程与AsynchronousOperation一起注册的Proactor和CompletionHandler取出，然后将CompletionHandler与IO操作的结果数据一起转发给Proactor，Proactor负责回调每一个异步操作的事件完成处理函数handle_event。虽然Proactor模式中每个异步操作都可以绑定一个Proactor对象，但是一般在操作系统中，Proactor被实现为Singleton模式，以便于集中化分发操作完成事件。</p><p><img src="../../assets/142333511475767.png" alt="img"></p><p>图7 异步IO</p><p>如图7所示，异步IO模型中，用户线程直接使用内核提供的异步IO API发起read请求，且发起后立即返回，继续执行用户线程代码。不过此时用户线程已经将调用的AsynchronousOperation和CompletionHandler注册到内核，然后操作系统开启独立的内核线程去处理IO操作。当read请求的数据到达时，由内核负责读取socket中的数据，并写入用户指定的缓冲区中。最后内核将read的数据和用户线程注册的CompletionHandler分发给内部Proactor，Proactor将IO完成的信息通知给用户线程（一般通过调用用户线程注册的完成事件处理函数），完成异步IO。</p><p>用户线程使用异步IO模型的伪代码描述为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void UserCompletionHandler::handle_event(buffer) &#123;</span><br><span class="line">process(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">aio_read(socket, new UserCompletionHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用户需要重写CompletionHandler的handle_event函数进行处理数据的工作，参数buffer表示Proactor已经准备好的数据，用户线程直接调用内核提供的异步IO API，并将重写的CompletionHandler注册即可。</p><p>相比于IO多路复用模型，异步IO并不十分常用，不少高性能并发服务程序使用IO多路复用模型+多线程任务处理的架构基本可以满足需求。况且目前操作系统对异步IO的支持并非特别完善，更多的是采用IO多路复用模型模拟异步IO的方式（IO事件触发时不直接通知用户线程，而是将数据读写完毕后放到用户指定的缓冲区中）。Java7之后已经支持了异步IO，感兴趣的读者可以尝试使用。</p><h1 id="IO复用函数使用"><a href="#IO复用函数使用" class="headerlink" title="IO复用函数使用"></a>IO复用函数使用</h1><p>参考：风再起时与不羁的风<csdn> <a href="https://blog.csdn.net/chewbee/article/details/78108223" target="_blank" rel="noopener">链接</a></csdn></p><h2 id="select函数"><a href="#select函数" class="headerlink" title="select函数"></a>select函数</h2><p>系统提供Select函数来实现多路复用输入/输出模型，Select系统调用是用来让我们的程序监视多个文件句柄的状态变化。程序会阻塞在select函数上，直到被监视的文件句柄中有一个或多个发生了状态变化。</p><p>函数原型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/select.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">int select(int maxfd,</span><br><span class="line"> fd_set *readset,</span><br><span class="line"> fd_set *writeset,</span><br><span class="line"> fd_set *exceptset,</span><br><span class="line"> const struct timeval *timeout)</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><p>maxfd：需要监视的最大的文件描述符值+1；<br>readset：需要检测的可读文件描述符的集合；<br>writeset：需要检测的可写文件描述符的集合<br>exceptset：需要检测的异常文件描述符的集合<br>timeout：超时时间；超时时间有三种情况：<br>NULL：永远等待下去，仅在有一个描述字准备好I/O时才返回；<br>0：立即返回，仅检测描述符集合的状态，然后立即返回，并不等待外部事件的发生；<br>特定的时间值： 如果在指定的时间段里没有事件发生，select将超时返回；<br>函数返回值有三种情况：</p><p>返回0表示超时了；<br>返回-1，表示出错了；<br>返回一个大于0的数，表示文件描述符状态改变的个数；<br>fd_set是一个文件描述符集合，可以通过以下宏来操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FD_CLR(inr fd,fd_set* set)：用来清除文件描述符集合set中相关fd的位</span><br><span class="line">FD_ISSET(int fd,fd_set *set)：用来测试文件描述符集合set中相关fd的位是否为真</span><br><span class="line">FD_SET（int fd,fd_set*set）：用来设置文件描述符集合set中相关fd的位</span><br><span class="line">FD_ZERO（fd_set *set）：用来清除文件描述符集合set的全部位</span><br></pre></td></tr></table></figure><p><strong>Select – summary:</strong></p><ul><li>我们需要在每次调用之前构建每组集合；</li><li>这个函数检查任何 bit 到更高的数字 —— O(n)；</li><li>我们需要遍历文件描述符来检查它是否存在于从 select() 返回的集合中；</li><li>select 的主要优点在于它的可移植性 —— 每个类 unix 操作系统的都有。</li></ul><h2 id="Poll函数"><a href="#Poll函数" class="headerlink" title="Poll函数"></a>Poll函数</h2><p>Poll的处理机制与Select类似，只是Poll选择了pollfd结构体来处理文件描述符的相关操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct pollfd &#123;</span><br><span class="line">    int fd;         /* 文件描述符 */</span><br><span class="line">    short events;   /* 等待的事件 */</span><br><span class="line">    short revents;  /* 实际发生了的事件 */</span><br><span class="line">&#125; ;</span><br></pre></td></tr></table></figure><p>每一个pollfd结构体都指定了一个文件描述符fd，events代表了需要监听该文件描述的事件掩码，可选的有：</p><p>POLLIN：有数据可读。<br>POLLRDNORM：有普通数据可读。<br>POLLRDBAND：有优先数据可读。<br>POLLPRI：有紧迫数据可读。<br>POLLOUT：写数据不会导致阻塞。<br>POLLWRNORM：写普通数据不会导致阻塞。<br>POLLWRBAND：写优先数据不会导致阻塞。<br>POLLMSGSIGPOLL：消息可用。<br>revents代表文件描述符的操作结果掩码，内核在调用返回时设置这个域。events域中请求的任何事件都可能在revents域中返回，除此之外，revents域还可以包含以下事件：</p><p>POLLER：指定的文件描述符发生错误。<br>POLLHUP：指定的文件描述符挂起事件。<br>POLLNVAL：指定的文件描述符非法。<br>poll的函数原型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># include &lt;poll.h&gt;</span><br><span class="line">int poll (  struct pollfd *fds, </span><br><span class="line"> unsigned int nfds, </span><br><span class="line"> int timeout);</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><p>fds：需要被监视的文件描述符集合；<br>nfds：被监视的文件描述符数量；<br>timeout：超时时间，有三种取值：<br>负数：无限超时，一直等到一个指定事件发生；<br>0：立即返回，并列出准备好的文件描述符；<br>正数：等待指定的时间，单位为毫秒；<br>poll函数与select函数的最大不同之处在于：select函数有最大文件描述符的限制，一般1024个，而poll函数对文件描述符的数量没有限制。但select和poll函数都是通过轮询的方式来查询某个文件描述符状态是否发生了变化，并且需要将整个文件描述符集合在用户空间和内核空间之间来回拷贝，这样随着文件描述符的数量增加，相应的开销也随之增加。</p><p><strong>Poll vs Select</strong></p><ul><li>poll() 不要求用户计算编号最高的文件描述符 +1 的值；</li><li>poll() 对于大值文件描述符更有效。假设我们通过 select() 方法监视一个值为 900 的单个文件描述符 —— 内核将不得不检查传入集合的每个值的每一位，直到第 900 位；</li><li>select() 的文件描述符集合是静态大小的；</li><li>使用 select()，文件描述符集合会在返回时重建，因此每个后续调用都必须重新初始化它们。 poll() 系统调用将输入（events 字段）与输出（revents 字段）分隔开，允许在不更改的情况下重新使用该数组。</li><li>返回时，select() 的 timeout 参数未定义。 可移植性代码需要重新初始化它，这不是pselect() 的问题；</li><li>select() 更具可移植性，因为某些 Unix 系统不支持 poll()。</li></ul><h2 id="epoll函数"><a href="#epoll函数" class="headerlink" title="epoll函数"></a>epoll函数</h2><p>epoll是在Linux内核2.6引进的，是select和poll函数的增强版。与select相比，epoll没有文件描述符数量的限制。epoll使用一个文件描述符管理多个文件描述符，将用户关心的文件描述符事件存放到内核的一个事件列表中，这样在用户空间和内核空间只需拷贝一次。</p><p>epoll操作是包含有三个接口的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/epoll.h&gt;</span><br><span class="line">int epoll_create(int size);</span><br><span class="line">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</span><br><span class="line">int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</span><br></pre></td></tr></table></figure></p><p>epoll_create函数：</p><p>用创建一个epoll的句柄；<br>size用来告诉内核这个监听的数目一共有多大，占用一个fd值；<br>epoll_ctl函数：</p><p>epoll的事件注册函数；<br>参数：</p><p>epfd：epoll_create()的返回值；<br>op：动作，有三种取值：</p><p>EPOLL_CTL_ADD：注册新的fd到epfd中；<br>EPOLL_CTL_MOD：修改已经注册的fd的监听事件；<br>EPOLL_CTL_DEL：从epfd中删除一个fd；<br>fd：需要监听的fd；</p><p>event： 告诉内核需要监听什么事件，取值有：<br>EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；<br>EPOLLOUT：表示对应的文件描述符可以写；<br>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；<br>EPOLLERR：表示对应的文件描述符发生错误；<br>EPOLLHUP：表示对应的文件描述符被挂断；<br>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。<br>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列；<br>epoll_wait函数：</p><p>等待事件的产生；<br>参数：<br>events：从内核得到事件的集合；<br>maxevents：事件集合的大小；<br>timeout：超时时间，0会立即返回，-1表示永久阻塞，正数表示一个指定的值；<br>工作模式</p><p>epoll对文件描述符的操作由两种模式：水平触发LT（level trigger）和边沿触发ET（edge trigger）。默认的情况下为LT模式。LT模式与ET模式的区别在于：</p><p>LT模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll_wait时，会再次响应应用程序并通知此事件。<br>ET模式：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。<br>ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p><p><strong>Epoll vs Select/Poll</strong></p><ul><li>我们可以在等待时添加或删除文件描述符；</li><li>epoll_wait 仅返回具有准备文件描述符的对象；</li><li>epoll 有更好的性能 —— O(1) 而不是O(n)；</li><li>epoll 可以表现为级别触发或边缘触发（请参见手册页）；</li><li>epoll 是 Linux 特有的，因此可移植性一般。</li></ul><h1 id="x"><a href="#x" class="headerlink" title="x"></a>x</h1>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机网络" scheme="https://www.jelech.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>c++后台工程师</title>
    <link href="https://www.jelech.top/posts/40165/"/>
    <id>https://www.jelech.top/posts/40165/</id>
    <published>2019-01-01T10:09:33.000Z</published>
    <updated>2019-01-10T14:25:50.758Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>一下为后台开发所用的大部分技术栈。一起加油学吧！</p><a id="more"></a><p><img src="/assets/后台开发-2.jpg" alt="后台开发-2"></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;p&gt;一下为后台开发所用的大部分技术栈。一起加油学吧！&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="c++" scheme="https://www.jelech.top/tags/c/"/>
    
      <category term="后台开发" scheme="https://www.jelech.top/tags/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>unix下c语言编程</title>
    <link href="https://www.jelech.top/posts/36582/"/>
    <id>https://www.jelech.top/posts/36582/</id>
    <published>2018-12-26T08:09:33.000Z</published>
    <updated>2018-12-28T02:06:37.842Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h2><ul><li><p>编译时需加上 <strong>-g</strong> </p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc -g -o test test.c</span><br><span class="line">gdb test</span><br></pre></td></tr></table></figure></li><li><p>gdb中使用</p><ul><li><code>list</code>：显示源代码</li><li><code>break n</code>：在第n行添加断点</li><li><code>run</code>：执行被调试的程序</li><li><code>interrupt</code>：终止正在调试的程序</li><li><code>step</code>：单步执行代码，可进入函数</li><li><code>next</code>：单步执行代码，不可进入函数</li><li><code>continue</code>：继续执行，知道下一个断点</li><li><code>watch j</code>：监控 j 变量，在变化时打印</li><li><code>quit</code>：退出</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="unix" scheme="https://www.jelech.top/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫基础</title>
    <link href="https://www.jelech.top/posts/52862/"/>
    <id>https://www.jelech.top/posts/52862/</id>
    <published>2018-12-25T02:09:33.000Z</published>
    <updated>2018-12-25T15:20:40.740Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="python爬虫"><a href="#python爬虫" class="headerlink" title="python爬虫"></a>python爬虫</h1><h2 id="爬虫是什么"><a href="#爬虫是什么" class="headerlink" title="爬虫是什么"></a>爬虫是什么</h2><ul><li>爬虫就是一种自动浏览、获取数据的自动化程序</li><li>一般python大量的包、以及容易入手，使得python成为了爬虫的最大’淫’家</li><li>爬虫能获取网页上，作为一个正常人能获取的所有资源。</li><li>但是更方便、快速、简单了</li></ul><h2 id="所需安装包"><a href="#所需安装包" class="headerlink" title="所需安装包"></a>所需安装包</h2><p>在此之前，请先安装好python, pip.   <em>python3的朋友请使用pip3</em></p><ul><li>使用pip安装requests <code>pip install requests</code></li><li>使用pip安装beautifulsoup4 <code>pip install beautifulsoup4</code></li></ul><h2 id="通过’熬汤’"><a href="#通过’熬汤’" class="headerlink" title="通过’熬汤’"></a>通过’熬汤’</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">html = urlopen(<span class="string">"https://www.jelech.cn"</span>).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(html)</span><br><span class="line">soup = BeautifulSoup(html, features=<span class="string">'lxml'</span>)</span><br><span class="line">soup.find(<span class="string">'h1'</span>).get_text()</span><br></pre></td></tr></table></figure><ul><li>urlopen( URL ).read().decode(‘utf-8’)<ul><li>通过此函数链获取服务器返回的html, 读取后，编码为utf-8形式</li></ul></li><li>BeatutifulSoup(html, features=’ ‘)<ul><li>将获取到的html文档进行进一步格式化编码。函数返回的对象可以直接find某个标签</li></ul></li><li>soup.find(‘tag’, { key:value })   <em>(find_all(‘tag’))</em><ul><li>获取指定tag名的标签，其中的属性key值为value。相当于筛选，若有多种结果，使用find_all函数可以返回为一个数组</li></ul></li></ul><p>实例：百度百科的多次连接爬取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- utf8 -*-</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">"https://baike.baidu.com"</span></span><br><span class="line">his = [<span class="string">r"/item/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    url = base_url + his[<span class="number">-1</span>]  <span class="comment">#最后一个</span></span><br><span class="line">    html = urlopen(url).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = BeautifulSoup(html, features=<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">    print(i, soup.find(<span class="string">'h1'</span>).get_text(), <span class="string">'   url:'</span>,his[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    sub_urls = soup.find_all(<span class="string">"a"</span>, &#123;</span><br><span class="line">        <span class="string">"target"</span>: <span class="string">"_blank"</span>,</span><br><span class="line">        <span class="string">"href"</span>: re.compile(<span class="string">"/item/(%.&#123;2&#125;)+$"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sub_urls) != <span class="number">0</span>:</span><br><span class="line">        his.append(random.sample(sub_urls,<span class="number">1</span>)[<span class="number">0</span>][<span class="string">'href'</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        his.pop()</span><br></pre></td></tr></table></figure><h2 id="通过POST-amp-GET"><a href="#通过POST-amp-GET" class="headerlink" title="通过POST&amp;GET"></a>通过POST&amp;GET</h2><ul><li>一般情况下，与服务器的通信最多使用的就是post和get。<ul><li>post一般用于有数据给服务器，然后服务器反应回答</li><li>get用于访问某个页面，服务器直接回答</li><li>这里两者的详细区别和安全就不细说了，详情可以看我的其他笔记</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'jelech'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'123456'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://pythonscraping.com/pages/files/processing.php'</span>, data = data)</span><br><span class="line">print(r.url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然，get后面也能像post一样接参数</span></span><br><span class="line">r = requests.get(<span class="string">'https://www.baidu.com/s'</span>)</span><br><span class="line">print(r.url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件</span></span><br><span class="line">file = &#123;<span class="string">'uploadFile'</span>: open(<span class="string">'./image.png'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">r = requests.post(<span class="string">'http//pythonscraping.com/files/processing2.php'</span>, files = file)</span><br></pre></td></tr></table></figure><h2 id="通过cookies-amp-session"><a href="#通过cookies-amp-session" class="headerlink" title="通过cookies&amp;session"></a>通过cookies&amp;session</h2><p>在访问网站后，会有个cookies返回后保存着。之后在使用的时候，可以在requests时，将cookies附加上去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">'https://www.baidu.com/s'</span>)</span><br><span class="line">print(r.cookies.get_dict())</span><br><span class="line">r = requests.get(<span class="string">'http://pythonscraping.com/pages/cookies/profile.php'</span>,cookies = r.cookies)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>session作为保持会话功能。特别是在登录方面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">session = requests.Session()</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'jelech'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'123456'</span></span><br><span class="line">&#125;</span><br><span class="line">r = session.post(<span class="string">'http://'</span>,data = data)</span><br><span class="line">r = session.get(<span class="string">'http;//'</span>)</span><br><span class="line"><span class="comment"># 之后就可以直接用session保持当前会话状态下post与get了</span></span><br></pre></td></tr></table></figure><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>访问下载地址，保存到文件中。可以设置为stream，边下边保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">image_url = <span class="string">"https://"</span></span><br><span class="line">urlretrieve(image_url, <span class="string">'./img/image1.png'</span>) <span class="comment"># 放到哪里去</span></span><br><span class="line"></span><br><span class="line">r = requests.get(image_url)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./img/image2.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br><span class="line"></span><br><span class="line">r = requests.get(image_url, stream=<span class="keyword">True</span>) <span class="comment"># 边下边保存</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./img/image3.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">32</span>): <span class="comment"># 每次下载多少字节后保存</span></span><br><span class="line">        f.write(chunk)</span><br></pre></td></tr></table></figure><p>实例：下载中国地理中的美图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- utf8 -*-</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">URL = <span class="string">"http://www.ngchina.com.cn/animals/"</span></span><br><span class="line"></span><br><span class="line">html = requests.get(URL).text()</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">img_url = soup.find_all(<span class="string">'ul'</span>, &#123;</span><br><span class="line">    <span class="string">"class"</span>:<span class="string">"img_list"</span></span><br><span class="line">&#125;)</span><br><span class="line">print(len(img_url))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> urls <span class="keyword">in</span> img_url:</span><br><span class="line">    imgs = urls.find_all(<span class="string">'img'</span>)</span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">        url = img[<span class="string">'src'</span>]</span><br><span class="line">        r = requests.get(url, stream=<span class="keyword">True</span>)</span><br><span class="line">        image_name = url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'./img/%s'</span> % image_name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size = <span class="number">128</span>):</span><br><span class="line">                f.write(chunk)</span><br><span class="line">        print(<span class="string">'Saved %s'</span> % image_name)</span><br></pre></td></tr></table></figure><h2 id="多进程下的爬虫"><a href="#多进程下的爬虫" class="headerlink" title="多进程下的爬虫"></a>多进程下的爬虫</h2><p>多进程使用的是multiprocessing包，进行多进程的创建，他和多线程不一样。他更快，更独立。详细请参观我的其他博文。</p><p>实例：爬取网页中的超链接，访问后再获取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- utf8 -*-</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen, urljoin</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多进程的定义，使用来获取返回的信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = urlopen(url)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)             <span class="comment"># slightly delay for downloading</span></span><br><span class="line">    <span class="keyword">return</span> response.read().decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多进程定义二，对获取到的信息进行解析，获取其中的信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">    urls = soup.find_all(<span class="string">'a'</span>, &#123;<span class="string">"href"</span>: re.compile(<span class="string">'^/.+?/$'</span>)&#125;)</span><br><span class="line">    title = soup.find(<span class="string">'h1'</span>).get_text().strip()</span><br><span class="line">    page_urls = set([urljoin(base_url, url[<span class="string">'href'</span>]) <span class="keyword">for</span> url <span class="keyword">in</span> urls])   <span class="comment"># remove duplication</span></span><br><span class="line">    url = soup.find(<span class="string">'meta'</span>, &#123;<span class="string">'property'</span>: <span class="string">"og:url"</span>&#125;)[<span class="string">'content'</span>]</span><br><span class="line">    <span class="keyword">return</span> title, page_urls, url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># base_url = "http://127.0.0.1:4000/"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># DON'T OVER CRAWL THE WEBSITE OR YOU MAY NEVER VISIT AGAIN</span></span><br><span class="line">    <span class="keyword">if</span> base_url != <span class="string">"http://127.0.0.1:4000/"</span>:</span><br><span class="line">        restricted_crawl = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        restricted_crawl = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    unseen = set([base_url,])</span><br><span class="line">    seen = set()</span><br><span class="line"><span class="comment"># 进程池，声明了4个，在其中拿。</span></span><br><span class="line">    pool = mp.Pool(<span class="number">4</span>)                       <span class="comment"># number strongly affected</span></span><br><span class="line">    count, t1 = <span class="number">1</span>, time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> len(unseen) != <span class="number">0</span>:              <span class="comment"># still get some url to visit</span></span><br><span class="line">        <span class="keyword">if</span> restricted_crawl <span class="keyword">and</span> len(seen) &gt; <span class="number">20</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 获取返回数据的进程设置。</span></span><br><span class="line">        crawl_jobs = [pool.apply_async(crawl, args=(url,)) <span class="keyword">for</span> url <span class="keyword">in</span> unseen]</span><br><span class="line">        htmls = [j.get() <span class="keyword">for</span> j <span class="keyword">in</span> crawl_jobs] <span class="comment"># request connection</span></span><br><span class="line">        htmls = [h <span class="keyword">for</span> h <span class="keyword">in</span> htmls <span class="keyword">if</span> h <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>]     <span class="comment"># remove None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取分析数据的进程设置。</span></span><br><span class="line">        parse_jobs = [pool.apply_async(parse, args=(html,)) <span class="keyword">for</span> html <span class="keyword">in</span> htmls]</span><br><span class="line">        results = [j.get() <span class="keyword">for</span> j <span class="keyword">in</span> parse_jobs] <span class="comment"># parse html</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分析完后,需要将已看过的进行合并</span></span><br><span class="line">        seen.update(unseen)</span><br><span class="line">        unseen.clear()</span><br><span class="line"><span class="comment"># 获取新的，未访问的路径</span></span><br><span class="line">        <span class="keyword">for</span> title, page_urls, url <span class="keyword">in</span> results:</span><br><span class="line">                print(count, title, url)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                unseen.update(page_urls - seen)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Total time: %.1f s'</span> % (time.time()-t1, ))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="https://www.jelech.top/tags/python/"/>
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫" scheme="https://www.jelech.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python线程</title>
    <link href="https://www.jelech.top/posts/63716/"/>
    <id>https://www.jelech.top/posts/63716/</id>
    <published>2018-12-25T02:09:33.000Z</published>
    <updated>2019-08-12T15:36:25.213Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+1pdErZ0JLfbh+mnsOOycp1GnmTyx3qMXkxKZZkyaa2Belso0KNRMORGqGdEriy6/2MQ1F4NY8mlRjImmQr+DbnRl6GLOQq3Mir/YoyX9qqY/7aW/hTCycWwZR/KBTz/0Mv+yRcG9J7w==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私人的哦&lt;/br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="https://www.jelech.top/tags/python/"/>
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="线程" scheme="https://www.jelech.top/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>跟我一起复习操作系统（一）</title>
    <link href="https://www.jelech.top/posts/6676/"/>
    <id>https://www.jelech.top/posts/6676/</id>
    <published>2018-12-06T14:09:33.000Z</published>
    <updated>2018-12-10T05:53:00.066Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="操作系统的自白（一）"><a href="#操作系统的自白（一）" class="headerlink" title="操作系统的自白（一）"></a>操作系统的自白（一）</h1><ul><li>操作系统是一种建立在电脑硬件上的计算机底层软件，他能接受上层软件的要求，也能操作下层的基础硬件。他作为帮助你进行计算机编程、使用，帮你管理底层的许多杂碎和问题…难道你不该感谢一下吗？</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>为什么要分类？。。。。直接学啊！</li><li>其实我想说一下的章节分类….面试好像都考不到。最多和死锁搭上边。我想问用户态和内核态呢？</li></ul><h3 id="不算章节的章节"><a href="#不算章节的章节" class="headerlink" title="不算章节的章节"></a>不算章节的章节</h3><ul><li>进程描述和控制</li><li>线程</li><li>并发互斥与同步</li><li>死锁和饥饿</li><li>内存管理</li><li>虚拟内存</li><li>单处理调度</li><li>复用和实时调度</li><li>I/O管理和硬盘管理</li><li>文件管理</li></ul><blockquote><p>其实并不想这么写</p><p>而且有本Unix下的c语言开发，非常好！</p></blockquote><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><ul><li>主要是记录好所有的重点，而尽量的不进行描述，给之后复习节省脑力。看到关键词就能慢慢回忆起这部分内容。</li><li>而且…我好像不是为了开发操作系统而学习的，很多超级细节的东西应该没必要….嘤</li><li>理想真美好~</li><li>或许把linux源码读一下可能更有利于学习，但是….如果有调用底层的东西确实看不下去啊。</li><li>那没办法了</li></ul><p>嘤，开始吧</p><hr><h2 id="进程和线程是兄弟吗"><a href="#进程和线程是兄弟吗" class="headerlink" title="进程和线程是兄弟吗"></a>进程和线程是兄弟吗</h2><ul><li>不。他们是父子关系。你这种想法太可怕了。</li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><blockquote><p>进程嘛，可以直接理解为我们平常用的程序。但是呢，有点不同的是，它也是个有ID身份证的！这种身份证啊，在他们那叫做PCB - Process Control Blocks</p></blockquote><h4 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h4><ul><li>PCB是进程的身份证(唯一表示符，状态，优先级，程序控制，内存指针，文本数据，I/O状态信息，记录信息)</li><li>哎呀，看字面意思也能懂的嘛，以后用到了慢慢讲嘛，一个进程无非就为了抢数据，得有更高身份的人，操作系统这个大大才会优先给他资源嘛。</li></ul><h4 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h4><ul><li>2-state model：就跑还是没跑的区别。</li><li>5-state model：和交叉的接力棒很像哦。<ul><li>一个人来了，先准备好，然后开始跑。</li><li>第二个人来了，要和第一个交接。</li><li>一个跑，一个就准备好。好的，这就是两个人的互相py，哦不，是互相传力了。</li><li>如果有个人不想跑了，那就退出了呗。</li><li>如果有人突然想上厕所了。哎呀不能终止比赛啊，先让他去吧（阻塞了），再上另一个选手进行交叉接力。</li><li>又有人想去了？去吧去吧，拍好队，怎么去的就怎么回来。</li><li>嘿嘿，上厕所的回来了，先等着准备好。这就继续交接啦。<ul><li>需要图？不存在的，YY才是最强大的。</li></ul></li></ul></li><li>7-state model：<ul><li>嘤，有人想上大厕所，有人想回趟家(?????)，这不能让排队的一直等着啊。</li><li>那没法了，分类一下吧，时间长的假装他睡觉了，放另一个等待队列吧。</li><li>上厕所的还是继续阻塞。回家的排了一定时间，给我把它放到另一个长♂久的队列里去。</li></ul></li></ul><h2 id="平时笔记-乱"><a href="#平时笔记-乱" class="headerlink" title="平时笔记-乱"></a>平时笔记-乱</h2><p>用户态和核心态：     用户态：             用户程序执行时机器所处的状态     权限小，只能执行特定指令。<br>核心态：操作系统管理程序执行时机器所处的状态     权限大，能执行特权指令。      特权指令：I/O指令、设置中断屏蔽指令、清理内存指令、设置时钟指令。<br>核心态只向用户提供接口，使得用户态能执行特定的指令和中断等。</p><p>1、调度：进程是拥有资源和独立调度的基本单位     线程只是独立调度单位，运行时资源属于进程。</p><p>2、拥有资源： 不管是有无线程的操作系统，进程都是拥有资源的基本单位，而线程只拥有极少的私有资源（程序计数器、一组寄存器、栈。用来保存线程的执行历史和线程的执行状态，这些资源也是进程的）</p><p>3、并发性：有线程的操作系统，进程可以并发，线程也可以并发。可以理解为一个程序有好几个进程，每个进程又有好几个线程。</p><p>4、系统开销：进程大（切换进程时要保存运行环境，重新启动时又要回复） ，线程小（自己本来就那么一点可怜的资源，开销肯定小）</p><p>用户级线程和内核级线程区别：</p><p>用户级线程：当一个用户级线程阻塞，整个进程都必须等待。<br>内核级线程：当一个内核级线程阻塞，不会影响其他线程。因为一旦线程阻塞，内核会从当前或者其他进程(process)中重新选择一个线程保证程序的执行。<br>进程通信：</p><p>共享存储器系统 ：设置一个共享存储区<br>消息传递系统：直接通信方式、间接通信方式（设置一个中间实体-信箱）<br>管道通信系统：管道是用于连接读写进程以实现它们直接通信的共享文件，所以管道是共享文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="https://www.jelech.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>学习的阻碍</title>
    <link href="https://www.jelech.top/posts/45237/"/>
    <id>https://www.jelech.top/posts/45237/</id>
    <published>2018-12-06T13:31:17.000Z</published>
    <updated>2018-12-06T14:00:57.564Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.jelech.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.jelech.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="感想" scheme="https://www.jelech.top/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="学习" scheme="https://www.jelech.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP学习笔记</title>
    <link href="https://www.jelech.top/posts/13277/"/>
    <id>https://www.jelech.top/posts/13277/</id>
    <published>2018-12-04T04:09:33.000Z</published>
    <updated>2019-04-26T08:49:12.831Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="TCP-IP-协议-栈-笔记"><a href="#TCP-IP-协议-栈-笔记" class="headerlink" title="TCP/IP 协议(栈)笔记"></a>TCP/IP 协议(栈)笔记</h1><ul><li><p>您的浏览器与服务器都在使用 TCP/IP 协议</p></li><li><p>您的 E-Mail 使用 TCP/IP 协议</p></li><li><p>因特网地址是 TCP/IP 协议</p></li></ul><p>网际互联及OSI七层模型：</p><p>物理层、数据链路层、网络层、传输层、表示层、会话层、应用层</p><ul><li><p>物理层</p><p>  作用：定义一些电器，机械，过程和规范，如集线器；</p><p>  PDU(协议数据单元)：bit/比特</p><p>  设备：集线器HUB;</p><p>  注意：没有寻址的概念；</p></li><li><p><strong>数据链路层</strong></p><p>  作用：定义如何格式化数据，支持错误检测；</p><p>  典型协议：以太网，帧中继（古董级VPN）</p><p>  PDU：frame（帧）设备：以太网交换机；</p><p>  备注：交换机通过MAC地址转发数据，逻辑链路控制；</p></li><li><p><strong>网络层</strong></p><p>  作用：定义一个逻辑的寻址，选择最佳路径传输，路由数据包；</p><p>  典型协议：IP，IPX，ICMP,ARP(IP-&gt;MAC),IARP;</p><p>  PDU:packet/数据包；</p><p>  设备：路由器</p><p>  备注：实现寻址</p></li><li><p><strong>传输层</strong>：</p><p>  作用：提供可靠和尽力而为的传输；</p><p>  典型协议：TCP,UDP,SPX,port(65535个端口),EIGRP,OSPF,</p><p>  PDU:fragment 段；</p><p>  无典型设备；</p><p>  备注：负责网络传输和会话建立;</p></li><li><p>会话层：</p><p>  作用：控制会话，建立管理终止应用程序会话；</p><p>  典型协议：NFS, SQL, ASP, PHP, JSP, RSVP(资源源预留协议), windows， </p><p>  备注：负责会话建立；</p></li><li><p>表示层：</p><p>  作用：格式化数据；</p><p>  典型协议：ASCII, JPEG. PNG, MP3. WAV, AVI, </p><p>  备注：可以提供加密服务；</p></li><li><p><strong>应用层：</strong></p><p>  作用：控制应用程序；</p><p>  典型协议：telnet, ssh, http, ftp, smtp, rip, BGP, (未完待续)</p><p>  备注：为应用程序提供网络服务；</p></li></ul><h2 id="在-TCP-IP-内部"><a href="#在-TCP-IP-内部" class="headerlink" title="在 TCP/IP 内部"></a>在 TCP/IP 内部</h2><p>在 TCP/IP 中包含一系列用于处理数据通信的协议：</p><ul><li>TCP (传输控制协议) - 应用程序之间通信</li><li>UDP (用户数据报协议) - 应用程序之间的简单通信</li><li>IP (网际协议) - 计算机之间的通信</li><li>ICMP (因特网消息控制协议) - 针对错误和状态</li><li>DHCP (动态主机配置协议) - 针对动态寻址</li></ul><p>当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方”握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。</p><p>这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。</p><p>UDP 和 TCP 很相似，但是更简单，同时可靠性低于 TCP。</p><h3 id="IP-是无连接的协议"><a href="#IP-是无连接的协议" class="headerlink" title="IP 是无连接的协议"></a>IP 是无连接的协议</h3><p>IP 用于计算机之间的通信。</p><p>IP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。</p><p>通过 IP，消息（或者其他数据）被<code>分割为小的独立的包</code>，并通过因特网在计算机之间传送。</p><p>IP 负责将每个包<strong>路由</strong>至它的目的地。</p><h3 id="IP-路由器"><a href="#IP-路由器" class="headerlink" title="IP 路由器"></a>IP 路由器</h3><p>当一个 IP 包从一台计算机被发送，它会到达一个 IP 路由器。</p><p>IP 路由器负责将这个包路由至它的目的地，直接地或者通过其他的路由器。</p><p><strong>在一个相同的通信中，一个包所经由的路径可能会和其他的包不同</strong>。而路由器负责根据通信量、网络中的错误或者其他参数来进行正确地寻址。</p><h3 id="总结TCP-IP是什么"><a href="#总结TCP-IP是什么" class="headerlink" title="总结TCP/IP是什么"></a>总结TCP/IP是什么</h3><p>TCP/IP 意味着 TCP 和 IP 在一起协同工作。</p><p>TCP 负责应用软件（比如您的浏览器）和网络软件之间的通信。</p><p>IP 负责计算机之间的通信。</p><p>TCP 负责将数据分割并装入 IP 包，然后在它们到达的时候重新组合它们。</p><p>IP 负责将包发送至接受者。</p><h2 id="TCP-IP-寻址"><a href="#TCP-IP-寻址" class="headerlink" title="TCP/IP 寻址"></a>TCP/IP 寻址</h2><p>TCP/IP 使用 32 个比特或者 4 组 0 到 255 之间的数字来为计算机编址。</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>每个计算机必须有一个 IP 地址才能够连入因特网。</p><p>每个 IP 包必须有一个地址才能够发送到另一台计算机。</p><p>每个计算机必须有一个唯一的 4 组数字的地址，每组数字必须在 0 到 255 之间，并由点号隔开，比如：<code>192.168.1.60</code></p><h3 id="IP-V6"><a href="#IP-V6" class="headerlink" title="IP V6"></a>IP V6</h3><blockquote><p>IPv6 是 “Internet Protocol Version 6” 的缩写，也被称作下一代互联网协议，它是由 IETF 小组（Internet 工程任务组Internet Engineering Task Force）设计的用来替代现行的 IPv4（现行的）协议的一种新的 IP 协议。</p></blockquote><p>规定的标准语法建议把 IPv6 地址的 128 位（16 个字节）写成 8 个 16 位的无符号整数，每个整数用 4 个十六进制位表示，这些数之间用冒号（:）分开，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">686</span>E：<span class="number">8</span>C64：FFFF：FFFF：<span class="number">0</span>：<span class="number">1180</span>：<span class="number">96</span>A：FFFF</span><br></pre></td></tr></table></figure><p>冒号十六进制记法允许零压缩，即一串连续的0可以用一对冒号取代，只能使用一次零压缩。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FF05：0：0：0：0：0：0：B3 /*可以定成：*/ FF05：：B3</span><br></pre></td></tr></table></figure></p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>12 个阿拉伯数字很难记忆。使用一个名称更容易。</p><p>用于 TCP/IP 地址的名字被称为域名。jelech.cn 就是一个域名。</p><ul><li><p><code>SSL</code> - 安全套接字层（Secure Sockets Layer）</p><p>  SSL 协议用于为安全数据传输加密数据。</p></li><li><p><code>SMTP</code> - 简易邮件传输协议（Simple Mail Transfer Protocol）</p><p>  SMTP 用于电子邮件的传输。</p></li><li><p><code>MIME</code> - 多用途因特网邮件扩展（Multi-purpose Internet Mail Extensions）</p><p>  MIME 协议使 SMTP 有能力通过 TCP/IP 网络传输多媒体文件，包括声音、视频和二进制数据。</p></li><li><p><code>IMAP</code> - 因特网消息访问协议（Internet Message Access Protocol）</p><p>  IMAP 用于存储和取回电子邮件。</p></li><li><p>POP - 邮局协议（Post Office Protocol）</p><p>  POP 用于从电子邮件服务器向个人电脑下载电子邮件。</p></li><li><p><code>FTP</code> - 文件传输协议（File Transfer Protocol）</p><p>  FTP 负责计算机之间的文件传输。</p></li><li><p><code>NTP</code> - 网络时间协议（Network Time Protocol）</p><p>  NTP 用于在计算机之间同步时间（钟）。</p></li><li><p><code>DHCP</code> - 动态主机配置协议（Dynamic Host Configuration Protocol）</p><p>  DHCP 用于向网络中的计算机分配动态 IP 地址。</p></li><li><p>SNMP - 简单网络管理协议（Simple Network Management Protocol）</p><p>  SNMP 用于计算机网络的管理。</p></li><li><p>LDAP - 轻量级的目录访问协议（Lightweight Directory Access Protocol）</p><p>  LDAP 用于从因特网搜集关于用户和电子邮件地址的信息。</p></li><li><p><code>ICMP</code> - 因特网消息控制协议（Internet Control Message Protocol）</p><p>  ICMP 负责网络中的错误处理。</p></li><li><p><code>ARP</code> - 地址解析协议（Address Resolution Protocol）</p><p>  ARP - 用于通过 IP 来查找基于 IP 地址的计算机网卡的硬件地址。</p></li><li><p>RARP - 反向地址转换协议（Reverse Address Resolution Protocol）</p><p>  RARP 用于通过 IP 查找基于硬件地址的计算机网卡的 IP 地址。</p></li><li><p>BOOTP - 自举协议（Boot Protocol）</p><p>  BOOTP 用于从网络启动计算机。</p></li><li><p><code>PPTP</code> - 点对点隧道协议（Point to Point Tunneling Protocol）</p><p>  PPTP 用于私人网络之间的连接（隧道）。</p></li></ul><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p><strong>RFC</strong></p><ul><li>RFC是什么？RFC就是tcp/ip协议的标准文档，在<a href="http://www.ietf.org/iesg/1rfc_index.txt" target="_blank" rel="noopener">这里</a>我们可以看到RFC那长长的定义列表，现在它一共有4000多个协议的定义，当然，我们所要学习的，也就是那么十几个协议而已。</li></ul><p><strong>端口号</strong>(port)</p><ul><li>注意，这个号码是用在TCP，UDP上的一个逻辑号码，并不是一个硬件端口，我们平时说把某某端口封掉了，也只是在IP层次把带有这个号码的IP包给过滤掉了而已。</li></ul><h3 id="环回接口（loopback）"><a href="#环回接口（loopback）" class="headerlink" title="环回接口（loopback）"></a>环回接口（loopback）</h3><p>平时我们用127.0.0.1来尝试自己的机器服务器好使不好使。走的就是这个loopback接口。对于环回接口，有如下三点值得注意:</p><ul><li><p>传给环回地址（一般是127.0.0.1）的任何数据均作为I P输入。</p></li><li><p>传给广播地址或多播地址的数据报复制一份传给环回接口，然后送到以太网上。这是 因为广播传送和多播传送的定义包含主机本身。</p></li><li><p>任何传给该主机IP地址的数据均送到环回接口。</p></li></ul><h3 id="IP、ARP、RARP协议"><a href="#IP、ARP、RARP协议" class="headerlink" title="IP、ARP、RARP协议"></a>IP、ARP、RARP协议</h3><p>​    </p><ul><li>ARP协议用来找到目标主机的Ethernet网卡Mac地址，IP则承载要发送的消息</li></ul><h4 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h4><ul><li><p>TTL字段规定该数据包在穿过多少个路由之后才会被抛弃(这里就体现出来IP协议包的不可靠性，它不保证数据被送达)</p></li><li><p>稍微一般一点的情况是，主机通过若干个路由器(router)和目的主机连接。那么路由器就要通过ip包的信息来为ip包寻找到一个合适的目标来进行传递，比如合适的主机，或者合适的路由。路由器或者主机将会用如下的方式来处理某一个IP数据包</p><ul><li>如果IP数据包的TTL(生命周期)已到，则该IP数据包就被抛弃。</li><li>搜索路由表，优先搜索匹配主机，如果能找到和IP地址完全一致的目标主机，则将该包发向目标主机</li><li>搜索路由表，如果匹配主机失败，则匹配同子网的路由器，这需要“子网掩码(1.3.)”的协助。如果找到路由器，则将该包发向路由器。</li><li>搜索路由表，如果匹配同子网路由器失败，则匹配同网号(第一章有讲解)路由器，如果找到路由器，则将该包发向路由器。</li><li>搜索路由表，如果以上都失败了，就搜索默认路由，如果默认路由存在，则发包</li><li>如果都失败了，就丢掉这个包。</li></ul></li><li><p>子网掩码是由32bit的二进制数字序列,形式为是一连串的1和一连串的0，例如：255.255.255.0(二进制就是11111111.11111111.11111111.00000000)</p></li><li><p><strong>首部</strong></p><ul><li>4版本、4首长度、8服务类型、16总长度、</li><li>16标识、3标志、13位片偏移</li><li>8生存时间TTL、8协议(1ICMP, 6TCP, 17UDP)、16位首部检验和</li><li>32位源IP</li><li>32位目的IP      &lt;== 20字节</li><li>[选项]</li><li>数据</li></ul></li></ul><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h4><ul><li><p>ARP(地址解析)</p></li><li><p>ARP高速缓存(就是一个IP-MAC地址对应表缓存)</p></li><li><p>如果查询的IP-MAC值对不存在，那么主机就向网络发送一个ARP协议广播包</p></li><li><p>如果收到广播包的某一个主机发现自己符合条件，那么就准备好一个包含自己的MAC地址的ARP包传送给发送ARP广播的主机</p></li><li><p>高速缓存是有时限的，一般是20分钟</p></li></ul><h3 id="ICMP协议-amp-amp-Ping-amp-amp-Traceroute"><a href="#ICMP协议-amp-amp-Ping-amp-amp-Traceroute" class="headerlink" title="ICMP协议 &amp;&amp; Ping &amp;&amp; Traceroute"></a>ICMP协议 &amp;&amp; Ping &amp;&amp; Traceroute</h3><ul><li>保证数据送达的工作应该由其他的模块来完成。其中一个重要的模块就是ICMP(网络控制报文)协议。</li><li>当传送IP数据包发生错误－－比如主机不可达，路由不可达等等，ICMP协议将会把错误信息封包，然后传送回给主机。</li><li>ICMP协议大致分为两类，一种是查询报文，一种是差错报文。<ul><li>ping查询（不要告诉我你不知道ping程序）</li><li>子网掩码查询（用于无盘工作站在初始化自身的时候初始化子网掩码）</li><li>时间戳查询（可以用来同步时间）</li></ul></li></ul><h4 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h4><ul><li><p>Traceroute是用来侦测主机到目的主机之间所经路由情况的重要工具，也是最便利的工具。</p></li><li><p>首先给目的主机<strong>发送</strong>一个TTL=1的UDP数据包，而经过的第一个路由器收到这个数据包以后，就自动把<strong>TTL减1</strong>，而TTL<strong>变为0</strong>以后，路由器就把这个包给<strong>抛弃</strong>了，并同时产生 一个主机<strong>不可达的ICMP数据报</strong>给主机。主机收到这个数据报以后<strong>再发一个TTL=2</strong>的UDP数据报给目的主机，然后刺激第二个路由器给主机发ICMP数据 报。如此往复直到到达目的主机。这样，traceroute就拿到了<strong>所有</strong>的路由器ip。</p></li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><ul><li>利用TCP通信的两台主机首先要经历一个“<strong>拨打电话</strong>”的过程，等到通信准备结束才开始传输数据，最后结束通话。</li><li>应用数据被分割成TCP认为最适合发送的数据块。这和UDP完全不同，应用程序产生的数据报<strong>长度</strong>将保持不变。</li><li>当TCP发出一个段后，它启动一个<strong>定时器</strong>，等待目的端确认收到这个报文段。如果不能 及时收到一个确认，将重发这个报文段。</li><li>当TCP收到发自TCP连接另一端的数据，它将发送一个<strong>确认</strong>。这个确认不是立即发送，通常将推迟几分之一秒。</li><li>TCP将保持它首部和数据的<strong>检验和</strong>。这是一个端到端的检验和，目的是检测数据在传输 过程中的任何变化。如果收到段的检验和有差错， T P将丢弃这个报文段和不确认收到此报文段（希望发端超时并重发）。</li><li>IP数据报的到达可能会失序，因此TCP报文段 的到达也可能会失序。如果必要， TCP将对收到的数据进行重新排序，将收到的数据以<strong>正确的顺序</strong>交给应用层。</li><li>TCP还能提供<strong>流量控制</strong>。TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机的缓冲区溢出。</li></ul><h3 id="TCP建立与终止"><a href="#TCP建立与终止" class="headerlink" title="TCP建立与终止"></a>TCP建立与终止</h3><blockquote><p>TCP是一个面向连接的协议，所以在连接双方发送数据之前，都需要首先建立一条连接。前面讲的所有协议都只是发送数据而已，大多数都不关心发送的数据是不是送到，UDP尤其明显，从编程的角度来说，UDP编程也要简单的多—-UDP都不用考虑数据分片。</p></blockquote><p>TCP连接的建立可以简单的称为<strong>三次握手</strong>，而连接的中止则可以叫做<strong>四次挥手</strong>。</p><ul><li>建立-三次握手<ul><li>第一次握手：主机A发送位码为syn＝1,随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</li><li>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1),syn=1,ack=1,随机产生seq=7654321的包</li><li>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1,以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1),ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</li></ul></li><li>结束-4次挥手<ul><li>客户机给服务器一个FIN为1的TCP报文</li><li>服务器返回给客户端一个确认ACK报文</li><li>发送一个FIN报文</li><li>客户机回复ACK报文</li></ul></li><li>TIME-WAIT<ul><li>TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE</li><li>网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文</li></ul></li></ul><h4 id="最大报文长度"><a href="#最大报文长度" class="headerlink" title="最大报文长度"></a>最大报文长度</h4><ul><li>在建立连接的时候，通信的双方要互相确认对方的最大报文长度(MSS)，以便通信。</li><li>SYN长度是MTU减去固定IP首部和TCP首部长度。</li></ul><h3 id="TCP交互数据流，成块数据流"><a href="#TCP交互数据流，成块数据流" class="headerlink" title="TCP交互数据流，成块数据流"></a>TCP交互数据流，成块数据流</h3><h4 id="交互数据流"><a href="#交互数据流" class="headerlink" title="交互数据流"></a>交互数据流</h4><blockquote><p>对于交互性要求比较高的应用，TCP给出两个策略来提高发送效率和减低网络负担：（1）捎带ACK。(2)Nagle算法</p></blockquote><ul><li>捎带ACK<ul><li>当<strong>主机收到远程主机</strong>的TCP数据报之后，通常不马上发送ACK数据报</li><li>等上一个短暂的时间，如果这段时间里面<strong>主机还有发送到远程主机</strong>的TCP数据报，那么就把这个ACK数据报“捎带”着发送出去，把本来两个TCP数据报整合成一个发送</li></ul></li><li>Nagle算法<ul><li>当主机A给主机B发送了一个TCP数据报并进入等待主机B的ACK数据报的状态时，TCP的输出缓冲区里面只能有一个TCP数据报</li><li>这个数据报不断地收集后来的数据，整合成一个大的数据报</li><li>等到B主机的ACK包一到，就把这些数据“一股脑”的发送出去</li></ul></li></ul><h4 id="TCP的成块数据流"><a href="#TCP的成块数据流" class="headerlink" title="TCP的成块数据流"></a>TCP的成块数据流</h4><blockquote><p>对于FTP这样对于数据吞吐量有较高要求的要求，将总是希望每次尽量多的发送数据到对方主机，就算是有点“延迟”也无所谓</p></blockquote><ul><li><p><strong>ACK的应答策略：</strong>发送端将会连续发送数据尽量填满接受方的缓冲区，而接受方对这些数据只要发送一个ACK报文来回应就可以了，这就是ACK的累积特性，这个特性大大减少了发送端和接收端的负担。</p></li><li><p><strong>滑动窗口</strong></p><ul><li>滑动窗口本质上是<strong>描述</strong>接受方的TCP数据报<strong>缓冲区大小</strong>的数据，发送方根据这个数据来计算自己最多能发送多长的数据。</li><li>如果发送方收到接受方的窗口大小为0的TCP数据报，那么发送方将停止发送数据，等到接受方发送窗口大小不为0的数据报的到来。</li><li>窗口协议<ul><li>窗口合拢：当窗口从左边向右边靠近的时候，这种现象发生在数据被发送和确认的时候。</li><li>窗口张开：当窗口的右边沿向右边移动的时候，这种现象发生在接受端处理了数据以后。</li><li>窗口收缩：当窗口的右边沿向左边移动的时候，这种现象不常发生。</li><li>TCP就是用这个窗口，慢慢的从数据的左边移动到右边，把处于窗口范围内的数据发送出去窗口的大小是可以通过socket来制定的，4096并不是最理想的窗口大小，而16384则可以使吞吐量大大的增加。</li></ul></li></ul></li><li><strong>数据拥塞</strong><ul><li>最大的问题就是当传输时出现了瓶颈，TCP发送方需要确认连接双方的线路的数据最大吞吐量是多少<ul><li>(倍增)</li><li>TCP发送方首先发送一个数据报，然后等待对方的回应</li><li>得到回应后就把这个窗口的大小加倍，然后连续发送两个数据报</li><li>等到对方回应以后，再把这个窗口加倍</li></ul></li></ul></li></ul><h3 id="TCP的超时与重传"><a href="#TCP的超时与重传" class="headerlink" title="TCP的超时与重传"></a>TCP的超时与重传</h3><blockquote><p>超时重传是TCP协议保证数据可靠性的另一个重要机制，其原理是在发送某一个数据以后就<strong>开启一个计时器</strong>，在一定时间内如果没有得到发送的数据报的ACK报文，那么就重新发送数据，直到发送成功为止。</p></blockquote><ul><li>超时<ul><li>定时长久会造成网络利用率不高</li><li>定时太短会造成多次重传，使得网络阻塞</li></ul></li><li>计时器的使用<ul><li>一个连接中，有且仅有一个测量定时器被使用。也就是说，如果TCP连续发出3组数据，只有一组数据会被测量。</li><li>ACK数据报不会被测量，原因很简单，没有ACK的ACK回应可以供结束定时器测量。</li></ul></li><li>重传<ul><li>拥塞窗口最初使用指数增长的速度来增加自身的窗口，直到发生超时重传，再进行一次微调。</li><li>如何进行微调，拥塞避免算法和慢启动门限就是为此而生。<ul><li>慢启动门限就是说，当拥塞窗口超过这个门限的时候，就使用拥塞避免算法，而在门限以内就采用慢启动算法</li></ul></li><li>快速重传和快速恢复算法<ul><li>一般来说，重传发生在超时之后，但是如果发送端接受到3个以上的重复ACK的情况下，就应该意识到，数据丢了，需要重新传递</li><li>这个机制是不需要等到重传定时器溢出的，所以叫做<strong>快速重传</strong>，而重新传递以后，因为走的不是<strong>慢启动</strong>而是<strong>拥塞避免算法</strong>，所以这又叫做<strong>快速恢复算法</strong></li></ul></li></ul></li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="UDP端口号"><a href="#UDP端口号" class="headerlink" title="UDP端口号"></a>UDP端口号</h3><ul><li>例如某一个UDP程序A在系统中注册了3000端口，那么，以后从外面传进来的目的端口号为3000的UDP包都会交给该程序。端口号理论上可以有2^16这么多。因为它的长度是16个bit</li><li>UDP检验和覆盖UDP协议头和数据, UDP和TCP都包含一个伪首部，这是为了计算检验和而摄制的。</li><li>目的是让UDP两次检查数据是否已经正确到达目的地。</li></ul><blockquote><p>UDP可以很长很长，可以有65535字节那么长。但是一般网络在传送的时候，一次一般传送不了那么长的协议（涉及到MTU的问题），就只好对数据分片</p></blockquote><h3 id="IP分片"><a href="#IP分片" class="headerlink" title="IP分片"></a>IP分片</h3><ul><li>IP在从上层接到数据以后，要根据IP地址来判断从那个接口发送数据（通过选路），并进行MTU的查询，如果数据大小超过MTU就进行数据分片。</li><li>在IP头里面<ul><li>16bit识别号唯一记录了一个IP包的ID,具有同一个ID的IP片将会被重新组装；</li><li>而13位片偏移则记录了某IP片相对整个包的位置；</li><li>而这两个表示中间的3bit标志则标示着该分片后面是否还有新的分片。</li></ul></li></ul><h3 id="UDP服务器设计"><a href="#UDP服务器设计" class="headerlink" title="UDP服务器设计"></a>UDP服务器设计</h3><ul><li>关于客户IP和地址：服务器必须有根据客户IP地址和端口号判断数据包是否合法的能力（这似乎要求每一个服务器都要具备）</li><li>关于目的地址：服务器必须要有过滤广播地址的能力。</li><li>关于数据输入：通常服务器系统的每一个端口号都会和一块输入缓冲区对应，进来的输入根据先来后到的原则等待服务器的处理，所以难免会出现缓冲区溢出的问题，这种情况下，UDP数据包可能会被丢弃，而应用服务器程序本身并不知道这个问题。</li><li>服务器应该限制本地IP地址，就是说它应该可以把自己绑定到某一个网络接口的某一个端口上。</li></ul><h2 id="广播和多播，IGMP协议"><a href="#广播和多播，IGMP协议" class="headerlink" title="广播和多播，IGMP协议"></a>广播和多播，IGMP协议</h2><h3 id="单播-unicast"><a href="#单播-unicast" class="headerlink" title="单播(unicast)"></a>单播(unicast)</h3><ul><li>单播是说，对特定的主机进行数据传送。</li><li>例如给某一个主机发送IP数据包。这时候，数据链路层给出的数据头里面是非常具体的目的地址，对于以太网来 说，就是网卡的MAC地址。</li></ul><h3 id="广播-unicast"><a href="#广播-unicast" class="headerlink" title="广播(unicast)"></a>广播(unicast)</h3><ul><li>广播是主机针对某一个网络上的所有主机发送数据包。</li><li>这个网络可能是网络，可能是子网，还可能是所有的子网。</li><li>一般说来ARP，或者路由协议RIP应该是以广播的形式播发的。</li></ul><h3 id="多播-multicast"><a href="#多播-multicast" class="headerlink" title="多播(multicast)"></a>多播(multicast)</h3><ul><li>多播就是给一组特定的主机（多播组）发送数据</li><li>多播的数据还是要通过数据链路层进行MAC地址绑定然后进行发送。所以一个以太网卡在绑定了一个多播IP地址之后，必 定还要绑定一个多播的MAC地址，才能使得其可以像单播那样工作。</li></ul><h3 id="IGMP"><a href="#IGMP" class="headerlink" title="IGMP"></a>IGMP</h3><ul><li>IGMP的作用在于，让其他所有需要知道自己处于哪个多播组的主机和路由器知道自己的状态。</li></ul><h2 id="DNS域名系统"><a href="#DNS域名系统" class="headerlink" title="DNS域名系统"></a>DNS域名系统</h2><ul><li>它负责把FQDN(就是以”.”分隔结尾的名字)翻译成一个IP。</li><li>DNS系统是一个分布式的数据库，当一个数据库发现自己并没有某查询所需要的数据的时候，它将把查询转发出去，而转发的目的地通常是根服务器，根服 务器从上至下层层转发查询，直到找到目标为止。</li></ul><h3 id="用UDP还是TCP"><a href="#用UDP还是TCP" class="headerlink" title="用UDP还是TCP"></a>用UDP还是TCP</h3><ul><li>而大多数的查询都是UDP查询的，一般需要TCP查询的有两种情况<ul><li>当查询数据多大以至于产生了数据截断(TC标志为1)，这时，需要利用TCP的分片能力来进行数据传输</li><li>当主（master）服务器和辅（slave）服务器之间通信，辅服务器要拿到主服务器的zone信息的时候。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="TCP/IP" scheme="https://www.jelech.top/tags/TCP-IP/"/>
    
      <category term="协议" scheme="https://www.jelech.top/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>HTTP学习笔记</title>
    <link href="https://www.jelech.top/posts/864/"/>
    <id>https://www.jelech.top/posts/864/</id>
    <published>2018-12-03T10:09:33.000Z</published>
    <updated>2019-08-12T15:45:11.427Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p><code>HyperText Transfer Protocol</code>基于TCP/IP通讯协议来传输数据</p><h3 id="客户端请求消息"><a href="#客户端请求消息" class="headerlink" title="客户端请求消息"></a>客户端请求消息</h3><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。</p><p><img src="../../assets/images/2012072810301161.png" alt="2012072810301161"></p><p>HTTP 协议中共定义了八种方法或者叫“动作”来表明对 Request-URI 指定的资源的不同操作方式，虽然 HTTP 的请求方式有 8 种，但是我们在实际应用中常用的也就是 <strong>get</strong> 和 <strong>post</strong>，其他请求方式也都可以通过这两种方式间接的来实现，具体介绍如下：</p><ul><li><code>OPTIONS</code>：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。</li><li><code>HEAD</code>：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</li><li><code>GET</code>：向特定的资源发出请求。</li><li><code>POST</code>：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</li><li><code>PUT</code>：向指定资源位置上传其最新内容。</li><li><code>DELETE</code>：请求服务器删除 Request-URI 所标识的资源。</li><li><code>TRACE</code>：回显服务器收到的请求，主要用于测试或诊断。</li><li><code>CONNECT</code>：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li></ul><p><img src="assets/get-http.png" alt="get-http"></p><h5 id="客户端请求GET实例"><a href="#客户端请求GET实例" class="headerlink" title="客户端请求GET实例"></a>客户端请求GET实例</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/562f25980001b1b106000338.jpg</span> HTTP/1.1</span><br><span class="line">Host    img.mukewang.com</span><br><span class="line">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</span><br><span class="line">Accept    image/webp,image/*,*/*;q=0.8</span><br><span class="line">Referer    http://www.imooc.com/</span><br><span class="line">Accept-Encoding    gzip, deflate, sdch</span><br><span class="line">Accept-Language    zh-CN,zh;q=0.8</span><br></pre></td></tr></table></figure><ul><li>请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本<ul><li>GET说明请求类型为GET</li><li>[/562f25980001b1b106000338.jpg]为要访问的资源</li><li>该行的最后一部分说明使用的是HTTP1.1版本。</li></ul></li><li>请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息<ul><li>从第二行起为请求头部，HOST将指出请求的目的地.</li><li>User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.</li><li>该信息由你的浏览器来定义,并且在每个请求中自动发送等等</li></ul></li><li>空行，请求头部后面的空行是必须的<ul><li>即使第四部分的请求数据为空，也必须有空行</li></ul></li><li>请求数据也叫主体，可以添加任意的其他数据</li></ul><h4 id="http响应头信息"><a href="#http响应头信息" class="headerlink" title="http响应头信息"></a>http响应头信息</h4><table><thead><tr><th>应答头</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>服务器支持哪些请求方法（如GET、POST等）。</td></tr><tr><td>Content-Encoding</td><td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。<code>因此，Servlet应该通过查看Accept-Encoding头</code>（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，<code>为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面</code>。</td></tr><tr><td>Content-Length</td><td>表示内容长度。<code>只有当浏览器使用持久HTTP连接时才需要这个数据</code>。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td>Content-Type</td><td>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但<code>通常需要显式地指定为text/html</code>。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td>Date</td><td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td>Expires</td><td>应该在什么时候认为文档已经过期，从而不再缓存它？</td></tr><tr><td>Last-Modified</td><td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td>Location</td><td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr><tr><td>Refresh</td><td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<code>http://host/path</code>“)让浏览器读取指定的页面。%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82) 注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=<code>http://host/path</code>“＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。 注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td></tr><tr><td>Server</td><td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td>Set-Cookie</td><td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td>WWW-Authenticate</td><td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。 注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td></tr></tbody></table><h3 id="服务端响应"><a href="#服务端响应" class="headerlink" title="服务端响应"></a>服务端响应</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文</p><p><img src="assets/httpmessage.jpg" alt="httpmessage"></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 27 Jul 2009 12:28:53 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class="line">ETag: &quot;34aa387-d-1568eb00&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 51</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><h3 id="HTTP状态码列表"><a href="#HTTP状态码列表" class="headerlink" title="HTTP状态码列表"></a>HTTP状态码列表</h3><ul><li>1xx：指示信息–表示请求已接收，继续处理</li><li>2xx：成功–表示请求已被成功接收、理解、接受</li><li>3xx：重定向–要完成请求必须进行更进一步的操作</li><li><p>4xx：客户端错误–请求有语法错误或请求无法实现</p></li><li><p>5xx：服务器端错误–服务器未能实现合法的请求</p></li></ul><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th><th></th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td><td></td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td><td></td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td><td></td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td><td></td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td><td></td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td><td></td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td><td></td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td><td></td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td><td></td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td><td></td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td><td></td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td><td></td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td><td></td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td><td></td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td><td></td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td><td></td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td><td></td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td><td></td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td><td></td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td><td></td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td><td></td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td><td></td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td><td></td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td><td></td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td><td></td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td><td></td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td><td></td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td><td></td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td><td></td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td><td></td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td><td></td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td><td></td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td><td></td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td><td></td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><blockquote><p>协议://域名/文件名#锚点?参数</p></blockquote><ol><li>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符</li><li>域名部分：该URL的域名部分为“<a href="http://www.jelech.cn”。一个URL中，也可以使用IP地址作为域名使用" target="_blank" rel="noopener">www.jelech.cn”。一个URL中，也可以使用IP地址作为域名使用</a></li><li>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</li><li>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</li><li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</li><li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</li><li>参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</li></ol><p>uri &amp; url</p><ul><li>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的</li><li>URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源</li></ul><h3 id="HTTP1-0与1-1"><a href="#HTTP1-0与1-1" class="headerlink" title="HTTP1.0与1.1"></a>HTTP1.0与1.1</h3><ol><li><strong>缓存处理</strong></li><li><strong>带宽优化及网络连接的使用</strong>，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li><li><strong>错误通知的管理</strong>，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</li><li><strong>Host头处理</strong>，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</li><li><strong>长连接</strong>，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</li></ol><h3 id="HTTP与HPPTS"><a href="#HTTP与HPPTS" class="headerlink" title="HTTP与HPPTS"></a>HTTP与HPPTS</h3><ul><li>HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。</li><li>HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。</li><li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。</li></ul><h3 id="SPDY"><a href="#SPDY" class="headerlink" title="SPDY"></a>SPDY</h3><blockquote><p>2012年google如一声惊雷提出了SPDY的方案，优化了HTTP1.X的请求延迟，解决了HTTP1.X的安全性</p></blockquote><ol><li><strong>降低延迟</strong>，针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。</li><li><strong>请求优先级</strong>（request prioritization）。多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。</li><li><strong>header压缩。</strong>前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。</li><li><strong>基于HTTPS的加密协议传输</strong>，大大提高了传输数据的可靠性。</li><li><strong>服务端推送</strong>（server push），采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。</li></ol><blockquote><p>SPDY位于HTTP之下，TCP和SSL之上，这样可以轻松兼容老版本的HTTP协议(将HTTP1.x的内容封装成一种新的frame格式)，同时可以使用已有的SSL功能。</p></blockquote><p><strong>HTTP2.0的多路复用和HTTP1.X中的长连接复用有什么区别？</strong></p><ul><li>HTTP/1.* 一次请求-响应，建立一个连接，用完关闭；每一个请求都要建立一个连接；</li><li>HTTP/1.1 Pipeling解决方式为，若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</li><li>HTTP/2多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行；</li></ul><blockquote><p>服务端推送能把客户端所需要的资源伴随着index.html一起发送到客户端，省去了客户端重复请求的步骤。正因为没有发起请求，建立连接等操作，所以静态资源通过服务端推送的方式可以极大地提升速度。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP" scheme="https://www.jelech.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>python进阶学习笔记(好像还是有点基础)</title>
    <link href="https://www.jelech.top/posts/60692/"/>
    <id>https://www.jelech.top/posts/60692/</id>
    <published>2018-12-03T02:09:33.000Z</published>
    <updated>2018-12-03T15:17:22.177Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="Python的学习笔记-高级编程"><a href="#Python的学习笔记-高级编程" class="headerlink" title="Python的学习笔记-高级编程"></a>Python的学习笔记-高级编程</h1><p>有关linux-python3的搭建，可以参考我的另一篇博客。</p><blockquote><p>由于现在的python分为了2.7阵营和3+阵营，但是3+优化了许多的细节问题、修改了一些bug。所以这里就以3+的python为主啦</p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>每个文件的开头一般会写<code>#!/usr/bin/python3</code></p><p>安装部分直接跳过，可参考我的另一篇博客</p><h3 id="python语法"><a href="#python语法" class="headerlink" title="python语法"></a>python语法</h3><p>这部分也跳过，基础部分。</p><p>但是值得一提的是，语言真的是想通的。c++可通过适当 的修改，变为python：</p><ul><li><p>去掉c++中的所有大括号</p></li><li><p>去掉c++中变量声明时的类型符号(int,float,double…)</p></li><li><p>换行和缩进必须为标准</p></li><li><p>每个判断类型的关键字(如if、else、while、for、函数…)当行的后面都需要加冒号</p><p>  这时候基本上已经很接近python语法了</p><p>  可以一行进行多条语句，语句间用<code>;</code>号分割</p></li></ul><h3 id="数据类型（不需要特殊声明）"><a href="#数据类型（不需要特殊声明）" class="headerlink" title="数据类型（不需要特殊声明）"></a>数据类型（不需要特殊声明）</h3><ul><li><p>Number（数字）</p></li><li><p>String（字符串）</p></li><li><p>List（列表）</p></li><li><p>Tuple（元组）</p></li><li><p>Set（集合）</p></li><li><p>Dictionary（字典）</p><p>  其中：</p></li><li><p><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</p></li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>您也可以使用del语句删除一些对象引用。<code>del var1[,var2[,var3[....,varN]]]</code></p><h4 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h4><p><code>string * num</code>表示复制string字符串num次</p><p>Python 使用反斜杠()转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串<code>&gt;&gt;&gt; print(r&#39;Ru\noob&#39;)</code></p><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如<code>word[0] = &#39;m&#39;</code>会导致错误。</p><h3 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h3><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。其实，可以把字符串看作一种特殊的元组。</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line">print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line">print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line">print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><h3 id="Dictionary（字典）-对应c-中的map"><a href="#Dictionary（字典）-对应c-中的map" class="headerlink" title="Dictionary（字典）(对应c++中的map)"></a>Dictionary（字典）(对应c++中的map)</h3><p>字典是一种映射类型，字典用”{ }”标识，它是一个<strong>无序</strong>的<strong>键(key) : 值(value)</strong>对集合。</p><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将x转换为一个整数,进制</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p><h3 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h3><table><thead><tr><th>函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>choice(seq)</td><td style="text-align:left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td>randrange ([start,] stop [,step])</td><td style="text-align:left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1</td></tr><tr><td>random()</td><td style="text-align:left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td>seed([x])</td><td style="text-align:left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td>shuffle(lst)</td><td style="text-align:left">将序列的所有元素随机排序</td></tr><tr><td>uniform(x, y)</td><td style="text-align:left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="https://www.jelech.top/tags/python/"/>
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>static的那些事</title>
    <link href="https://www.jelech.top/posts/52795/"/>
    <id>https://www.jelech.top/posts/52795/</id>
    <published>2018-12-02T10:09:33.000Z</published>
    <updated>2018-12-05T14:41:12.116Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h3 id="1-先来介绍它的第一条也是最重要的一条：隐藏。（static函数，static变量均可）"><a href="#1-先来介绍它的第一条也是最重要的一条：隐藏。（static函数，static变量均可）" class="headerlink" title="1.先来介绍它的第一条也是最重要的一条：隐藏。（static函数，static变量均可）"></a>1.先来介绍它的<strong>第一条也是最重要的一条：隐藏</strong>。（static函数，static变量均可）</h3><p>当同时编译多个文件时，所有未加static前缀的全局变量和函数都具有全局可见性。<br>举例来说明。同时编译两个源文件，一个是a.c，另一个是main.c。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//a.c</span><br><span class="line">char a = &apos;A&apos;; // global variable</span><br><span class="line">void msg()</span><br><span class="line">&#123;</span><br><span class="line">     printf(&quot;Hello\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//main.c</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">     extern char a; // extern variable must be declared before use</span><br><span class="line">     printf(&quot;%c &quot;, a);</span><br><span class="line">     (void)msg();</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果是：</p><p>A Hello</p><p>为什么在a.c中定义的全局变量a和函数msg能在main.c中使用？前面说过，所有未加static前缀的全局变量和函数都具有全局可见性，其它的源文件也能访问。此例中，a是全局变量，msg是函数，并且都没有加static前缀，因此对于另外的源文件main.c是可见的。<br>如果加了static，就会对其它源文件隐藏。例如在a和msg的定义前加上static，main.c就看不到它们了。利用这一特性可以在不同的文件中定义同名函数和同名变量，而不必担心命名冲突。static可以用作函数和变量的前缀，对于函数来讲，static的作用仅限于隐藏.</p><h3 id="2-static的第二个作用是保持变量内容的持久。（static变量中的记忆功能和全局生存期）"><a href="#2-static的第二个作用是保持变量内容的持久。（static变量中的记忆功能和全局生存期）" class="headerlink" title="2.static的第二个作用是保持变量内容的持久。（static变量中的记忆功能和全局生存期）"></a><strong>2.static的第二个作用是保持变量内容的持久</strong>。（static变量中的记忆功能和全局生存期）</h3><p>存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。共有两种变量存储在静态存储区：全局变量和static变量，只不过和全局变量比起来，static可以控制变量的可见范围，说到底static还是用来隐藏的。虽然这种用法不常见</p><p>PS：如果作为static局部变量在函数内定义，它的生存期为整个源程序，但是其作用域仍与自动变量相同，只能在定义该变量的函数内使用该变量。退出该函数后， 尽管该变量还继续存在，但不能使用它。</p><p>程序举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">＃include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int fun()&#123;</span><br><span class="line">    static int count = 10; //在第一次进入这个函数的时候，变量a被初始化为10！并接着自减1，以后每次进入该函数，a</span><br><span class="line">    return count--; //就不会被再次初始化了，仅进行自减1的操作；在static发明前，要达到同样的功能，则只能使用全局变量：    </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int count = 1;</span><br><span class="line"> </span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">     printf(&quot;global\t\tlocal static\n&quot;);</span><br><span class="line">     for(; count &lt;= 10; ++count)</span><br><span class="line">               printf(&quot;%d\t\t%d\n&quot;, count, fun());</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果是：</p><p>global  local static<br>1 10<br>2 9<br>3 8<br>4 7<br>5 6<br>6 5<br>7 4<br>8 3<br>9 2<br>10 1</p><p>基于以上两点可以得出一个结论：<code>把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量后是改变了它的作用域， 限制了它的使用范围。因此static 这个说明符在不同的地方所起的作用是不同的。</code></p><h3 id="3-static的第三个作用是默认初始化为0（static变量）"><a href="#3-static的第三个作用是默认初始化为0（static变量）" class="headerlink" title="3.static的第三个作用是默认初始化为0（static变量）"></a><strong>3.static的第三个作用是默认初始化为0（static变量）</strong></h3><p>其实全局变量也具备这一属性，因为全局变量也存储在静态数据区。在静态数据区，内存中所有的字节默认值都是0x00，某些时候这一特点可以减少程序员的工作量。比如初始化一个稀疏矩阵，我们可以一个一个地把所有元素都置0，然后把不是0的几个元素赋值。如果定义成静态的，就省去了一开始置0的操作。再比如要把一个字符数组当字符串来用，但又觉得每次在字符数组末尾加‘\0’;太麻烦。如果把字符串定义成静态的，就省去了这个麻烦，因为那里本来就是‘\0’;不妨做个小实验验证一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">＃include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int a;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">     int i;</span><br><span class="line">     static char str[10];</span><br><span class="line">     printf(&quot;integer: %d; string: (begin)%s(end)&quot;, a, str);</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果是：</p><p>integer: 0; string: (begin) (end) </p><p>最后对static的三条作用做一句话总结。首先static的最主要功能是隐藏，其次因为static变量存放在静态存储区，所以它具备持久性和默认值0. </p><h3 id="4-static的第四个作用：C-中的类成员声明static（有些地方与以上作用重叠）"><a href="#4-static的第四个作用：C-中的类成员声明static（有些地方与以上作用重叠）" class="headerlink" title="4.static的第四个作用：C++中的类成员声明static（有些地方与以上作用重叠）"></a><strong>4.static的第四个作用：C++中的类成员声明static</strong>（有些地方与以上作用重叠）</h3><p> 在类中声明static变量或者函数时，初始化时使用作用域运算符来标明它所属类，因此，静态数据成员是类的成员，而不是对象的成员，这样就出现以下作用：</p><p>(1)类的静态成员函数是属于整个类而非类的对象，所以它没有this指针，这就导致 了它仅能访问类的静态数据和静态成员函数。      </p><p>(2)不能将静态成员函数定义为虚函数。      </p><p>(3)由于静态成员声明于类中，操作于其外，所以对其取地址操作，就多少有些特殊 ，变量地址是指向其数据类型的指针 ，函数地址类型是一个“nonmember函数指针”。</p><p>(4)由于静态成员函数没有this指针，所以就差不多等同于nonmember函数，结果就 产生了一个意想不到的好处：成为一个callback函数，使得我们得以将C++和C-based X W indow系统结合，同时也成功的应用于线程函数身上。 （这条没遇见过）  </p><p>(5)static并没有增加程序的时空开销，相反她还缩短了子类对父类静态成员的访问 时间，节省了子类的内存空间。      </p><p>(6)静态数据成员在&lt;定义或说明&gt;时前面加关键字static。      </p><p>(7)静态数据成员是静态存储的，所以必须对它进行初始化。 （程序员手动初始化，否则编译时一般不会报错，但是在Link时会报错误） </p><p>(8)静态成员初始化与一般数据成员初始化不同:</p><p>初始化在类体外进行，而前面不加static，以免与一般静态变量或对象相混淆；<br>初始化时不加该成员的访问权限控制符private，public等；<br>初始化时使用作用域运算符来标明它所属类；<br>​           所以我们得出静态数据成员初始化的格式：<br>&lt;数据类型&gt;&lt;类名&gt;::&lt;静态数据成员名&gt;=&lt;值&gt;</p><p>(9)为了防止父类的影响，可以在子类定义一个与父类相同的静态变量，以屏蔽父类的影响。这里有一点需要注意：我们说静态成员为父类和子类共享，但我们有重复定义了静态成员，这会不会引起错误呢？不会，我们的编译器采用了一种绝妙的手法：name-mangling 用以生成唯一的标志。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.jelech.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://www.jelech.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="c++" scheme="https://www.jelech.top/tags/c/"/>
    
  </entry>
  
</feed>
