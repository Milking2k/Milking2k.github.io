<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jelech的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jelech.cn/"/>
  <updated>2018-12-06T14:00:57.564Z</updated>
  <id>http://www.jelech.cn/</id>
  
  <author>
    <name>Jelech</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习的阻碍</title>
    <link href="http://www.jelech.cn/posts/45237/"/>
    <id>http://www.jelech.cn/posts/45237/</id>
    <published>2018-12-06T13:31:17.000Z</published>
    <updated>2018-12-06T14:00:57.564Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19jT06rvXUiYqL8/i/5+emgFNhjDZNLCA/6mwoAfY1Mu0A+BBZvcpATojDiE18ExsqichMq/qdT0MrmRKK8I3VM5Xo1rWaJb44vx8FQ3Qn3mlhg0akgiGImDq85XY0hWind3lm1CVhWYdqFe9JP1qS42G/1AYocC6FmbinoFn2vsrjesRkazApGBQ7PqjzcPHPuAoYBp1ag5zZjoxTH6hgvNr6PHE3GxNjeknbnGZ95zhkw1BTThmeI8vwJXRQbmFssd3GcG3Tgv5S1PE63NmoeFbTgkgQoCvfT2WFkkY9aLym2SvLq8e16lza94vxqOPiPxcCLC7zBesPEa7/rXQ/4Ob8nqTmDa/D6JBkeXq5GhAuOWyRiXeU2VIgGcYVzT4jY69WIzDTQQH8Bl3vR6rnzuXY81bc1Cfmu9H99E3gXbqpHQvQBRuPySK0wQHS1l8yz7D0mxiIk+63RQWO9gw97FJ8wjr2PAdSv0DStqdY9wS394ddmzogZY7BlMDuUbFR2utYIS+7WCgQ9pDabeHBYXEvWxgEbbcQoHU5T/1yao0ENPD20KDFHuHAyCZLWQp8rD6N+AlnKhcbwUw477/x8S58nKgFWYQakkFMb+H4bZAi0EmU/elIeCg8X6Yjk9ruPgRaYSld8y5cQFs8wc5Y+5k8CCM9+sR4c10FU4jVG1ticVRPa84aL3jyRKiVpBgx0dp6AyBQkQQar4hvC0vrG9FWFxoXprKKW2c/KwW+is0teAb3LOz5BH1Xn3nA9dPJBJHsUkEfaWNr31rcC5PTLRajcPIu/nEtH3sKfVKiLc9E1ptPzlEJdsYY7NUyv+l0bisKwyX0Ktvaap1SPe9GK9DnADNlqw8OlbCX2+ykDf8fsEELl+HGdjZTbMdg7gY3eFv1H9A/4IkAHpDzEAvAjqy+gQgAFmlrAvFpGL2F3mN4FjugK2OSet7eKF4SMggc7BoYQ66tUO3TN+Njm7EcvBXFU904m6pMX2Tjj6k/A5awdsHfzntfTYMZ6z8v8dpeKr8Z+Gh31ULVON6nOQYcQVzV481nag2mOzRm/wBvxxLn9eZOMgd2HvT+wssz0wQINTP5y3/mgNmveXtKiAgQat3AW/jNci2E8elAeJJBtc4inyPs8AdR8I577xi6oKkOH9pYaRpfOQwpYw+vYwxmt82dWZM2PzS3i+5QunniaCKqtqwN4F5IQPvBcbV9V7jIgjbRQeEEehTN15hoYqEfVYRq2OMd7HfLlS9mLaFn+Y1QJROagZLfQijKu7oIO05c9Z2i/dN1EQBlifzFQgKV4+lFKIke36jQT7Lx9A5Dx4JShNCXO1SE29A5aygVtLOJke7R/0Diu9Y5MlTui3nppzzblXLlfsCdU3jAERV1iKOPubmJiiXFMC9+Qta4oKc5MHXcTnwS18BBrrkrTa10DgcOHE42i5zzv8b1u2uUTZ06XPPI2ybyH6HaXJ+7JmTE5t5l2m/a3vAy8hv1JUlpmXLAfrSyowlfTlA90njpOLt/m8LiKWlcXLyRzuX5t8YF823+/Fg7eKBDp82HVKjTA4i86w1BDzK0yG7tvfv+cqzoh8B1XieF8S7uV+Jx0Ol9bqXaGbZVS9qmXZ1/iQWNbae78gn4blcVJvL/Y4AT/SHxQ+9wssYPmYl4cfuGsFgla5pQSOAUHKV5KuJLQQ0VbiHg2CA4NruwDQJF3X16Uyd5jQjD1Q4qteAGjf91vQupyKjqp6Y4ay+Gx9Nscpfhny0NqnpSFbhKmLJ16JR+yyIFPhEWPB7BCHa6GXJmWbU3vJMiWz27+jxVDwQV2VJ2MGSVdlvPbdUdfyxJ9jPe33TgzkfENf5bsf1+cq/N3GB6BiyOWvsG3Sw2pCikbKnfXQy1jn+PBeDM6wRTAt5/aS9+rHoIrL8QgAZ+Mr9rWbUgRVygk3luFh38AsgawsFKDy8t91FP6IycVHpS3AWcgIKpIAoHTc6ilyz9aspXae5QHGe36xgsYppPAyKRVio1PyTtb6LFZv4yn5ozQSP3hhBMurLplteRBnSJeSIYlaa9YYmed8MKMRUi1wW5OjE4GF0Ax2kGr9ZsUAW2eyr1IHLOMmhRZ2Y6Yw6KAnR7rcaKZHPi0F4eijri7ssm0TsWCCudL//CKUZSCSivCCek5aaJ5XXNASDTNGJZbNpb6sW3EFC4fYAsL7KI94iUdXYWYURJT+W59oyPNGLQYe6lkJ6XnorWASzOXe4e1/UebzLEdcDwqwzfl2zyfSXLHzBh6QihAKfC2fUysl490TOKup5ex5SBGDFZBD1tYsb6zWAP6045a1uj20Q4K956xHpm5z3OypQS6jx+5Du9UjXRUg+tzadPxcgZbqxQ2huJF/Fj6qqYke+LMcVEWNN5fvC9PL+BgksShC8xM/An0Mq6J30HRHFeO/uMzMUz6Awqgt2Jhk40Mr0cUlRuhNSl2mVmE1jUUvK7v/2p8WcIELVZnt6uyQsindrsZtiimqlA/J0iRPuYMaXawUj4imcXWhl8B21omNG2VfdVN0lXlJna2q9U9fBle2gjbdp6SozbrSxEC5Lhwmk8xDfmTH7DXyGVm5P067xUwAsQL+HnpfiEuUgJ0uE/5jVty7quVc95nLdPqI/We5sZ5kWzsQMUXsBoXBPL0Uk+p+5t+rcRvKsffgt48Z116nUAhUNgyUeXV5U0qEv93Wv5xyubjPIw2vQ0aOYJdFz+snXVPteii6SHq41VScGwk0Rj4HEXqias34tULz/obZkInGMfDLqGJGWObYm6HKshzoLqLAlZXdpCTSxIWiq2XPwpIaAQrarMwr+KSPABUWaBVOtTVxO628tn2uBxticlG+X6O9zRsg1xJEoc8AuK689XHmxgPMWBrtzuN2+1bdMYdOOxVQ5VYq7ZGhAhZUFG/sceXAoBKersWq4Krl5MR4eSkolBNM0gkdd8hIzoNmEND+ExPEblTCzJja7XjxyhNivsXR0/QfHGIq1tS/LKTLRjDu+zV7W6IJqDFS6qxBB4zRjizU0WoinqR+oJJW2p1mzSpwnm+IFgxjF3B5Mn1dePpIE0Dn/8yo41XKcIn17noGIFmeXlenWJS6cT+Efbnfj7bO6Wz8pi/3SFUCwvXr9LIDgPkbieRVpDkbYdOVW8oXIhoAXWKtuY4VsMNfh2tJcklRpwLS+Mgc0gFTmcnxAObgtEqU0KxhDWtGSfnbaiQIZIDEQeJNzD91XCEP4/c0dNr+AMlz+m3PnM8gT0iDhF4fg5QVPkiaXUd7qxMd/+4Q6bHVbxHuOfh1OOZTeqiCdFVSEbA12YxI65kEwXPTF3RjWpak9RmfxZam5qianSkVuoH3HTtOxLAJy5hYMmqqd0sXSZy8dlFQVnV3C+cWnHDC/9R7gueKQOJ6P2Y6pRawm81l9UMEh3iLtHiLReoak+vIwWlqcXp+viFZfR9tYXYE1U3LxCqlOPr451tRIbjMINb2g27HgbjtZ6ve131RteTrxjFwneP43A5Wga/KuS6mqoQfdf4f57dQeUrIxrJwiVeNYR/eqLCPzp+szi8L2V7qUBd8VmTLAke3Soi31a9wYc/o9B+D0jKf9B85mjPHnwlZQVSNv3GTN403cv3ydAwHMjZaTqN4G+usXXmZVfoSYX7CUG5XWeEPpP4tOc3p9A22rlBVXqdiaD/z/ZOa57IaTat6mmUJXBydRUzJ2MGGaGxn6eX9JShEGST4DKL8gQNUr/5QvL2kiO8nT1hdnYgbC+JfAohBxKMK/uPXcNHqA95bdnKBB8enn/YAjgM4aT+XQjCdRLuGhwYF1wCb6a8jhwFgp7iLKSsJbbJgfau6ssfQgyh8QvEKBes7LiKxmgyyMe2f9arH84m5FD+PR4uJOQYhgSrVt3dRhE3Jyulp+i7LsBAf3dHwKPa2B6Iy+WhDwvFGiWGjyUGNt3T/2A+I3TQuMwov5EF/sFBFzlRYMNRVs4ymVwK8HQNGF3yK8cuG21CJP7AEMtRx4OF2FmmqbvXA4yD2NNTyejIbFMPe2HevwOlLBVW+D9Rm4yF6Fft7MUxIKZOoBA7bfbuLq+9jmn62UI1XlKDu1tSWIipOX2ovaGCmZiaiGuCmS1IdA3cgQLaO0h07+xJgQ9ZbCfphliDKZ9FUwEb8VzZtznw2Ve+ktfjXMTzXTCCcDUhEZJL4H9dFonDBpRuU6FJqc8ZOY+VQfh8CyFyI1WwVMw/2PMemhRDvIIR8cS8g64rUnpsArMPUXM9n4KmaMXPX6uo9T4pFTH+HhjfEE43FMYZSOQhiZXkNbbVj8mB8E3tDde0gsKNGH+OrqHdMNXYMNYDUjTvkBib3ZEbTU9S+ofMQKhy6nS6LlUcNUcKtcCgaI4TfLqqy5eruxj8Had1nbowuwobJsDYMx6kwNapHg7pvMpUpRPPRPNUAkIHOFVgv+L54KxWhD/7TfLEN7DbAzACP2LWeOUkK9Q7TpeswwugZytn3snQ5hz8uZ2TsFkTL6HUSJqmuWCUS25SwQ21m7KhpdlRWajHj2JxB1FNqFGht+kc4OXETxGW4WhbXcFfrubhl3Msiu5gHC+nci8+6duWL3VtRYucFlGuMLdUPcTafIxbUylE4yPqXDbh8ZM6dyZn7fOCMIanCFhV5Akcao6VmsqULzJSraivGp+qc1fjyFCEQxAxqxewDXnhVFS8od1QAMvoKIkCNHLFuQJMNRXollaOKaqw6GVoLuTElatSY5dKjbhDJb8zwvQnXhwCCPd4Fw3fiR5iDt/ItHfcnOLV4FONOLOF1mN0M97V5tgERCSLQN8JX2Cy4HDsxkrmcRJzcA/B4RNhXSORuWnMhob7JBugP70IPRpZJIBGMS6eRR8vpDigdExSJ4F344cS0knU01vB32bTah6M426/7LXMbZ1j+kAR5RrBjy7376QjSMrayoclpgEsXkglsgxRfrGNopUl6uigzCJMc3u1Ku1aXetuPfmF3rhI1wOALqU1xSBHfyJYU3XQI0eDI2bgRMq/YvVDRp5KVW+1wNepoL+zG9zDDXw1nrRCO4jzzhiXnayohhCKCUXRV8zSwQjOdQydjYJE5GfisInPu6Xl1eLVP+D0nj35j0amaQ2cdzRMBWne0wAfXRT/R5WAk+X+bngKTZro1NOPN0V2fRY0/EPxxo/ibETji2iTCoo+G7dFDnwM96MdR6RF8tnZJAGA+dPfqsA0W+scivDrf08fTY1bHGd2SgeaXVFIiWXAdhRPAUxgocyejXVx4DJjDvjSBwK2C3NETEchMmeyVbs/7Wsc8rwk/OjUjlnUf536ux5dmbexGbgwtjDZiROhLvs7n/SGQH1qIAPD2dFG1r8Bs2RdJrIWno2MMtndIuZQSDtQZ1OX1zzd9rrhhMbvepFIjCuMBfwxyuYX7iQQGhOp8JZL0jmnI6sZxo65wCArDVkdwITs+Nq3hfERISiNAzyGIG8xe1GfrMxCcyHbIATyDMnJMubrl0466YvnZpMfR5YkNSeBO38uooiZT6ijo9aZL/stjBDGRlKkA5lymlFmeiB8qdDDqDS3Gd4V5nmvAhgWUPj6YKVLEPAq/q8rD6hddnG7VzqQukhzXvY3tW2vA2N51Nk/kNKN1S+dY71nFoneHy4RNGoAy2MJnMqlZxxhjtpDDNGGrgxYWn/B5hD3TFhP8WeCkG65F637imk2la+L5XIr1cS/kOTnEf58XEBKDSLufmcNrESiWf9KTZqUGEoKJsTQFjGagLsVyCNPSrJP/xOqPFU1dWAipckbPix+QHIgpQR39EXWjh17h2/i8PKgP+SMVaTSL1PPcn6URzggHkvogHZO4E94NdaWXIkuaA0M3tXAsESBFTS7yLnnlRykIxPuLmhDeE2fMIzhUER9zL1S/l0/XVQpTrge5/CmNBvtkq9apPeRX3yuu13yyssVBLm5Udk0eUae5bp1gwS7rxKnFEp8PTcnnff9XHlJJi3k+YoiUD3ZjmoVuBvT0YGzPzWJ8+WkIDOY/9kzxHdxH8LpLIVFesA+6ZZAfcFwb7ANV+ij1BHACqxx4GVebI4ch3l0jCoPQWzTBjYLRpRzvwvK1br0W4EvR8iTJkJAWUXzT1ma35PRZ5fr8aTpR/PQ5YfDfAR2EgVuv74Zxhfh5taMbZLfz2sobLqUlvI41w3Y+78bOKBYshP0tgG/YvqprHfzxBnXhD+sUnPW+ZJIeyfmb7DDF0mgVSB0B2egEtox5Q1rM5xRQlehp0FTCZD+LeqUSo9p2UY8FuIVg8UXZju8NKGlGwrv1NOJ8vAFF1sbiX6SCGDU+ClyLhOWbVyOE/0hkFsi5GOrwismbOqjOhQByOIX6u0xFf5MZ6rYTxoZyKiHb6tmHkKCtkAQU4JUiGW787oFuzRxY8MUicwQJt24yHtLayO3C519VvqF6EFvHUfcGimaYqEoN2qUHYvhMGDO4T7tsav/xyCEYEtFVb3ySl13fIYzWeYCTyfYW0s3XVtH2v4Vos3h8BOoX7/CS5ioNgCX1eRjZeDVvwDK4Gce8+vVHSP+JoKKb3o0WzOP1EX4qljHNAPsXwJeBoLD/02QLt6PK1xLmB+O/uZ7QEpDqCDi1mb9GxyGTd6B/KGLgZ4x+0J1wQ1vkdTnV4enhWc80LtYGaqPVpHafWZVyrwzhHzcwaX6ZPueTi++J3TNxUfLslMGaKykwim4FfAhCotZQEYtvJEK+gZFWlCM47FlZUbNHobLybJu8EmOjeDWl8beyylbjmDpi61+AzsrSW6F52iWnQbzyiZMmCW3KFw4augW3myDJixlCxbHtUiApO25tlKSSnzcm/z+LPSdl9om2aGpbiea0dtNNSOOMHq/PhRiLHFStgoFLsP0FtD0vKGN/sTRZASW22c10Cbnr6uL3ZrVyRTvFZEz0FWBHvoUppjO6rgD6gAUFpr/+AdjqMQOzjMPAjBOvZ+LPPNNJcd25U5quhbAFCDZv6/4ncaNsPSiPpUcdSXh39XWElLxj9gErsfeGoTFD5HtiqCb4qj67Aock3wqVHFqN7zeZNibPuySCc3l/cH4kDbuYWRdQfxp/I1nOsxhhUojaMI=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.jelech.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.jelech.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="感想" scheme="http://www.jelech.cn/tags/%E6%84%9F%E6%83%B3/"/>
    
      <category term="学习" scheme="http://www.jelech.cn/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP学习笔记</title>
    <link href="http://www.jelech.cn/posts/13277/"/>
    <id>http://www.jelech.cn/posts/13277/</id>
    <published>2018-12-04T04:09:33.000Z</published>
    <updated>2018-12-05T14:41:12.163Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="TCP-IP-教程"><a href="#TCP-IP-教程" class="headerlink" title="TCP/IP 教程"></a>TCP/IP 教程</h1><ul><li><p>您的浏览器与服务器都在使用 TCP/IP 协议</p></li><li><p>您的 E-Mail 使用 TCP/IP 协议</p></li><li><p>因特网地址是 TCP/IP 协议</p></li></ul><p>网际互联及OSI七层模型：</p><p>物理层、数据链路层、网络层、传输层、表示层、会话层、应用层</p><ul><li><p>物理层</p><p>  作用：定义一些电器，机械，过程和规范，如集线器；</p><p>  PDU(协议数据单元)：bit/比特</p><p>  设备：集线器HUB;</p><p>  注意：没有寻址的概念；</p></li><li><p>数据链路层</p><p>  作用：定义如何格式化数据，支持错误检测；</p><p>  典型协议：以太网，帧中继（古董级VPN）</p><p>  PDU：frame（帧）设备：以太网交换机；</p><p>  备注：交换机通过MAC地址转发数据，逻辑链路控制；</p></li><li><p>网络层</p><p>  作用：定义一个逻辑的寻址，选择最佳路径传输，路由数据包；</p><p>  典型协议：IP，IPX，ICMP,ARP(IP-&gt;MAC),IARP;</p><p>  PDU:packet/数据包；</p><p>  设备：路由器</p><p>  备注：实现寻址</p></li><li><p>传输层：</p><p>  作用：提供可靠和尽力而为的传输；</p><p>  典型协议：TCP,UDP,SPX,port(65535个端口),EIGRP,OSPF,</p><p>  PDU:fragment 段；</p><p>  无典型设备；</p><p>  备注：负责网络传输和会话建立;</p></li><li><p>会话层：</p><p>  作用：控制会话，建立管理终止应用程序会话；</p><p>  典型协议：NFS, SQL, ASP, PHP, JSP, RSVP(资源源预留协议), windows， </p><p>  备注：负责会话建立；</p></li><li><p>表示层：</p><p>  作用：格式化数据；</p><p>  典型协议：ASCII, JPEG. PNG, MP3. WAV, AVI, </p><p>  备注：可以提供加密服务；</p></li><li><p>应用层：</p><p>  作用：控制应用程序；</p><p>  典型协议：telnet, ssh, http, ftp, smtp, rip, BGP, (未完待续)</p><p>  备注：为应用程序提供网络服务；</p></li></ul><h2 id="在-TCP-IP-内部"><a href="#在-TCP-IP-内部" class="headerlink" title="在 TCP/IP 内部"></a>在 TCP/IP 内部</h2><p>在 TCP/IP 中包含一系列用于处理数据通信的协议：</p><ul><li>TCP (传输控制协议) - 应用程序之间通信</li><li>UDP (用户数据报协议) - 应用程序之间的简单通信</li><li>IP (网际协议) - 计算机之间的通信</li><li>ICMP (因特网消息控制协议) - 针对错误和状态</li><li>DHCP (动态主机配置协议) - 针对动态寻址</li></ul><p>当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方”握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。</p><p>这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。</p><p>UDP 和 TCP 很相似，但是更简单，同时可靠性低于 TCP。</p><h3 id="IP-是无连接的协议"><a href="#IP-是无连接的协议" class="headerlink" title="IP 是无连接的协议"></a>IP 是无连接的协议</h3><p>IP 用于计算机之间的通信。</p><p>IP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。</p><p>通过 IP，消息（或者其他数据）被<code>分割为小的独立的包</code>，并通过因特网在计算机之间传送。</p><p>IP 负责将每个包<strong>路由</strong>至它的目的地。</p><h3 id="IP-路由器"><a href="#IP-路由器" class="headerlink" title="IP 路由器"></a>IP 路由器</h3><p>当一个 IP 包从一台计算机被发送，它会到达一个 IP 路由器。</p><p>IP 路由器负责将这个包路由至它的目的地，直接地或者通过其他的路由器。</p><p><strong>在一个相同的通信中，一个包所经由的路径可能会和其他的包不同</strong>。而路由器负责根据通信量、网络中的错误或者其他参数来进行正确地寻址。</p><h3 id="总结TCP-IP是什么"><a href="#总结TCP-IP是什么" class="headerlink" title="总结TCP/IP是什么"></a>总结TCP/IP是什么</h3><p>TCP/IP 意味着 TCP 和 IP 在一起协同工作。</p><p>TCP 负责应用软件（比如您的浏览器）和网络软件之间的通信。</p><p>IP 负责计算机之间的通信。</p><p>TCP 负责将数据分割并装入 IP 包，然后在它们到达的时候重新组合它们。</p><p>IP 负责将包发送至接受者。</p><h2 id="TCP-IP-寻址"><a href="#TCP-IP-寻址" class="headerlink" title="TCP/IP 寻址"></a>TCP/IP 寻址</h2><p>TCP/IP 使用 32 个比特或者 4 组 0 到 255 之间的数字来为计算机编址。</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>每个计算机必须有一个 IP 地址才能够连入因特网。</p><p>每个 IP 包必须有一个地址才能够发送到另一台计算机。</p><p>每个计算机必须有一个唯一的 4 组数字的地址，每组数字必须在 0 到 255 之间，并由点号隔开，比如：<code>192.168.1.60</code></p><h3 id="IP-V6"><a href="#IP-V6" class="headerlink" title="IP V6"></a>IP V6</h3><blockquote><p>IPv6 是 “Internet Protocol Version 6” 的缩写，也被称作下一代互联网协议，它是由 IETF 小组（Internet 工程任务组Internet Engineering Task Force）设计的用来替代现行的 IPv4（现行的）协议的一种新的 IP 协议。</p></blockquote><p>规定的标准语法建议把 IPv6 地址的 128 位（16 个字节）写成 8 个 16 位的无符号整数，每个整数用 4 个十六进制位表示，这些数之间用冒号（:）分开，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">686</span>E：<span class="number">8</span>C64：FFFF：FFFF：<span class="number">0</span>：<span class="number">1180</span>：<span class="number">96</span>A：FFFF</span><br></pre></td></tr></table></figure><p>冒号十六进制记法允许零压缩，即一串连续的0可以用一对冒号取代，只能使用一次零压缩。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FF05：0：0：0：0：0：0：B3 /*可以定成：*/ FF05：：B3</span><br></pre></td></tr></table></figure></p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>12 个阿拉伯数字很难记忆。使用一个名称更容易。</p><p>用于 TCP/IP 地址的名字被称为域名。jelech.cn 就是一个域名。</p><ul><li><p><code>SSL</code> - 安全套接字层（Secure Sockets Layer）</p><p>  SSL 协议用于为安全数据传输加密数据。</p></li><li><p><code>SMTP</code> - 简易邮件传输协议（Simple Mail Transfer Protocol）</p><p>  SMTP 用于电子邮件的传输。</p></li><li><p><code>MIME</code> - 多用途因特网邮件扩展（Multi-purpose Internet Mail Extensions）</p><p>  MIME 协议使 SMTP 有能力通过 TCP/IP 网络传输多媒体文件，包括声音、视频和二进制数据。</p></li><li><p><code>IMAP</code> - 因特网消息访问协议（Internet Message Access Protocol）</p><p>  IMAP 用于存储和取回电子邮件。</p></li><li><p>POP - 邮局协议（Post Office Protocol）</p><p>  POP 用于从电子邮件服务器向个人电脑下载电子邮件。</p></li><li><p><code>FTP</code> - 文件传输协议（File Transfer Protocol）</p><p>  FTP 负责计算机之间的文件传输。</p></li><li><p><code>NTP</code> - 网络时间协议（Network Time Protocol）</p><p>  NTP 用于在计算机之间同步时间（钟）。</p></li><li><p><code>DHCP</code> - 动态主机配置协议（Dynamic Host Configuration Protocol）</p><p>  DHCP 用于向网络中的计算机分配动态 IP 地址。</p></li><li><p>SNMP - 简单网络管理协议（Simple Network Management Protocol）</p><p>  SNMP 用于计算机网络的管理。</p></li><li><p>LDAP - 轻量级的目录访问协议（Lightweight Directory Access Protocol）</p><p>  LDAP 用于从因特网搜集关于用户和电子邮件地址的信息。</p></li><li><p><code>ICMP</code> - 因特网消息控制协议（Internet Control Message Protocol）</p><p>  ICMP 负责网络中的错误处理。</p></li><li><p><code>ARP</code> - 地址解析协议（Address Resolution Protocol）</p><p>  ARP - 用于通过 IP 来查找基于 IP 地址的计算机网卡的硬件地址。</p></li><li><p>RARP - 反向地址转换协议（Reverse Address Resolution Protocol）</p><p>  RARP 用于通过 IP 查找基于硬件地址的计算机网卡的 IP 地址。</p></li><li><p>BOOTP - 自举协议（Boot Protocol）</p><p>  BOOTP 用于从网络启动计算机。</p></li><li><p><code>PPTP</code> - 点对点隧道协议（Point to Point Tunneling Protocol）</p><p>  PPTP 用于私人网络之间的连接（隧道）。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="TCP/IP" scheme="http://www.jelech.cn/tags/TCP-IP/"/>
    
      <category term="协议" scheme="http://www.jelech.cn/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>HTTP学习笔记</title>
    <link href="http://www.jelech.cn/posts/864/"/>
    <id>http://www.jelech.cn/posts/864/</id>
    <published>2018-12-03T10:09:33.000Z</published>
    <updated>2018-12-03T15:15:28.829Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p><code>HyperText Transfer Protocol</code>基于TCP/IP通讯协议来传输数据</p><h3 id="客户端请求消息"><a href="#客户端请求消息" class="headerlink" title="客户端请求消息"></a>客户端请求消息</h3><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。</p><p><img src="../../assets/images/2012072810301161.png" alt="2012072810301161"></p><p>HTTP 协议中共定义了八种方法或者叫“动作”来表明对 Request-URI 指定的资源的不同操作方式，虽然 HTTP 的请求方式有 8 种，但是我们在实际应用中常用的也就是 <strong>get</strong> 和 <strong>post</strong>，其他请求方式也都可以通过这两种方式间接的来实现，具体介绍如下：</p><ul><li><code>OPTIONS</code>：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。</li><li><code>HEAD</code>：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。</li><li><code>GET</code>：向特定的资源发出请求。</li><li><code>POST</code>：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。</li><li><code>PUT</code>：向指定资源位置上传其最新内容。</li><li><code>DELETE</code>：请求服务器删除 Request-URI 所标识的资源。</li><li><code>TRACE</code>：回显服务器收到的请求，主要用于测试或诊断。</li><li><code>CONNECT</code>：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li></ul><p><img src="assets/get-http.png" alt="get-http"></p><h5 id="客户端请求GET实例"><a href="#客户端请求GET实例" class="headerlink" title="客户端请求GET实例"></a>客户端请求GET实例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /hello.txt HTTP/1.1</span><br><span class="line">User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3</span><br><span class="line">Host: www.example.com</span><br><span class="line">Accept-Language: en, mi</span><br></pre></td></tr></table></figure><h4 id="http响应头信息"><a href="#http响应头信息" class="headerlink" title="http响应头信息"></a>http响应头信息</h4><table><thead><tr><th>应答头</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>服务器支持哪些请求方法（如GET、POST等）。</td></tr><tr><td>Content-Encoding</td><td>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。<code>因此，Servlet应该通过查看Accept-Encoding头</code>（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，<code>为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面</code>。</td></tr><tr><td>Content-Length</td><td>表示内容长度。<code>只有当浏览器使用持久HTTP连接时才需要这个数据</code>。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td>Content-Type</td><td>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但<code>通常需要显式地指定为text/html</code>。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td>Date</td><td>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td>Expires</td><td>应该在什么时候认为文档已经过期，从而不再缓存它？</td></tr><tr><td>Last-Modified</td><td>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td>Location</td><td>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr><tr><td>Refresh</td><td>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<code>http://host/path</code>“)让浏览器读取指定的页面。%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82) 注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=<code>http://host/path</code>“＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。 注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td></tr><tr><td>Server</td><td>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td>Set-Cookie</td><td>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td>WWW-Authenticate</td><td>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。 注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td></tr></tbody></table><h3 id="服务端响应"><a href="#服务端响应" class="headerlink" title="服务端响应"></a>服务端响应</h3><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文</p><p><img src="assets/httpmessage.jpg" alt="httpmessage"></p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 27 Jul 2009 12:28:53 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class="line">ETag: &quot;34aa387-d-1568eb00&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 51</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><h3 id="HTTP状态码列表"><a href="#HTTP状态码列表" class="headerlink" title="HTTP状态码列表"></a>HTTP状态码列表</h3><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th><th></th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td><td></td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td><td></td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td><td></td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td><td></td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td><td></td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td><td></td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td><td></td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td><td></td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td><td></td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td><td></td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td><td></td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td><td></td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td><td></td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td><td></td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td><td></td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td><td></td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td><td></td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td><td></td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td><td></td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td><td></td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td><td></td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td><td></td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td><td></td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td><td></td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td><td></td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td><td></td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td><td></td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td><td></td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td><td></td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td><td></td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td><td></td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td><td></td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td><td></td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td><td></td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td><td></td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td><td></td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="HTTP" scheme="http://www.jelech.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>python进阶学习笔记(好像还是有点基础)</title>
    <link href="http://www.jelech.cn/posts/60692/"/>
    <id>http://www.jelech.cn/posts/60692/</id>
    <published>2018-12-03T02:09:33.000Z</published>
    <updated>2018-12-03T15:17:22.177Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="Python的学习笔记-高级编程"><a href="#Python的学习笔记-高级编程" class="headerlink" title="Python的学习笔记-高级编程"></a>Python的学习笔记-高级编程</h1><p>有关linux-python3的搭建，可以参考我的另一篇博客。</p><blockquote><p>由于现在的python分为了2.7阵营和3+阵营，但是3+优化了许多的细节问题、修改了一些bug。所以这里就以3+的python为主啦</p></blockquote><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>每个文件的开头一般会写<code>#!/usr/bin/python3</code></p><p>安装部分直接跳过，可参考我的另一篇博客</p><h3 id="python语法"><a href="#python语法" class="headerlink" title="python语法"></a>python语法</h3><p>这部分也跳过，基础部分。</p><p>但是值得一提的是，语言真的是想通的。c++可通过适当 的修改，变为python：</p><ul><li><p>去掉c++中的所有大括号</p></li><li><p>去掉c++中变量声明时的类型符号(int,float,double…)</p></li><li><p>换行和缩进必须为标准</p></li><li><p>每个判断类型的关键字(如if、else、while、for、函数…)当行的后面都需要加冒号</p><p>  这时候基本上已经很接近python语法了</p><p>  可以一行进行多条语句，语句间用<code>;</code>号分割</p></li></ul><h3 id="数据类型（不需要特殊声明）"><a href="#数据类型（不需要特殊声明）" class="headerlink" title="数据类型（不需要特殊声明）"></a>数据类型（不需要特殊声明）</h3><ul><li><p>Number（数字）</p></li><li><p>String（字符串）</p></li><li><p>List（列表）</p></li><li><p>Tuple（元组）</p></li><li><p>Set（集合）</p></li><li><p>Dictionary（字典）</p><p>  其中：</p></li><li><p><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</p></li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>您也可以使用del语句删除一些对象引用。<code>del var1[,var2[,var3[....,varN]]]</code></p><h4 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h4><p><code>string * num</code>表示复制string字符串num次</p><p>Python 使用反斜杠()转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串<code>&gt;&gt;&gt; print(r&#39;Ru\noob&#39;)</code></p><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如<code>word[0] = &#39;m&#39;</code>会导致错误。</p><h3 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h3><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。其实，可以把字符串看作一种特殊的元组。</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line">print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line">print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line">print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><h3 id="Dictionary（字典）-对应c-中的map"><a href="#Dictionary（字典）-对应c-中的map" class="headerlink" title="Dictionary（字典）(对应c++中的map)"></a>Dictionary（字典）(对应c++中的map)</h3><p>字典是一种映射类型，字典用”{ }”标识，它是一个<strong>无序</strong>的<strong>键(key) : 值(value)</strong>对集合。</p><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将x转换为一个整数,进制</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table><p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p><h3 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h3><table><thead><tr><th>函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>choice(seq)</td><td style="text-align:left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td>randrange ([start,] stop [,step])</td><td style="text-align:left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1</td></tr><tr><td>random()</td><td style="text-align:left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td>seed([x])</td><td style="text-align:left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td>shuffle(lst)</td><td style="text-align:left">将序列的所有元素随机排序</td></tr><tr><td>uniform(x, y)</td><td style="text-align:left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://www.jelech.cn/tags/python/"/>
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>c++进阶学习笔记(好像就是基础)</title>
    <link href="http://www.jelech.cn/posts/26201/"/>
    <id>http://www.jelech.cn/posts/26201/</id>
    <published>2018-12-02T10:09:33.000Z</published>
    <updated>2018-12-03T15:10:58.110Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="cpp进阶学习"><a href="#cpp进阶学习" class="headerlink" title="cpp进阶学习"></a>cpp进阶学习</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="基类和派生类"><a href="#基类和派生类" class="headerlink" title="基类和派生类"></a>基类和派生类</h3><p>一个类可以派生自多个类，这意味着，它可以从多个基类继承数据和函数。定义一个派生类，我们使用一个类派生列表来指定基类。类派生列表以一个或多个基类命名，形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">derived</span>-<span class="title">class</span>:</span> access-specifier base-<span class="class"><span class="keyword">class</span></span></span><br></pre></td></tr></table></figure><p>其中，访问修饰符 access-specifier 是 <strong>public、protected</strong> 或 <strong>private</strong> 其中的一个，base-class 是之前定义过的某个类的名称。如果未使用访问修饰符 access-specifier，则默认为 private。</p><h3 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h3><p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p><p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p><ul><li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li><li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li><li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li></ul><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p><p>C++ 类可以从多个类继承成员，语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> &lt;派生类名&gt;:</span>&lt;继承方式<span class="number">1</span>&gt;&lt;基类名<span class="number">1</span>&gt;,&lt;继承方式<span class="number">2</span>&gt;&lt;基类名<span class="number">2</span>&gt;,…</span><br><span class="line">&#123;</span><br><span class="line">&lt;派生类类体&gt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="多继承-环状继承时"><a href="#多继承-环状继承时" class="headerlink" title="多继承(环状继承时)"></a>多继承(环状继承时)</h4><p>A-&gt;D, B-&gt;D, C-&gt;(A，B)，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class D&#123;......&#125;;</span><br><span class="line">class B: public D&#123;......&#125;;</span><br><span class="line">class A: public D&#123;......&#125;;</span><br><span class="line">class C: public B, public A&#123;.....&#125;;</span><br></pre></td></tr></table></figure><p>这个继承会使D创建两个对象,要解决上面问题就要用<code>虚拟继承格式</code></p><p>格式：class 类名: virtual 继承方式 父类名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class D&#123;......&#125;;</span><br><span class="line">class B: virtual public D&#123;......&#125;;</span><br><span class="line">class A: virtual public D&#123;......&#125;;</span><br><span class="line">class C: public B, public A&#123;.....&#125;;</span><br></pre></td></tr></table></figure><p>虚继承–（在创建对象的时候会创建一个虚表）在创建父类对象的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A:virtual public D</span><br><span class="line">B:virtual public D</span><br></pre></td></tr></table></figure><h2 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h2><h3 id="可重载运算符-不可重载运算符"><a href="#可重载运算符-不可重载运算符" class="headerlink" title="可重载运算符/不可重载运算符"></a>可重载运算符/不可重载运算符</h3><p>下面是可重载的运算符列表：</p><table><thead><tr><th>双目算术运算符</th><th>+ (加)，-(减)，*(乘)，/(除)，% (取模)</th></tr></thead><tbody><tr><td>关系运算符</td><td>==(等于)，!= (不等于)，&lt; (小于)，&gt; (大于&gt;，&lt;=(小于等于)，&gt;=(大于等于)</td></tr><tr><td>逻辑运算符</td><td>\</td><td>\</td><td>(逻辑或)，&amp;&amp;(逻辑与)，!(逻辑非)</td></tr><tr><td>单目运算符</td><td>+ (正)，-(负)，*(指针)，&amp;(取地址)</td></tr><tr><td>自增自减运算符</td><td>++(自增)，–(自减)</td></tr><tr><td>位运算符</td><td>\</td><td>(按位或)，&amp; (按位与)，~(按位取反)，^(按位异或),，&lt;&lt; (左移)，&gt;&gt;(右移)</td></tr><tr><td>赋值运算符</td><td>=, +=, -=, *=, /= , % = , &amp;=, \</td><td>=, ^=, &lt;&lt;=, &gt;&gt;=</td></tr><tr><td>空间申请与释放</td><td>new, delete, new[ ] , delete[]</td></tr><tr><td>其他运算符</td><td>()(函数调用)，-&gt;(成员访问)，,(逗号)，<a href="下标"></a></td></tr></tbody></table><p>下面是不可重载的运算符列表：</p><ul><li><code>.</code>：成员访问运算符</li><li><code>., -&gt;</code>：成员指针访问运算符</li><li><code>::</code>：域运算符</li><li><code>sizeof</code>：长度运算符</li><li><code>?:</code>：条件运算符</li><li><code>#</code>： 预处理符号</li></ul><h4 id="类成员访问运算符"><a href="#类成员访问运算符" class="headerlink" title="类成员访问运算符"></a>类成员访问运算符</h4><p>类成员访问运算符（ -&gt; ）可以被重载，但它较为麻烦。它被定义用于为一个类赋予”指针”行为。运算符 -&gt; 必须是一个成员函数。如果使用了 -&gt; 运算符，返回类型必须是指针或者是类的对象。</p><p>运算符 -&gt; 通常与指针引用运算符 * 结合使用，用于实现”智能指针”的功能。这些指针是行为与正常指针相似的对象，唯一不同的是，当您通过指针访问对象时，它们会执行其他的任务。比如，当指针销毁时，或者当指针指向另一个对象时，会自动删除对象。</p><p>间接引用运算符 -&gt; 可被定义为一个一元后缀运算符。也就是说，给出一个类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Ptr&#123;</span><br><span class="line">   //...</span><br><span class="line">   X * operator-&gt;();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类 <strong>Ptr</strong> 的对象可用于访问类 <strong>X</strong> 的成员，使用方式与指针的用法十分相似。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void f(Ptr p )</span><br><span class="line">&#123;</span><br><span class="line">   p-&gt;m = 10 ; // (p.operator-&gt;())-&gt;m = 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句 p-&gt;m 被解释为 (p.operator-&gt;())-&gt;m。</p><h3 id="值得注意的是"><a href="#值得注意的是" class="headerlink" title="值得注意的是:"></a>值得注意的是:</h3><ul><li>1、运算重载符不可以改变语法结构。</li><li>2、运算重载符不可以改变操作数的个数。</li><li>3、运算重载符不可以改变优先级。</li><li>4、运算重载符不可以改变结合性。</li></ul><h3 id="静态多态"><a href="#静态多态" class="headerlink" title="静态多态"></a>静态多态</h3><p>或<strong>静态链接</strong> - 函数调用在程序执行前就准备好了。有时候这也被称为<strong>早绑定</strong>，因为 area() 函数在程序编译期间就已经设置好了。</p><p>但现在，让我们对程序稍作修改，在 Shape 类中，area() 的声明前放置关键字 <strong>virtual</strong>。此时，编译器看的是指针的内容，而不是它的类型。因此，由于 tri 和 rec 类的对象的地址存储在 <em>shape</em> 中，所以会调用各自的 area() 函数。</p><p>正如您所看到的，每个子类都有一个函数 area() 的独立实现。这就是<strong>多态</strong>的一般使用方式。有了多态，您可以有多个不同的类，都带有同一个名称但具有不同实现的函数，函数的参数甚至可以是相同的。</p><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p><strong>虚函数</strong> 是在基类中使用关键字 <strong>virtual</strong> 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。</p><p>我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为<strong>动态链接</strong>，或<strong>后期绑定</strong>。</p><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>您可能想要在基类中定义虚函数，以便在派生类中重新定义该函数更好地适用于对象，但是您在基类中又<strong>不能对虚函数给出有意义的实现</strong>，这个时候就会用到纯虚函数。</p><p>我们可以把基类中的虚函数 area() 改写如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:       </span><br><span class="line"><span class="keyword">int</span> width, height;</span><br><span class="line"><span class="keyword">public</span>:       </span><br><span class="line">Shape( <span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>) &#123;</span><br><span class="line">width = a;</span><br><span class="line">height = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pure virtual function</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">()</span> </span>= <span class="number">0</span>; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数据抽象"><a href="#数据抽象" class="headerlink" title="数据抽象"></a>数据抽象</h2><p>数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。</p><p>例如，您的程序可以调用 <strong>sort()</strong> 函数，而不需要知道函数中排序数据所用到的算法。实际上，函数排序的底层实现会因库的版本不同而有所差异，只要接口不变，函数调用就可以照常工作。</p><h3 id="访问标签强制抽象"><a href="#访问标签强制抽象" class="headerlink" title="访问标签强制抽象"></a>访问标签强制抽象</h3><p>在 C++ 中，我们使用访问标签来定义类的抽象接口。一个类可以包含零个或多个访问标签：</p><ul><li>使用公共标签定义的成员都可以访问该程序的所有部分。一个类型的数据抽象视图是由它的公共成员来定义的。</li><li>使用私有标签定义的成员无法访问到使用类的代码。私有部分对使用类型的代码隐藏了实现细节。</li></ul><p>访问标签出现的频率没有限制。每个访问标签指定了紧随其后的成员定义的访问级别。指定的访问级别会一直有效，直到遇到下一个访问标签或者遇到类主体的关闭右括号为止。</p><blockquote><ul><li>类的内部受到保护，不会因无意的用户级错误导致对象状态受损。</li><li>类实现可能随着时间的推移而发生变化，以便应对不断变化的需求，或者应对那些要求不改变用户级代码的错误报告。</li></ul></blockquote><h3 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h3><ul><li><strong>程序语句（代码）：</strong>这是程序中执行动作的部分，它们被称为函数。</li><li><strong>程序数据：</strong>数据是程序的信息，会受到程序函数的影响。</li></ul><p><strong>数据封装</strong>是一种把数据和操作数据的函数捆绑在一起的机制，<strong>数据抽象</strong>是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制。</p><h3 id="接口（抽象类）"><a href="#接口（抽象类）" class="headerlink" title="接口（抽象类）"></a>接口（抽象类）</h3><p>如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。</p><p>抽象类不能被用于实例化对象，它只能作为<strong>接口</strong>使用。如果试图实例化一个抽象类的对象，会导致编译错误。因此，如果一个 ABC 的子类需要被实例化，则必须实现每个虚函数。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>C++ 异常是指在程序<code>运行时</code>发生的特殊情况，比如尝试除以零的操作。</p><ul><li><p><strong>throw:</strong> 当问题出现时，程序会抛出一个异常。这是通过使用 <strong>throw</strong> 关键字来完成的。可以使用 <strong>throw</strong> 语句在代码块中的任何地方抛出异常</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( b == <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"Division by zero condition!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>catch:</strong> 在您想要处理问题的地方，通过异常处理程序捕获异常。<strong>catch</strong> 关键字用于捕获异常。</p></li><li><p><strong>try:</strong> <strong>try</strong> 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。下面的代码会捕获一个类型为 <code>ExceptionName</code> 的异常。如果您想让 catch 块能够处理 try 块抛出的任何类型的异常，则必须在异常声明的括号内使用省略号 <code>...</code></p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 保护代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>( ExceptionName e )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 处理 ExceptionName 异常的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>C++ 提供了一系列标准的异常，定义在 <code>&lt;exception&gt;</code>中。</p><p><img src="assets/exceptions_in_cpp-1543739044716.png" alt="C++ 异常的层次结构"></p><h3 id="异常表"><a href="#异常表" class="headerlink" title="异常表"></a>异常表</h3><table><thead><tr><th>异常</th><th>描述</th></tr></thead><tbody><tr><td><strong>std::exception</strong></td><td>该异常是所有标准 C++ 异常的父类。</td></tr><tr><td>std::bad_alloc</td><td>该异常可以通过 <strong>new</strong> 抛出。</td></tr><tr><td>std::bad_cast</td><td>该异常可以通过 <strong>dynamic_cast</strong> 抛出。</td></tr><tr><td>std::bad_exception</td><td>这在处理 C++ 程序中无法预期的异常时非常有用。</td></tr><tr><td>std::bad_typeid</td><td>该异常可以通过 <strong>typeid</strong> 抛出。</td></tr><tr><td><strong>std::logic_error</strong></td><td>理论上可以通过读取代码来检测到的异常。</td></tr><tr><td>std::domain_error</td><td>当使用了一个无效的数学域时，会抛出该异常。</td></tr><tr><td>std::invalid_argument</td><td>当使用了无效的参数时，会抛出该异常。</td></tr><tr><td>std::length_error</td><td>当创建了太长的 std::string 时，会抛出该异常。</td></tr><tr><td>std::out_of_range</td><td>该异常可以通过方法抛出，例如 std::vector 和 std::bitset&lt;&gt;::operator<a href=""></a>。</td></tr><tr><td><strong>std::runtime_error</strong></td><td>理论上不可以通过读取代码来检测到的异常。</td></tr><tr><td>std::overflow_error</td><td>当发生数学上溢时，会抛出该异常。</td></tr><tr><td>std::range_error</td><td>当尝试存储超出范围的值时，会抛出该异常。</td></tr><tr><td>std::underflow_error</td><td>当发生数学下溢时，会抛出该异常。</td></tr></tbody></table><h3 id="C-动态内存"><a href="#C-动态内存" class="headerlink" title="C++ 动态内存"></a>C++ 动态内存</h3><ul><li><strong>栈：</strong>在函数内部声明的所有变量都将占用栈内存。</li><li><strong>堆：</strong>这是程序中未使用的内存，在程序运行时可用于动态分配内存。</li></ul><p>在 C++ 中，您可以使用特殊的运算符为给定类型的变量在运行时分配<code>堆</code>内的内存，这会返回所分配的空间地址。这种运算符即 <strong>new</strong> 运算符。</p><p>如果您不再需要动态分配的内存空间，可以使用 <strong>delete</strong> 运算符，删除之前由 new 运算符分配的内存。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">type</span>&gt; <span class="title">ret</span>-<span class="title">type</span> <span class="title">func</span>-<span class="title">name</span>(<span class="title">parameter</span> <span class="title">list</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="comment">// 函数的主体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// eg.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="keyword">const</span>&amp; <span class="title">Max</span> <span class="params">(T <span class="keyword">const</span>&amp; a, T <span class="keyword">const</span>&amp; b)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? b:a; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><p>正如我们定义函数模板一样，我们也可以定义类模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">type</span>&gt; <span class="title">class</span> <span class="title">class</span>-<span class="title">name</span> &#123;</span></span><br><span class="line"><span class="comment">// class thing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h2><p><code>#define</code> 预处理指令用于创建符号常量。该符号常量通常称为<strong>宏</strong>.</p><p>条件编译 <code>#ifndef</code> <code>#define</code> <code>#endif</code>。可以使用 #if 0 语句注释掉程序的一部分</p><p><code>#</code> 运算符会把 replacement-text 令牌转换为用引号引起来的字符串。</p><p><code>##</code> 运算符用于连接两个令牌。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MKSTR( x ) #x</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; MKSTR(HELLO C++) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//out-&gt; HELLO C++</span></span><br></pre></td></tr></table></figure><p>其他特殊编译符号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __LINE__ : "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __FILE__ : "</span> &lt;&lt; __FILE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __DATE__ : "</span> &lt;&lt; __DATE__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of __TIME__ : "</span> &lt;&lt; __TIME__ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Value of __LINE__ : 6</span></span><br><span class="line"><span class="comment">Value of __FILE__ : test.cpp</span></span><br><span class="line"><span class="comment">Value of __DATE__ : Feb 28 2011</span></span><br><span class="line"><span class="comment">Value of __TIME__ : 18:52:48</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>一般情况下，两种类型的多任务处理：<strong>基于进程和基于线程</strong>。</p><ul><li>基于进程的多任务处理是程序的并发执行。</li><li>基于线程的多任务处理是同一程序的片段的并发执行。</li></ul><p>假设在<code>linux</code>系统下</p><h3 id="创建一个-POSIX-线程："><a href="#创建一个-POSIX-线程：" class="headerlink" title="创建一个 POSIX 线程："></a>创建一个 POSIX 线程：</h3><p><code>#include &lt;pthread.h&gt;</code></p><p><code>pthread_create (thread, attr, start_routine, arg)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>thread</td><td>指向线程标识符指针。</td></tr><tr><td>attr</td><td>一个不透明的属性对象，可以被用来设置线程属性。您可以指定线程属性对象，也可以使用默认值 NULL。</td></tr><tr><td>start_routine</td><td>线程运行函数起始地址，一旦线程被创建就会执行。</td></tr><tr><td>arg</td><td>运行函数的参数。它必须通过把引用作为指针强制转换为 void 类型进行传递。如果没有传递参数，则使用 NULL。</td></tr></tbody></table><p>终止：<code>pthread_exit (status)</code></p><h3 id="连接和分离线程"><a href="#连接和分离线程" class="headerlink" title="连接和分离线程"></a>连接和分离线程</h3><p>我们可以使用以下两个函数来连接或分离线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pthread_join (threadid, status) </span><br><span class="line">pthread_detach (threadid)</span><br></pre></td></tr></table></figure><p><code>pthread_join()</code> 子程序阻碍调用程序，直到指定的<strong>threadid</strong>线程终止为止。当创建一个线程时，它的某个属性会定义它是否是可连接的（joinable）或可分离的（detached）。只有创建时定义为可连接的线程才可以被连接。如果线程创建时被定义为可分离的，则它永远也不能被连接。</p><h2 id="什么是-CGI？"><a href="#什么是-CGI？" class="headerlink" title="什么是 CGI？"></a>什么是 CGI？</h2><ul><li>公共网关接口（CGI），是一套标准，定义了信息是如何在 Web 服务器和客户端脚本之间进行交换的。</li><li>CGI 规范目前是由 NCSA 维护的，NCSA 定义 CGI 如下：</li><li>公共网关接口（CGI），是一种用于外部网关程序与信息服务器（如 HTTP 服务器）对接的接口标准。</li><li>目前的版本是 CGI/1.1，CGI/1.2 版本正在推进中。</li></ul><p>比如我们点击一个超链接，浏览一个特定的网页或 URL时</p><ul><li>您的浏览器联系上 HTTP Web 服务器，并请求 URL，即文件名。</li><li>Web 服务器将解析 URL，并查找文件名。如果找到请求的文件，Web 服务器会把文件发送回浏览器，否则发送一条错误消息，表明您请求了一个错误的文件。</li><li>Web 浏览器从 Web 服务器获取响应，并根据接收到的响应来显示文件或错误消息。</li></ul><p>以这种方式搭建起来的 HTTP 服务器，不管何时请求目录中的某个文件，HTTP 服务器发送回来的不是该文件，而是以程序形式执行，并把执行产生的输出发送回浏览器显示出来。(比如php的响应<code>echo</code>)</p><h3 id="HTTP-头信息"><a href="#HTTP-头信息" class="headerlink" title="HTTP 头信息"></a>HTTP 头信息</h3><table><thead><tr><th>头信息</th><th>描述</th></tr></thead><tbody><tr><td>Content-type:</td><td>MIME 字符串，定义返回的文件格式。例如 Content-type:text/html。</td></tr><tr><td>Expires: Date</td><td>信息变成无效的日期。浏览器使用它来判断一个页面何时需要刷新。一个有效的日期字符串的格式应为 01 Jan 1998 12:00:00 GMT。</td></tr><tr><td>Location: URL</td><td>这个 URL 是指应该返回的 URL，而不是请求的 URL。你可以使用它来重定向一个请求到任意的文件。</td></tr><tr><td>Last-modified: Date</td><td>资源的最后修改日期。</td></tr><tr><td>Content-length: N</td><td>要返回的数据的长度，以字节为单位。浏览器使用这个值来表示一个文件的预计下载时间。</td></tr><tr><td>Set-Cookie: String</td><td>通过 <em>string</em> 设置 cookie。</td></tr></tbody></table><h3 id="CGI-环境变量"><a href="#CGI-环境变量" class="headerlink" title="CGI 环境变量"></a>CGI 环境变量</h3><table><thead><tr><th>变量名</th><th>描述</th></tr></thead><tbody><tr><td>CONTENT_TYPE</td><td>内容的数据类型。当客户端向服务器发送附加内容时使用。例如，文件上传等功能。</td></tr><tr><td>CONTENT_LENGTH</td><td>查询的信息长度。只对 POST 请求可用。</td></tr><tr><td>HTTP_COOKIE</td><td>以键 &amp; 值对的形式返回设置的 cookies。</td></tr><tr><td>HTTP_USER_AGENT</td><td>用户代理请求标头字段，递交用户发起请求的有关信息，包含了浏览器的名称、版本和其他平台性的附加信息。</td></tr><tr><td>PATH_INFO</td><td>CGI 脚本的路径。</td></tr><tr><td>QUERY_STRING</td><td>通过 GET 方法发送请求时的 URL 编码信息，包含 URL 中问号后面的参数。</td></tr><tr><td>REMOTE_ADDR</td><td>发出请求的远程主机的 IP 地址。这在日志记录和认证时是非常有用的。</td></tr><tr><td>REMOTE_HOST</td><td>发出请求的主机的完全限定名称。如果此信息不可用，则可以用 REMOTE_ADDR 来获取 IP 地址。</td></tr><tr><td>REQUEST_METHOD</td><td>用于发出请求的方法。最常见的方法是 GET 和 POST。</td></tr><tr><td>SCRIPT_FILENAME</td><td>CGI 脚本的完整路径。</td></tr><tr><td>SCRIPT_NAME</td><td>CGI 脚本的名称。</td></tr><tr><td>SERVER_NAME</td><td>服务器的主机名或 IP 地址。</td></tr><tr><td>SERVER_SOFTWARE</td><td>服务器上运行的软件的名称和版本。</td></tr></tbody></table><h3 id="GET-POST"><a href="#GET-POST" class="headerlink" title="GET/POST"></a>GET/POST</h3><p>GET 方法发送已编码的用户信息追加到页面请求中。页面和已编码信息通过 ? 字符分隔开，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.test.com/cgi-bin/cpp.cgi?key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure><p>GET 方法有大小限制，在一个请求字符串中最多可以传 1024 个字符。敏感信息不要使用 GET 方法。</p><h3 id="在-CGI-中使用-Cookies"><a href="#在-CGI-中使用-Cookies" class="headerlink" title="在 CGI 中使用 Cookies"></a>在 CGI 中使用 Cookies</h3><p>使用 cookies 是记忆和跟踪有关用户喜好、购买、佣金以及其他为追求更好的游客体验或网站统计所需信息的最有效的方法。</p><h4 id="它是如何工作的"><a href="#它是如何工作的" class="headerlink" title="它是如何工作的"></a>它是如何工作的</h4><p>服务器以 cookie 的形式向访客的浏览器发送一些数据。如果浏览器接受了 cookie，则 cookie 会以纯文本记录的形式存储在访客的硬盘上。现在，当访客访问网站上的另一个页面时，会检索 cookie。一旦找到 cookie，服务器就知道存储了什么。</p><ul><li><strong>Expires :</strong> cookie 的过期日期。如果此字段留空，cookie 会在访客退出浏览器时过期。</li><li><strong>Domain :</strong> 网站的域名。</li><li><strong>Path :</strong> 设置 cookie 的目录或网页的路径。如果您想从任意的目录或网页检索 cookie，此字段可以留空。</li><li><strong>Secure :</strong> 如果此字段包含单词 “secure”，那么 cookie 只能通过安全服务器进行检索。如果此字段留空，则不存在该限制。</li><li><strong>Name=Value :</strong> cookie 以键值对的形式被设置和获取。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="c++" scheme="http://www.jelech.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>static的那些事</title>
    <link href="http://www.jelech.cn/posts/52795/"/>
    <id>http://www.jelech.cn/posts/52795/</id>
    <published>2018-12-02T10:09:33.000Z</published>
    <updated>2018-12-05T14:41:12.116Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h3 id="1-先来介绍它的第一条也是最重要的一条：隐藏。（static函数，static变量均可）"><a href="#1-先来介绍它的第一条也是最重要的一条：隐藏。（static函数，static变量均可）" class="headerlink" title="1.先来介绍它的第一条也是最重要的一条：隐藏。（static函数，static变量均可）"></a>1.先来介绍它的<strong>第一条也是最重要的一条：隐藏</strong>。（static函数，static变量均可）</h3><p>当同时编译多个文件时，所有未加static前缀的全局变量和函数都具有全局可见性。<br>举例来说明。同时编译两个源文件，一个是a.c，另一个是main.c。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//a.c</span><br><span class="line">char a = &apos;A&apos;; // global variable</span><br><span class="line">void msg()</span><br><span class="line">&#123;</span><br><span class="line">     printf(&quot;Hello\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//main.c</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">     extern char a; // extern variable must be declared before use</span><br><span class="line">     printf(&quot;%c &quot;, a);</span><br><span class="line">     (void)msg();</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果是：</p><p>A Hello</p><p>为什么在a.c中定义的全局变量a和函数msg能在main.c中使用？前面说过，所有未加static前缀的全局变量和函数都具有全局可见性，其它的源文件也能访问。此例中，a是全局变量，msg是函数，并且都没有加static前缀，因此对于另外的源文件main.c是可见的。<br>如果加了static，就会对其它源文件隐藏。例如在a和msg的定义前加上static，main.c就看不到它们了。利用这一特性可以在不同的文件中定义同名函数和同名变量，而不必担心命名冲突。static可以用作函数和变量的前缀，对于函数来讲，static的作用仅限于隐藏.</p><h3 id="2-static的第二个作用是保持变量内容的持久。（static变量中的记忆功能和全局生存期）"><a href="#2-static的第二个作用是保持变量内容的持久。（static变量中的记忆功能和全局生存期）" class="headerlink" title="2.static的第二个作用是保持变量内容的持久。（static变量中的记忆功能和全局生存期）"></a><strong>2.static的第二个作用是保持变量内容的持久</strong>。（static变量中的记忆功能和全局生存期）</h3><p>存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。共有两种变量存储在静态存储区：全局变量和static变量，只不过和全局变量比起来，static可以控制变量的可见范围，说到底static还是用来隐藏的。虽然这种用法不常见</p><p>PS：如果作为static局部变量在函数内定义，它的生存期为整个源程序，但是其作用域仍与自动变量相同，只能在定义该变量的函数内使用该变量。退出该函数后， 尽管该变量还继续存在，但不能使用它。</p><p>程序举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">＃include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int fun()&#123;</span><br><span class="line">    static int count = 10; //在第一次进入这个函数的时候，变量a被初始化为10！并接着自减1，以后每次进入该函数，a</span><br><span class="line">    return count--; //就不会被再次初始化了，仅进行自减1的操作；在static发明前，要达到同样的功能，则只能使用全局变量：    </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int count = 1;</span><br><span class="line"> </span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">     printf(&quot;global\t\tlocal static\n&quot;);</span><br><span class="line">     for(; count &lt;= 10; ++count)</span><br><span class="line">               printf(&quot;%d\t\t%d\n&quot;, count, fun());</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果是：</p><p>global  local static<br>1 10<br>2 9<br>3 8<br>4 7<br>5 6<br>6 5<br>7 4<br>8 3<br>9 2<br>10 1</p><p>基于以上两点可以得出一个结论：<code>把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量后是改变了它的作用域， 限制了它的使用范围。因此static 这个说明符在不同的地方所起的作用是不同的。</code></p><h3 id="3-static的第三个作用是默认初始化为0（static变量）"><a href="#3-static的第三个作用是默认初始化为0（static变量）" class="headerlink" title="3.static的第三个作用是默认初始化为0（static变量）"></a><strong>3.static的第三个作用是默认初始化为0（static变量）</strong></h3><p>其实全局变量也具备这一属性，因为全局变量也存储在静态数据区。在静态数据区，内存中所有的字节默认值都是0x00，某些时候这一特点可以减少程序员的工作量。比如初始化一个稀疏矩阵，我们可以一个一个地把所有元素都置0，然后把不是0的几个元素赋值。如果定义成静态的，就省去了一开始置0的操作。再比如要把一个字符数组当字符串来用，但又觉得每次在字符数组末尾加‘\0’;太麻烦。如果把字符串定义成静态的，就省去了这个麻烦，因为那里本来就是‘\0’;不妨做个小实验验证一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">＃include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int a;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">     int i;</span><br><span class="line">     static char str[10];</span><br><span class="line">     printf(&quot;integer: %d; string: (begin)%s(end)&quot;, a, str);</span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果是：</p><p>integer: 0; string: (begin) (end) </p><p>最后对static的三条作用做一句话总结。首先static的最主要功能是隐藏，其次因为static变量存放在静态存储区，所以它具备持久性和默认值0. </p><h3 id="4-static的第四个作用：C-中的类成员声明static（有些地方与以上作用重叠）"><a href="#4-static的第四个作用：C-中的类成员声明static（有些地方与以上作用重叠）" class="headerlink" title="4.static的第四个作用：C++中的类成员声明static（有些地方与以上作用重叠）"></a><strong>4.static的第四个作用：C++中的类成员声明static</strong>（有些地方与以上作用重叠）</h3><p> 在类中声明static变量或者函数时，初始化时使用作用域运算符来标明它所属类，因此，静态数据成员是类的成员，而不是对象的成员，这样就出现以下作用：</p><p>(1)类的静态成员函数是属于整个类而非类的对象，所以它没有this指针，这就导致 了它仅能访问类的静态数据和静态成员函数。      </p><p>(2)不能将静态成员函数定义为虚函数。      </p><p>(3)由于静态成员声明于类中，操作于其外，所以对其取地址操作，就多少有些特殊 ，变量地址是指向其数据类型的指针 ，函数地址类型是一个“nonmember函数指针”。</p><p>(4)由于静态成员函数没有this指针，所以就差不多等同于nonmember函数，结果就 产生了一个意想不到的好处：成为一个callback函数，使得我们得以将C++和C-based X W indow系统结合，同时也成功的应用于线程函数身上。 （这条没遇见过）  </p><p>(5)static并没有增加程序的时空开销，相反她还缩短了子类对父类静态成员的访问 时间，节省了子类的内存空间。      </p><p>(6)静态数据成员在&lt;定义或说明&gt;时前面加关键字static。      </p><p>(7)静态数据成员是静态存储的，所以必须对它进行初始化。 （程序员手动初始化，否则编译时一般不会报错，但是在Link时会报错误） </p><p>(8)静态成员初始化与一般数据成员初始化不同:</p><p>初始化在类体外进行，而前面不加static，以免与一般静态变量或对象相混淆；<br>初始化时不加该成员的访问权限控制符private，public等；<br>初始化时使用作用域运算符来标明它所属类；<br>​           所以我们得出静态数据成员初始化的格式：<br>&lt;数据类型&gt;&lt;类名&gt;::&lt;静态数据成员名&gt;=&lt;值&gt;</p><p>(9)为了防止父类的影响，可以在子类定义一个与父类相同的静态变量，以屏蔽父类的影响。这里有一点需要注意：我们说静态成员为父类和子类共享，但我们有重复定义了静态成员，这会不会引起错误呢？不会，我们的编译器采用了一种绝妙的手法：name-mangling 用以生成唯一的标志。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="c++" scheme="http://www.jelech.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记</title>
    <link href="http://www.jelech.cn/posts/51482/"/>
    <id>http://www.jelech.cn/posts/51482/</id>
    <published>2018-11-30T02:09:33.000Z</published>
    <updated>2018-12-02T01:39:36.170Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h1 id="mysql设计"><a href="#mysql设计" class="headerlink" title="mysql设计"></a>mysql设计</h1><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>键：一个识别每一个特定用户的字段。</li><li>外键：一个表引用了其他表中的主键，那么这个字段就是外键。</li><li>模式：数据库整套表格的完整设计蓝图。</li><li>关系：两个表格数据之间的关系，可以通过外键表达。</li></ul><h2 id="设计时需要注意"><a href="#设计时需要注意" class="headerlink" title="设计时需要注意"></a>设计时需要注意</h2><ul><li>每个对象应该有自己的表。</li><li>避免保存冗余的数据，比如相同的数据保存在了多个表当中（当然外键不算）。</li><li>考虑耦合性，减少空属性的出现。如果出现了，尝试拆成多个表。</li><li>使用原子列值，每一行的每个属性只储存一个数据。</li><li>键要选择的有意义。</li><li>考虑需要询问数据库时的问题，比如多值、多层查询时。</li><li>注意表格的大体分类：描述世界的简单表、描述关系的关联表。</li></ul><h1 id="mysql数据库的创建"><a href="#mysql数据库的创建" class="headerlink" title="mysql数据库的创建"></a>mysql数据库的创建</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#----临时笔记处----#</span><br><span class="line">#修改密码，注意mysql5.7中user表中密码改为了authentication_string</span><br><span class="line">    update mysql.user set authentication_string1=password(&apos;123456&apos;) where User=&quot;jelech&quot; and Host=&quot;localhost&quot;;</span><br><span class="line"></span><br><span class="line">    # 密码进入数据库，创建新数据库，授权新用户，刷新改动，设置根密码(初始使用一次就行)</span><br><span class="line">    mysql -u root -p</span><br><span class="line">  create database blog_db charset=utf8;</span><br><span class="line">    grant all on db_music.* to jelech@localhost identified by &quot;123456&quot;;</span><br><span class="line">    flush privileges;</span><br><span class="line">    set password for root@localhost=password(&quot;abccba&quot;);</span><br><span class="line"></span><br><span class="line">    # 修改表格格式信息</span><br><span class="line">    ALTER TABLE userInfo MODIFY password VARCHAR(100) NOT NULL;</span><br><span class="line"></span><br><span class="line">    # 删除表中所有内容，以及索引 用这种方法相当于重载了表格内容，全新的！</span><br><span class="line">    truncate table wp_comments;</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><code>msyql -h hostname -u username -p</code></p><p>eg.<code>msyql -u root -p</code></p><ul><li>-h 指定希望连接的主机，默认为localhost</li><li>-u 指定用户名称，默认为登录操作系统的用户名</li><li>-p 使用一个密码来连接他</li></ul><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p><code>create database dbname;</code></p><p>eg.<code>create database db_music;</code></p><h2 id="mysql权限问题"><a href="#mysql权限问题" class="headerlink" title="mysql权限问题"></a>mysql权限问题</h2><ul><li>最少权限原则，一个用户不应该拥有超过他的功能的多余权限。</li><li><code>grant</code> <code>revoke</code> 授予和收回权限</li></ul><h2 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grant privileges # 用逗号分开的权限：all, select, create...</span><br><span class="line">on item_name # 可控制的部分:*.*, item_name.*, item_name.th_table</span><br><span class="line">to user_name # 授予一个用户：可附加通过密码 identified by &apos;password&apos;</span><br><span class="line">[require ssl_options] # 决定用户连接时，是否应该通过加密套接字连接</span><br><span class="line">[with grant potion] # 决定用户是否可以授权给别自己拥有的权限。</span><br></pre></td></tr></table></figure><h3 id="with语句也可以"><a href="#with语句也可以" class="headerlink" title="with语句也可以"></a>with语句也可以</h3><p>决定这个用户每小时可以访问的数量</p><p><code>MAX_QUERIES_PER_HOUR n</code> <code>MAX_UPDATES_PER_HOUR n</code> <code>MAX_CONNECTIONS_PER_HOUR n</code></p><p>这个在共享系统上限制单个用户的负载非常有用。</p><blockquote><p>mysql中分为3个基本权限：适用一般用户权限、适用赋予管理员权限、几个特定权限。<br>mysql中存放了所有用户名、密码的地方，这里的访问权限不应随意授予。</p></blockquote><h3 id="用户的权限"><a href="#用户的权限" class="headerlink" title="用户的权限"></a>用户的权限</h3><ul><li>select：从表中选择行</li><li>insert：插入新行</li><li>udpate：修改表行中值</li><li>delete：删除表中的行</li><li>index：创建和拖动特定表的索引</li><li>alter：修改表的结构，比如添加列、重名列|表、修改列的数据类型…</li><li>create：新建数据库|表，如果grant授予的特定的数据库，则他们只能创建该数据库|表，也就是他们需要先删除</li><li>drop：删除数据库和表</li></ul><h3 id="管理员的权限"><a href="#管理员的权限" class="headerlink" title="管理员的权限"></a>管理员的权限</h3><ul><li>create temporary tables：允许使用temporary关键字</li><li>file：允许将数据从文件中读入表、输出到文件</li><li>lock table：允许使用lock table语句</li><li>process：允许管理员查看属于所有用户的服务器进程</li><li>reload：允许管理员重新载入授权表、清空授权、主机、日志和表</li><li>replication client：允许复制主机、使用show status</li><li>replication slave：允许复制从服务器连接到主服务器</li><li>show databases：允许查看所有数据库列表，没有这个权限，用户就只能看到他们自己的</li><li>shutdown：允许关闭mysql服务器</li><li>super：允许关闭属于任何用户的线程</li></ul><h3 id="特别权限"><a href="#特别权限" class="headerlink" title="特别权限"></a>特别权限</h3><ul><li>all：授予以上所有权限</li><li>usage：不授予权限，只允许用户登录，但不能进行任何操作。这样做的目的是为了以后授予权限</li></ul><h2 id="收回权限"><a href="#收回权限" class="headerlink" title="收回权限"></a>收回权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revoke privileges # 收回某种权限</span><br><span class="line">on item # 从某个数据库或者表中</span><br><span class="line">from username #从一个用户中</span><br></pre></td></tr></table></figure><p>其余部分和授权相似。</p><h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><p><code>use db_name</code></p><p>在登录后应切换到需要使用的数据库</p><h2 id="使用数据库表"><a href="#使用数据库表" class="headerlink" title="使用数据库表"></a>使用数据库表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table table_name(</span><br><span class="line"># 字段属性</span><br><span class="line">  table_id int auto_increment not null primary key,</span><br><span class="line">  table_name varchar(255) not null,</span><br><span class="line">  table_float float(6,2),</span><br><span class="line">  #...unsigned意思是他只能是0或者一个正数</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>text：该类型用于表示更长的数据，比如文章</li><li>zerofill：该属性可以让数字类型添加前导0。</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>整数数据类型</p><ul><li>tinyint(1)：非常小的整数</li><li>bit、bool：同tinyint</li><li>smallint(2)：小整形数</li><li>mediumint(3)：中整形数</li><li>int(4)：一般整数</li><li>integer：同int</li><li>bigint(8)：大整形数</li></ul></li><li><p>浮点数据类型</p><ul><li>float(精度)：可用于指定单精度和双精度的浮点数</li><li>float[(M,D)]：指定显示宽度和小数位数===float(4)</li><li>double[(M,D)]：指定了显示宽度和小数位数===float(8)</li><li>duoble：同上</li><li>precision[(M,D)]</li><li>real[(M,D)]：同上</li><li>decimal[(M [,D])]：以char储存的浮点数</li><li>numeric\dec\fixed：同上</li></ul></li><li>日期和时间类型<em>值得注意的是如果不手动设置，特定行中的timestamp将被修改为最近修改改行的日期和时间，这对事物记录很有帮助</em><ul><li>date：一个日期，以YYYY-MM-DD格式</li><li>time：一个时间，以HH:MM:SS格式</li><li>datetime：日期和时间，以YYYY-MM-DD HH:MM:SS格式</li><li>timestamp[(M)]：时间标签，在处理报告中有意义</li><li>year[(2/4)]：可指定显示格式地显示年份</li></ul></li><li>字符串类型<ul><li>char：小段文本，varchar为可变长度的类型，指定的是每种类型的宽度</li><li>text、blob：大小可变，分别适用于长文本、二进制数据(<em>二进制是万金油</em>)。text区分大小写，blob不区分大小写</li><li>set、enum：set最大可以有64个元素，列值必须来自其中。enum枚举最大65535个元素，同时只能有一个为null或者为枚举中的值</li></ul></li></ol><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p><code>show tables</code>：显示当前用户的数据库下的所有表。</p><p><code>show databases</code>：显示当前用户的所有数据库。</p><p><code>descibe table_name</code>：也作<em>desc</em>，显示表格的结构。</p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><blockquote><p>索引有利于提高数据库的查询速度</p></blockquote><p><code>create index index_name on table_name (index_col_name ...)</code></p><h1 id="使用mysql数据库"><a href="#使用mysql数据库" class="headerlink" title="使用mysql数据库"></a>使用mysql数据库</h1><p>ss</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="mysql" scheme="http://www.jelech.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ACM总结</title>
    <link href="http://www.jelech.cn/posts/65518/"/>
    <id>http://www.jelech.cn/posts/65518/</id>
    <published>2018-11-29T12:31:17.000Z</published>
    <updated>2018-12-02T02:43:05.786Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.jelech.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="acm" scheme="http://www.jelech.cn/tags/acm/"/>
    
      <category term="总结" scheme="http://www.jelech.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习笔记</title>
    <link href="http://www.jelech.cn/posts/3493/"/>
    <id>http://www.jelech.cn/posts/3493/</id>
    <published>2018-11-28T12:01:28.000Z</published>
    <updated>2018-12-01T13:39:28.834Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="设计模式笔记"><a href="#设计模式笔记" class="headerlink" title="设计模式笔记"></a>设计模式笔记</h2><blockquote><p>重构获得模式<br>寻找变化点，在变化点运用设计模式</p><p>静态-&gt;动态<br>早绑定-&gt;晚绑定<br>继承-&gt;组合<br>编译时依赖-&gt;运行时依赖<br>紧耦合-&gt;松耦合</p><p>对扩展开放，对修改关闭：类的新增加功能应使用扩展功能，而不是通过修改原来的代码。比如一堆的elseif</p><p><em>attention</em><br><em>规划时,划分出稳定的和变化的</em></p></blockquote><h2 id="组件协作-使用框架与应用创建与划分时"><a href="#组件协作-使用框架与应用创建与划分时" class="headerlink" title="组件协作: 使用框架与应用创建与划分时"></a>组件协作: 使用框架与应用创建与划分时</h2><h3 id="template-Method"><a href="#template-Method" class="headerlink" title="template Method"></a>template Method</h3><p><code>从早绑定到晚绑定</code><br>算法的骨架需要稳定才能使用这个方法<br>使得子类可以不改变一个算法的结构，就可以重定义这个算法的某些步骤<br>框架写好了部分函数和主调用函数，使用者只需要重定义一些子类信息就可以</p><h3 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h3><p><code>多态调用，对扩展开放，对修改关闭</code><br>多个else if..并且限制不明显，未来很有可能扩展时，可以使用，代码过长会占用更多内存，而对象只会在调用时使用<br>定义一系列算法，把他们都一个个封装起来，并且可以互相替换(变化)，使他们所服务的客户程序稳定<br>使得在运行时支持在各种算法之间切换</p><h3 id="Obeserve-Event"><a href="#Obeserve-Event" class="headerlink" title="Obeserve / Event"></a>Obeserve / Event</h3><p>父类通过调用多个观察者，观察子类的信息，更新一些其他的数据</p><h2 id="单一职责-因为需求的增加，会让子类功能复用多次重复利用，应划清责任"><a href="#单一职责-因为需求的增加，会让子类功能复用多次重复利用，应划清责任" class="headerlink" title="单一职责: 因为需求的增加，会让子类功能复用多次重复利用，应划清责任"></a>单一职责: 因为需求的增加，会让子类功能复用多次重复利用，应划清责任</h2><h3 id="Decorator装饰"><a href="#Decorator装饰" class="headerlink" title="Decorator装饰"></a>Decorator装饰</h3><p><code>继承父类的功能后，&#39;多个&#39;子类在细化细节时候对功能进行扩展，引入的静态特质，缺乏灵活性:比如都要加密，都要缓存...</code><br>动态的给一个对象增加一些额外的职责，Decorator模式比生成子类更为灵活<br>基类分为了子类与装饰类(Decorator类)</p><h3 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h3><p><em>以下是预期内容</em></p><p>对象创建<br>对象性能<br>借口隔离<br>状态变化<br>数据结构<br>行为变化<br>领域问题</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>安装Django</title>
    <link href="http://www.jelech.cn/posts/3676/"/>
    <id>http://www.jelech.cn/posts/3676/</id>
    <published>2018-10-10T12:24:40.000Z</published>
    <updated>2018-12-02T01:16:33.315Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="How-2-Install-Django"><a href="#How-2-Install-Django" class="headerlink" title="How 2 Install Django?"></a>How 2 Install Django?</h2><p>当然第一步是安装好你的python啦！</p><h2 id="安装django"><a href="#安装django" class="headerlink" title="安装django"></a>安装django</h2><p><code>pip install django(指定版本django==2.1.1)</code></p><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p><code>django.setting.py -&gt; DATABASE</code></p><p>​    //设置为mysql，数据库名，用户名，密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'ENGINE'</span>     :   <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">​<span class="string">'NAME'</span>       :   <span class="string">'blog-db'</span>,</span><br><span class="line">​<span class="string">'USER'</span>       :   <span class="string">'jelech'</span>,</span><br><span class="line">​<span class="string">'PASSWORD'</span>   :   <span class="string">'123456'</span>,</span><br></pre></td></tr></table></figure><h2 id="安装memcached-django-web缓存"><a href="#安装memcached-django-web缓存" class="headerlink" title="安装memcached django-web缓存"></a>安装memcached django-web缓存</h2><p><em>当同一个用户(ip)访问时候，缓存会识别出来，直接拿出上次同样的访问进行返回</em></p><ol><li>：<code>cd ..</code>（返回到Downloads目录下，Downloads目录下专门放所有下载的东西）</li><li>：<code>wget http://www.memcached.org/files/memcached-1.4.24.tar.gz</code>（下载地址）</li><li>：<code>tar zxvf memcached-1.4.24.tar.gz</code>（进行解压）</li><li>：<code>cd memcached-1.4.24</code> （进入到memcached-1.4.24目录下）</li><li>：<code>./configure --with-libevent=/usr</code>（进行配置）</li><li>：<code>Make</code>（编译这些源代码，让它生成库文件</li><li>：<code>make install</code></li></ol><h3 id="安装连接器"><a href="#安装连接器" class="headerlink" title="安装连接器"></a>安装连接器</h3><p>第一步：pip install python-memcached</p><p>第二步：启动相应服务（因为python-memcached安装完成后只是个可执行文件，我们需要启动它）<code>/usr/local/bin/memcached -u root -d  -p 11211 -c 256 -P /tmp/memcached.pid</code></p><p>第三步：启动以后，我们要看这个东西有没有在系统中启动<code>ps -ef|grep memca</code>每次启动都需要手动输入，很麻烦。</p><p>修改启动文件<code>vi /etc/rc.local</code>将<code>/usr/local/bin/memcached -u root -d  -p 11211 -c 256 -P /tmp/memcached.pid</code>命令放在里面</p><h3 id="Django-setting-配置缓存"><a href="#Django-setting-配置缓存" class="headerlink" title="Django.setting 配置缓存"></a>Django.setting 配置缓存</h3><p>DATABASE下新加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">  <span class="string">'default'</span>: &#123;</span><br><span class="line">    <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.memcached.MemcachedCache'</span>,</span><br><span class="line">    <span class="string">'LOCATION'</span>:<span class="string">'127.0.0.1:11211'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#多个缓存服务器，在location写地址数组[,,,]</span></span><br><span class="line">MIDDLEWAREE_CLASSES内(如果没有，就加到MIDDLEWARE)</span><br><span class="line"><span class="comment">#最前新加</span></span><br><span class="line"><span class="string">'django.middleware.cache.UpdateCacheMiddleware'</span>,</span><br><span class="line"><span class="comment">#最后新加</span></span><br><span class="line"><span class="string">'django.middleware.cache.FetchFromCacheMiddleware'</span>,</span><br></pre></td></tr></table></figure><p><code>django manage.py migrate</code> 会自动创建django的app链接数据库，创建相应的表 表会依据models进行创建</p><h3 id="django配置神器django-debug-toolbar"><a href="#django配置神器django-debug-toolbar" class="headerlink" title="django配置神器django-debug-toolbar:"></a>django配置神器django-debug-toolbar:</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pip 安装好插件</span></span><br><span class="line">pip install django-debug-toolbar</span><br><span class="line"><span class="comment">#setting中的app加入debug_toolbar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑toolbar内部文件</span></span><br><span class="line">python -c <span class="string">"import django;print(django.__path__);"</span> <span class="comment">#得到pip路径</span></span><br><span class="line">vi ..path/site-pacages/debug_toolbar/settings.py</span><br><span class="line"><span class="comment">#加入(修改)</span></span><br><span class="line"><span class="string">'JQUERY_URL'</span>:<span class="string">'//cdn.bootcss.com/jquery/2.1.4/jquery.min.js'</span></span><br></pre></td></tr></table></figure><h2 id="开始Django"><a href="#开始Django" class="headerlink" title="开始Django"></a>开始Django</h2><ul><li><h4 id="创建APP"><a href="#创建APP" class="headerlink" title="创建APP,"></a>创建APP,</h4></li><li><h4 id="修改setting"><a href="#修改setting" class="headerlink" title="修改setting,"></a>修改setting,</h4></li><li><h4 id="修改url"><a href="#修改url" class="headerlink" title="修改url,"></a>修改url,</h4></li><li><h4 id="修改app-views"><a href="#修改app-views" class="headerlink" title="修改app.views"></a>修改app.views</h4></li></ul><h3 id="django中配置日志器的建立和使用"><a href="#django中配置日志器的建立和使用" class="headerlink" title="django中配置日志器的建立和使用"></a>django中配置日志器的建立和使用</h3><h4 id="修改setting-加入"><a href="#修改setting-加入" class="headerlink" title="修改setting,加入"></a>修改setting,加入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: false,</span><br><span class="line">    <span class="string">'formaters'</span>: &#123;</span><br><span class="line">        <span class="string">'standerd'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>:<span class="string">'%(ssctime)s [%(thresdName)s:%(thread)d][%(name)s:%(lineno)d][%(module)s:%(funcName)s][%(levelname)s] - %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'filters'</span>: &#123;</span><br><span class="line">            <span class="string">'mail_admins'</span>: &#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'django.utils.log.AdminEmailHandler'</span>,</span><br><span class="line">                <span class="string">'include_html'</span>:<span class="keyword">True</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'default'</span>: &#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFiileHandler'</span>,</span><br><span class="line">                <span class="string">'filename'</span>: <span class="string">'log/all.log'</span>,</span><br><span class="line">                <span class="string">'maxBytes'</span>: <span class="number">1024</span>* <span class="number">1024</span>* <span class="number">5</span>,</span><br><span class="line">                <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="string">'formatter'</span>:<span class="string">'standerd'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'error'</span>: &#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFiileHandler'</span>,</span><br><span class="line">                <span class="string">'filename'</span>: <span class="string">'log/error.log'</span>,</span><br><span class="line">                <span class="string">'maxBytes'</span>: <span class="number">1024</span>* <span class="number">1024</span>* <span class="number">5</span>,</span><br><span class="line">                <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="string">'formatter'</span>:<span class="string">'standerd'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'console'</span>: &#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">                <span class="string">'formatter'</span>: <span class="string">'standerd'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'request_handler'</span>;&#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFiileHandler'</span>,</span><br><span class="line">                <span class="string">'filename'</span>: <span class="string">'log/script.log'</span>,</span><br><span class="line">                <span class="string">'maxBytes'</span>: <span class="number">1024</span>* <span class="number">1024</span>* <span class="number">5</span>,</span><br><span class="line">                <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="string">'formatter'</span>:<span class="string">'standerd'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'scripts_handler'</span>;&#123;</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFiileHandler'</span>,</span><br><span class="line">                <span class="string">'filename'</span>: <span class="string">'log/script.log'</span>,</span><br><span class="line">                <span class="string">'maxBytes'</span>: <span class="number">1024</span>* <span class="number">1024</span>* <span class="number">5</span>,</span><br><span class="line">                <span class="string">'backupCount'</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="string">'formatter'</span>:<span class="string">'standerd'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'loggers'</span>: &#123;</span><br><span class="line">            <span class="string">'django'</span>: &#123;</span><br><span class="line">                <span class="string">'handlers'</span>: [<span class="string">'default'</span>, <span class="string">'console'</span>],</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'propaga'</span>:<span class="keyword">False</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'django.request'</span>: &#123;</span><br><span class="line">                <span class="string">'handlers'</span>: [<span class="string">'request_handler'</span>],</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'propaga'</span>:<span class="keyword">False</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'scripts'</span>: &#123;</span><br><span class="line">                <span class="string">'handlers'</span>: [<span class="string">'scripts_handler'</span>],</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">                <span class="string">'propaga'</span>:<span class="keyword">False</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'blog.views'</span>: &#123; <span class="comment">#app name.views</span></span><br><span class="line">                <span class="string">'handlers'</span>: [<span class="string">'default'</span>, <span class="string">'error'</span>],</span><br><span class="line">                <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">                <span class="string">'propaga'</span>:<span class="keyword">False</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'appName.views'</span>)</span><br><span class="line">logger.error(x) errorException</span><br><span class="line"><span class="comment">#抓取x错误登记到error.txt文件里</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#setting中可以设置网站的基本信息，网站内进行引用</span></span><br><span class="line">SITE_NAME = <span class="string">'jelech的个人博客'</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#1`局部引用</span></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="comment">#2`全局setting</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_setting</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">'SITE_NAME'</span>:setting.SITE_NAME,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">#settings中TMPLATES中context_processors尾部加入</span></span><br><span class="line"><span class="string">'appName.views.global_setting'</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">#网站内直接使用变量</span></span><br><span class="line">&#123;&#123; SITE_NAME &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#mysql临时笔记</span><br><span class="line"></span><br><span class="line">    //修改密码，注意mysql5.7中user表中密码改为了authentication_string</span><br><span class="line">    update mysql.user set authentication_string1=password(&apos;123456&apos;) where User=&quot;jelech&quot; and Host=&quot;localhost&quot;;</span><br><span class="line"></span><br><span class="line">    // 密码进入数据库，创建新数据库，授权新用户，刷新改动，设置根密码(初始使用一次就行)</span><br><span class="line">    mysql -u root -p</span><br><span class="line">    create database blog_db charset=utf8;</span><br><span class="line">    grant all on db_music.* to jelech@localhost identified by &quot;123456&quot;;</span><br><span class="line">    flush privileges;</span><br><span class="line">    set password for root@localhost=password(&quot;Nozuonodie&quot;);</span><br><span class="line"></span><br><span class="line">    //修改表格格式信息</span><br><span class="line">    ALTER TABLE userInfo MODIFY password VARCHAR(100) NOT NULL;</span><br><span class="line"></span><br><span class="line">    //删除表中所有内容，以及索引 用这种方法相当于重载了表格内容，全新的！</span><br><span class="line">    truncate table wp_comments;</span><br><span class="line"></span><br><span class="line">安装mysqlclient</span><br><span class="line"></span><br><span class="line">    pip install mysqlclient</span><br><span class="line"></span><br><span class="line">    安装Python mysqlclient出现“OSError: mysql_config not found”错误：</span><br><span class="line">    安装libmysqlclient-dev包即可，如果还有问题，可以安装python-dev</span><br><span class="line">    $ apt-get install libmysqlclient-dev python3-dev</span><br><span class="line"></span><br><span class="line">django链接数据库</span><br><span class="line">    pip install pymysql     #安装好python和mysql的连接器</span><br><span class="line">    python3 manage.py inspectdb &gt; bigDataSwap/models.py     #链接django和mysql，自动生成表中的各种东西</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="软件配置" scheme="http://www.jelech.cn/categories/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="python" scheme="http://www.jelech.cn/tags/python/"/>
    
      <category term="linux" scheme="http://www.jelech.cn/tags/linux/"/>
    
      <category term="软件配置" scheme="http://www.jelech.cn/tags/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Django" scheme="http://www.jelech.cn/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>算法学习笔记</title>
    <link href="http://www.jelech.cn/posts/16186/"/>
    <id>http://www.jelech.cn/posts/16186/</id>
    <published>2018-09-20T13:09:57.000Z</published>
    <updated>2018-12-01T13:37:14.241Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="学习笔记O-∩-∩-O"><a href="#学习笔记O-∩-∩-O" class="headerlink" title="学习笔记O(∩_∩)O"></a>学习笔记O(∩_∩)O</h2><h4 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h4><blockquote><p>倍增是一种思想。依据这种思想，衍生出了ST表、LCA(最近公共祖先)以及一些在树上的倍增应用。</p></blockquote><p>考虑这样一个问题：如何快速在一个序列s中查询到不大于a的值？（这里序列已排序好<br>正常思想就是二分，每次取得s中<code>l,r,mid</code>的值，进行比较后快速logn速度逼近正确的值。但是这里我们不考虑二分<br>倍增和二分的思想很类似。对于一个单调的序列，我们可以快速的跳过太小的（或者太大的）数，从而快速逼近结果。<br>简单的模拟一下倍增：<br>· 设置一个长度p，每次如果查询到的值小于<strong>目标</strong>，位置<code>k+=p</code>，长度<code>p=2*p</code><br>· 如果查询到的值大于<strong>目标</strong>，长度<code>p=p/2</code>。并重复上一个步骤。<br>· 循环查询到确切的目标。<br>比如，起初位置在k为0，p为2.查询到s[k+p]为小于<strong>目标</strong>的数，<code>k</code>就变成了<code>k+p</code>，<code>p</code>增倍了。下一次查询到s[k+p]大于了<strong>目标</strong>数，我们就把p先减小为一半。再查一次。如果有概念了，可以想象出平均下来是logn的。</p><h4 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h4><blockquote><p>st表灵活的使用了倍增的思想<br>可以进行对区间最值问题的快速查找与更新<br>预处理O（n·logn），查询O（1），空间（n·logn）</p></blockquote><p>线段树虽说是区间维护的全能王，但是也恰巧这样导致了他在一些特别的方面处理比较慢，线段树的查询是O(logn)的，而且占用的空间也较大，所以容易被卡常数。</p><h4 id="字典树-Trie"><a href="#字典树-Trie" class="headerlink" title="字典树 Trie"></a>字典树 Trie</h4><blockquote><p>将所有字符串依据前缀构建的一棵树<br>其中的节点表示字符串的某个字符，树的根是一个空指针<br>是一种存放字符串的数据结构（就是为了其他算法的使用专门设计的</p></blockquote><h4 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h4><p>（好像顺序乱套了</p><blockquote><p>不是可以自动Acepte的程序<br>是基于kmp思想，建立在字典树上的自动匹配字符串算法<br>多个模板串，一个目标串<br><code>重要词典:</code><br>失败指针(fail指针)：指的是在匹配某个字符串的时候，如果到当前的位置发现不匹配，会跳到某个其他前缀匹配的位置，继续匹配。如果仍然没有，就会跳回到根</p></blockquote><h4 id="佩尔方程"><a href="#佩尔方程" class="headerlink" title="佩尔方程"></a>佩尔方程</h4><p>（没想到还是要学数论</p><blockquote><p>满足：x^2 - d<em>y^2 = 1 的方程<br>方程通过假设x1,x2两个解，解出了另一个新的解。这代表了如果知道方程中的最小特解，就能推论出所有的解。<br>通解：`Xn = Xn-1 </em> X1 + d <em> Yn-1 </em> Y1<code></code>Yn = Xn-1 <em> X1 + Yn-1 </em> Y1`<br>半难以发现正解公式，需要通过自己一步一步推公式。</p></blockquote><h4 id="赛后笔记"><a href="#赛后笔记" class="headerlink" title="赛后笔记"></a>赛后笔记</h4><blockquote><p>先贪心再暴力<br>打表找规律推公式<br>关于long long 要先仔细读题思考哪些部分需要再修改部分</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://www.jelech.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装python3</title>
    <link href="http://www.jelech.cn/posts/21344/"/>
    <id>http://www.jelech.cn/posts/21344/</id>
    <published>2018-09-15T14:24:40.000Z</published>
    <updated>2018-12-01T13:36:22.891Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="一、首先，官网下载python3的所需版本。"><a href="#一、首先，官网下载python3的所需版本。" class="headerlink" title="一、首先，官网下载python3的所需版本。"></a>一、首先，官网下载python3的所需版本。</h2><p><a href="https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz" target="_blank" rel="noopener">wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz</a></p><p>想下载到那个文件夹下就先进入到那个文件夹下——cd /home/download</p><h3 id="二、然后，解压缩文件"><a href="#二、然后，解压缩文件" class="headerlink" title="二、然后，解压缩文件"></a>二、然后，解压缩文件</h3><p>tar -xvf Python-3.6.0.tgz</p><h3 id="三、创建安装文件的路径。"><a href="#三、创建安装文件的路径。" class="headerlink" title="三、创建安装文件的路径。"></a>三、创建安装文件的路径。</h3><p>mkdir /usr/local/python3</p><h3 id="四、编译。"><a href="#四、编译。" class="headerlink" title="四、编译。"></a>四、编译。</h3><p>./configure –prefix=/usr/local/python3</p><h3 id="五、安装。"><a href="#五、安装。" class="headerlink" title="五、安装。"></a>五、安装。</h3><p>1、make</p><p>2、make install</p><p>3、完毕</p><h3 id="六、创建新版本的软连接。"><a href="#六、创建新版本的软连接。" class="headerlink" title="六、创建新版本的软连接。"></a>六、创建新版本的软连接。</h3><p>1、修改旧版本</p><p>mv /usr/bin/python /usr/bin/python_bak</p><p>2、创建新的软连接</p><p>ln -s /usr/local/python3/bin/python3 /usr/bin/python</p><p>3、检查python的版本</p><p>python -V</p><p>python-3.6.0</p><p>软连接创建成功</p><h3 id="七、配置成功后，pip3用不了，需进一步配置。"><a href="#七、配置成功后，pip3用不了，需进一步配置。" class="headerlink" title="七、配置成功后，pip3用不了，需进一步配置。"></a>七、配置成功后，pip3用不了，需进一步配置。</h3><p>若已有pip3：</p><p>1、PATH=$PATH:$HOME/bin:</p><p>2、PATH=$PATH:$HOME/bin:/usr/local/python3/bin</p><p>3、完成</p><p>或者没有pip3：</p><p>sudo apt install python3-pip</p><p>这时pip3就可以使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.jelech.cn/tags/linux/"/>
    
      <category term="软件配置" scheme="http://www.jelech.cn/tags/%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>日（口）记</title>
    <link href="http://www.jelech.cn/posts/34232/"/>
    <id>http://www.jelech.cn/posts/34232/</id>
    <published>2018-08-31T14:12:04.000Z</published>
    <updated>2018-12-01T13:41:33.271Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19hScosy74A3HnxoxJ5hU7zkvpw4VlBUbh/cmJShYHjg51iJH5zrX1qVZlnRIIHTbLPa2lpWGXlibVjq5aYFyiyV9ukL+sP4/qSx/HWTgr6WB3e4eard11ErOkP/F9oQwHcGNvrMYo2MUt7+12t22V7e1xNmq0jl3U4RoupM8xMrR5WqTKZ6sGj86alFNugSX6Qc9dH6Eim2W1snZV4GPQmDTz7qP8jdcc4oVjxstOpkxONjyk+sa/241D/rpyGKf2tGUg3ZqM9pBfPIOOgcT93Wtd++PdbuvB5xqxHZvT1UkFajBFkNN0uRziRxvWLeJ6LETWrjRXiZ3JllKtdg86hefwwV/wqPmSHNcjlXwi9QvUg2m7zqiL1y6Whawiwcv75s9rf64Spc4bhGSOZqlaRUvEp5m/VzhqxpvdOr84aRShokjRsSN0r5dGX2D79alWhWsB1ETT7z4Fxb6s3uMIsx1CAV7o+aodogbPEjb/UUvDDrXZhdHAbqG667ly6YGy/n/S/Mt9xP6wt0ZpABgousO9i2JD8sUgUQg2IqJt3vTA0dZuzg4KvAJrs1+TpJ98+PS6o9aRCyYo40R+SxCncQ6Ppde3VcFswQxQxmPkCFaWDfWdqlVGz+oM/H1XZgowrC8YwIm8A+AzAbtnyOv+8BgZNDAnScN51cbgJKd9DcOMhxJV/y8X+ipGo0iQfa5qJGt90jInvchHWrsq2hIu6lm0pNEDRaloDpkJDZaHzvgozqhjnE/X9H6K1bahF9Co/WBQcdNLM2XTitfBm6gQsOWF5gycUgQQehCpvt0sDrJmcJlW8xeVr4xti0NbDB1HOUZz4D0Xn6FdJfzjtV5WUgtVxSPRDJWOIlkfCmawQbSxL8dIfyyvqiBdkISUjg7jqcXdmodmTK+hnuXI3cTqnkuuqXlBt7fTNLiNXeux67+c+lh6JJXtHQDmpCyulW5fy7bUYyB+EqDpgAHvuS7QL9zeDRWEQnR6EBsQFG84CNIcSrnsY+2qWnVKKNIfORyA4X8lHq+iuLiwolBXqT7I2UzT9CR9uDqaDibhaQmI+5UeIjgw167Tiu+4rO1vZyO4jY2Ypna53vhZPi5irmdO94ukfbJQwtBsfofvWFDBhSJ/e+rp75guHBo8u688tHAxvGd99mESj3DnkVEGQNVIKyaBHISRT8NDmaaaJStErV+XoR+U9qzTAdheWveTZ/9hyd0uQWLSgmNXiGTWO7kBogtXozuuKXXKG9QylgQGn8GpTxcfMSH6M3JgXsXfVH+WRqLfqinocfQCRsArR8g/Ew2+B37z6k2KubSppcNEMq2k/MspBCa37p5wlkyjqLHi5fXLrXYOjLlglfltIHs4srOZ4qY9oiGEcDoNTXLirTfLsr6yF4dCGOTa7lh1L+MyXSmFtkLJldHUM7mE0pQ6LAyI1BE/lbmLlswQMWV1HLAPJr+FfN/OlEL+fNhpLctMMGyyoUSNYHeyTQfWsIHM0+jnViEvUMbslaCDANGiVHk7ZCe8GzRcSMveRKm9uTA2j1SvMlLcc15FRWQv+0uHHtAuMHTMr/7Jcl0vjDMmebVKZzSAvS0007xqDXOxA34lBcQpXmf0Xm5UgoXHggUIT7Ay93Vf1GuaxI7T2Q+72aaKbz6ssR+HxC7y+9ld1hNMb8DLwto/5q2XCc7IfUyxw2IJn22zGwSc+Sp1wGGtnR5dCvXktBNeZtB65gfNw24cAgn0MsLlhO7QzgMstfqAY0w43XZHrSjdaEOvyStka8mENDCg1eCKugvi+pJAUpYmJ7V5xw/9AeV/MW5JLMW6lCanhFq9fh7bJKwp/i8MaTCf2OgsPfaPMYqylcsmbspxCKA5VibF2zEHN9dfp8MGYd6/rqk7r+ikMNGmHCzAgNdfGOtiJO8hkjlVpU5hGf/n/zt4JjeEwu8SScdX29l+bAHuixlJtNeeLQ/mKFmkbBU4CEwhZarsVu+0hFh6Bufygq1Z9vP3PPlAUEza8iZpBw4SoM9dxRgSWTElxvXsp/g1psmWOOkRKfoRVjoks6Uz0RFz6xllqFliSGyjqo/DWxL9vRI8e9vZhiRz9THBXZRWq6cWJ0/ZH+mTou2hE8eHArcr0e1mLCxoygdXr8VDCwlkCVQ9b2cPCd7aylmg7fnUbmivdweJQ+B/T20U/tIDLGx5cJPlezCMNaO93gHoHREorYeFaW0OTat1/PlrjwmdKwam1UInUQSvRR0zpPX3ih95Fn8FXjM46rr4b+WpDkIZhxzGKtK1w25AJSeFgz4RwFPDZFbsfee8E/wDODeEHN/lx1VRieGScv9qvj/1B9b1kXdoyMRViArEWDyzJUNBOByim7jbRzjXzKJV1yFelg68AU902uNzi8WbQYYowB4bhjmpcou86a4UOlAFrOpdXWGg220E2eNcVqAFzyjbX3758L0f+gJquwvvnUS+92YaD/aAbyXtZD4WYNS8KR0whXbiXE5Uky9UNg1PnhbulJDrmsUrS/Fa+gVyF4isqNLZ7p8Coz1oDGnCcJ+iROz85I1LOr6woo0I2GBik9LxE6XZ4iL5H9BZaKoLeUwTGViLW3OaHRrFWTccSs8Hf6QfxOAra6P3WUgFZyCSTxyLJGeh4I7eOdmyNJzrWnvvQWXg81DAw+aXY70G9J9J/hHpSoen/q8ekpL0b7/40JxPkJS+kkyNVWO8yCaywrZ5F085asTf3GoTlFpsrQC4YzaUgww58H9uIhUHHB9QcSSCKy/ujMgbcDGmk3YPJvTSQlVNQLhh26eNsXIKc5I1J65ub9g2gcJU2zBe8muUP1AIJqX7rNfEqpMfZq/Apx5XOzYcmt5aHWnFmILSUpSI1QXuHdpETf2/y4Yz1JnBn4u9LMnpL/ZQUvxiHFLhHEUNRWCRZWbn6H7WNjWT85jJR+4m94k3M3elgIb1Xtft1oQX1txiD9x4Vn3jODoAe3PqaleTWhAVEVTSzYAeQ3tbpUzBJNxIW9BTW</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.jelech.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="语录" scheme="http://www.jelech.cn/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>更新一波新模板</title>
    <link href="http://www.jelech.cn/posts/33987/"/>
    <id>http://www.jelech.cn/posts/33987/</id>
    <published>2018-08-28T14:26:40.000Z</published>
    <updated>2018-12-01T13:37:09.287Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="m染色问题板子"><a href="#m染色问题板子" class="headerlink" title="m染色问题板子"></a>m染色问题板子</h2><blockquote><p>常规用法：求无向图种，m种颜色可以染成几种<br>可使用二分查找不同m，每次dfs(return if ans &gt; 0)来查找最小m使得图可以被染色成功。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,k,m,x,y,i,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>][<span class="number">1001</span>],f[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">if</span>(ans &gt; <span class="number">0</span>) <span class="keyword">return</span> ; <span class="comment">// ans is bigger than 0 meaning it can be colored</span></span><br><span class="line"><span class="keyword">if</span> (dep==n+<span class="number">1</span>)&#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,m+<span class="number">1</span>) <span class="keyword">if</span> (!f[dep][i])&#123;</span><br><span class="line">            rep(j,<span class="number">1</span>,n+<span class="number">1</span>) <span class="keyword">if</span> (a[dep][j])&#123;</span><br><span class="line">                f[j][i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(dep+<span class="number">1</span>);</span><br><span class="line">            rep(j,<span class="number">1</span>,n+<span class="number">1</span>) <span class="keyword">if</span> (a[dep][j])&#123;</span><br><span class="line">                f[j][i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">cin</span> &gt;&gt; T; T; T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">        m = <span class="number">3</span>;<span class="comment">// m colors</span></span><br><span class="line">        rep(i,<span class="number">1</span>,k+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            x++,y++;</span><br><span class="line">            a[x][y]=<span class="number">1</span>;</span><br><span class="line">            a[y][x]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"N"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Y"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nmk硬币问题"><a href="#nmk硬币问题" class="headerlink" title="nmk硬币问题"></a>nmk硬币问题</h3><blockquote><p>从n种硬币中选m个投k次，问最终向上的硬币数的期望计算</p><p>//dp 计算的是概率，代表了投第i次增加了向上硬币数可以有上次较少的成功得到，也可以由同样的数失败得到。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d[<span class="number">200</span>][<span class="number">200</span>],p[<span class="number">200</span>],c[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        c[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)c[i][j]=c[i<span class="number">-1</span>][j<span class="number">-1</span>]+c[i<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)p[i]=p[i<span class="number">-1</span>]/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,m,t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;t);</span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">        d[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(d[i][j]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=t;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(n-j&gt;=t)d[i+<span class="number">1</span>][j+k]+=d[i][j]*c[t][k]*p[t];</span><br><span class="line">                    <span class="keyword">else</span> d[i+<span class="number">1</span>][j-(t-(n-j))+k]+=d[i][j]*c[t][k]*p[t];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans+=d[m][i]*i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈密尔顿回路问题"><a href="#哈密尔顿回路问题" class="headerlink" title="哈密尔顿回路问题"></a>哈密尔顿回路问题</h3><blockquote><p>只经过所有点一次，能否走完并回到起点，以及最佳路径</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> c[V][V];<span class="comment">//edge</span></span><br><span class="line"><span class="keyword">int</span> x[V];</span><br><span class="line"><span class="keyword">bool</span> flag[V];</span><br><span class="line"><span class="keyword">bool</span> vis[V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hamilton</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">        x[i] = <span class="number">-1</span>,vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    vis[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    x[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        x[k]++;</span><br><span class="line">        <span class="keyword">while</span>(x[k] &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[x[k]] &amp;&amp; c[x[k - <span class="number">1</span>]][x[k]])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x[k]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((x[k] &lt; n) &amp;&amp; (k != n - <span class="number">1</span>))&#123;</span><br><span class="line">            vis[x[k]] = <span class="literal">true</span>;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((x[k] &lt; n) &amp;&amp; k == n - <span class="number">1</span> &amp;&amp; c[x[k]][x[<span class="number">0</span>]])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            x[k] = <span class="number">-1</span>;</span><br><span class="line">            k--;</span><br><span class="line">            vis[x[k]] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);</span></span><br><span class="line">    <span class="comment">//freopen("out.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line"></span><br><span class="line">        rep(i,<span class="number">0</span>,m)&#123;</span><br><span class="line">            <span class="keyword">int</span> a,b;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            a--,b--;</span><br><span class="line">            c[a][b]=<span class="literal">true</span>;</span><br><span class="line">            c[b][a]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hamilton();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> f = <span class="literal">false</span>;</span><br><span class="line">        rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">            flag[x[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!flag[i]) f=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f) <span class="built_in">cout</span> &lt;&lt;<span class="string">"no solution"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            rep(i,<span class="number">0</span>,n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==n<span class="number">-1</span>) <span class="built_in">cout</span> &lt;&lt; x[i]+<span class="number">1</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; x[i]+<span class="number">1</span> &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.jelech.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="刷题" scheme="http://www.jelech.cn/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="acm" scheme="http://www.jelech.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>中石油大学训练赛题解(Personal)</title>
    <link href="http://www.jelech.cn/posts/55713/"/>
    <id>http://www.jelech.cn/posts/55713/</id>
    <published>2018-07-22T09:55:41.000Z</published>
    <updated>2018-12-01T13:39:58.219Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="第三阶段个人训练赛（USACO2018-Open）"><a href="#第三阶段个人训练赛（USACO2018-Open）" class="headerlink" title="第三阶段个人训练赛（USACO2018 Open）"></a>第三阶段个人训练赛（USACO2018 Open）</h2><blockquote><p><a href="http://exam.upc.edu.cn/contest.php?cid=1388" target="_blank" rel="noopener">这里是源地址</a></p></blockquote><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><blockquote><p>B：给你n个数据，求其中两个数据进行AND操作(&amp;)后的最大值是什么【n&lt;=1e6 ai&lt;=2^31】</p><p>C：给你n个数，m种序列，问尽量满足前X顺序的情况下，取得的X最大时候的序列顺序是什么（两个序列进行合并操作按照字典序最小）【1≤N≤1e5 1≤M≤50,000】</p><p>E：问这种操作下回打印多少次moo</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; sorted = <span class="literal">false</span></span><br><span class="line">&gt; <span class="keyword">while</span> (<span class="keyword">not</span> sorted):</span><br><span class="line">&gt;    sorted = <span class="literal">true</span></span><br><span class="line">&gt;    moo</span><br><span class="line">&gt;    <span class="keyword">for</span> i = <span class="number">0</span> to N<span class="number">-2</span>:</span><br><span class="line">&gt;       <span class="keyword">if</span> A[i+<span class="number">1</span>] &lt; A[i]:</span><br><span class="line">&gt;          swap A[i], A[i+<span class="number">1</span>]</span><br><span class="line">&gt;    <span class="keyword">for</span> i = N<span class="number">-2</span> downto <span class="number">0</span>:</span><br><span class="line">&gt;       <span class="keyword">if</span> A[i+<span class="number">1</span>] &lt; A[i]:</span><br><span class="line">&gt;          swap A[i], A[i+<span class="number">1</span>]</span><br><span class="line">&gt;    <span class="keyword">for</span> i = <span class="number">0</span> to N<span class="number">-2</span>:</span><br><span class="line">&gt;       <span class="keyword">if</span> A[i+<span class="number">1</span>] &lt; A[i]:</span><br><span class="line">&gt;          sorted = <span class="literal">false</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>【1≤N≤100,000 0&lt;=Ai&lt;=1e9】</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><blockquote><p>B:（题外话：一开始就想的字典树维护，可是他们一堆人就开始莽交，让人怀疑人生，没办法只有强行暴力过）直接暴力肯定不行，需要压缩一下复杂度。首先，两个数&amp;操作后得到的数肯定比最小的数还要小，这是一定的。所以，我们可以想到，在维护一个最大值的情况下，如果后序遍历到了比这种数要小的，就不用进行运算了。因此答案可以是直接进行排序，从大到小遍历，维护一个&amp;操作的最大值，如果取得的数比这个数小，就直接跳过后序的访问，这样减去了很多多余操作。</p><p>C:（题外话：这道题是真的没想到用拓扑排序。。）由于X是前几个，有顺序。并且前X个序列合并后都是独立判断，所以，我们可以直接二分答案，每次二分直接建图，再跑一次拓扑排序判断有没有环。因为有环的时候代表了这个合并的序列是不合法的（这个比较难想到）</p><p>E：（题外话：这不就是问冒泡排序次数吗？然后WA了）首先，这是双向冒泡（当然看得出来）然后，通过观察。我发现从每次从头往后找一个需要往后移动数，那么这次是肯定会移动的，而从后往前移动的数，可以是自己移动的，也可能是之前的数往后移动，将它顺便移动到前面的。那么我们维护一个最大值。设定一个中间变量，每次找到一个应该往后移动的数，就加一，如果找到的是向前的，并且他要去的位置是之前其他数已经移动的位置，那么久减一，这样从头到尾遍历一遍就得出了结果。（代码和解释稍微有更改）</p></blockquote><h3 id="C题源代码："><a href="#C题源代码：" class="headerlink" title="C题源代码："></a>C题源代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FI(n) FastIO::read(n)</span></span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="keyword">char</span> buf[SIZE], obuf[SIZE], str[<span class="number">60</span>];</span><br><span class="line"><span class="keyword">int</span> bi = SIZE, bn = SIZE, opt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (bn) &#123;</span><br><span class="line"><span class="keyword">for</span> (; bi &lt; bn &amp;&amp; buf[bi] &lt;= <span class="string">' '</span>; bi++);</span><br><span class="line"><span class="keyword">if</span> (bi &lt; bn) <span class="keyword">break</span>;</span><br><span class="line">bn = fread(buf, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">bi = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (bn) &#123;</span><br><span class="line"><span class="keyword">for</span> (; bi &lt; bn &amp;&amp; buf[bi] &gt; <span class="string">' '</span>; bi++) s[sn++] = buf[bi];</span><br><span class="line"><span class="keyword">if</span> (bi &lt; bn) <span class="keyword">break</span>;</span><br><span class="line">bn = fread(buf, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">bi = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">s[sn] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> sn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = read(str), bf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; <span class="keyword">if</span> (str[i] == <span class="string">'-'</span>) bf = <span class="number">-1</span>, i++; <span class="keyword">else</span> bf = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; i &lt; n; i++) x = x * <span class="number">10</span> + str[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span> (bf &lt; <span class="number">0</span>) x = -x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; <span class="comment">// 快速读入挂</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,cnt;</span><br><span class="line"><span class="keyword">int</span> head[MAXN], to[MAXN&lt;&lt;<span class="number">1</span>], net[MAXN&lt;&lt;<span class="number">1</span>], r[MAXN], vis[MAXN];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    to[cnt]=v;</span><br><span class="line">    net[cnt] = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp;a) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.id &lt; id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span> :: priority_queue &lt;node&gt; dl;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="keyword">sizeof</span>(r));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mid;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;q[i].size()<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            addedge(q[i][j], q[i][j+<span class="number">1</span>]);</span><br><span class="line">            r[q[i][j+<span class="number">1</span>]]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">topsort</span><span class="params">(<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!r[i])&#123;</span><br><span class="line">            sum++;</span><br><span class="line">            dl.push((node)&#123;i&#125;);</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!dl.empty())&#123;</span><br><span class="line">        node now = dl.top();</span><br><span class="line">        <span class="keyword">if</span>(f) <span class="built_in">printf</span>(<span class="string">"%d "</span>, now.id);</span><br><span class="line">        dl.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now.id];i;i=net[i])&#123;</span><br><span class="line">            r[to[i]]--;</span><br><span class="line">            <span class="keyword">if</span>(!r[to[i]] &amp;&amp; !vis[to[i]])&#123;</span><br><span class="line">                dl.push((node)&#123;to[i]&#125;);</span><br><span class="line">                sum++;</span><br><span class="line">                vis[to[i]]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum==n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    while(~scanf("%d %d",&amp;n,&amp;m))&#123;</span></span><br><span class="line"><span class="comment">//        freopen("in.txt","r",stdin);</span></span><br><span class="line"><span class="comment">//        freopen("out.txt","w",stdout);</span></span><br><span class="line">        FI(n),FI(m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s,x;</span><br><span class="line"><span class="comment">//            scanf("%d",&amp;s);</span></span><br><span class="line">            FI(s);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=s;j++)&#123;</span><br><span class="line"><span class="comment">//                scanf("%d",&amp;x);</span></span><br><span class="line">                FI(x);</span><br><span class="line">                q[i].push_back(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=m+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            build(mid);</span><br><span class="line">            <span class="keyword">if</span>(topsort(<span class="number">0</span>))&#123;</span><br><span class="line">                l=mid+<span class="number">1</span>;</span><br><span class="line">                ans=mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        build(ans);</span><br><span class="line">        topsort(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E题源代码："><a href="#E题源代码：" class="headerlink" title="E题源代码："></a>E题源代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FI(n) FastIO::read(n)</span></span><br><span class="line"><span class="keyword">namespace</span> FastIO &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="keyword">char</span> buf[SIZE], obuf[SIZE], str[<span class="number">60</span>];</span><br><span class="line"><span class="keyword">int</span> bi = SIZE, bn = SIZE, opt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (bn) &#123;</span><br><span class="line"><span class="keyword">for</span> (; bi &lt; bn &amp;&amp; buf[bi] &lt;= <span class="string">' '</span>; bi++);</span><br><span class="line"><span class="keyword">if</span> (bi &lt; bn) <span class="keyword">break</span>;</span><br><span class="line">bn = fread(buf, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">bi = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (bn) &#123;</span><br><span class="line"><span class="keyword">for</span> (; bi &lt; bn &amp;&amp; buf[bi] &gt; <span class="string">' '</span>; bi++) s[sn++] = buf[bi];</span><br><span class="line"><span class="keyword">if</span> (bi &lt; bn) <span class="keyword">break</span>;</span><br><span class="line">bn = fread(buf, <span class="number">1</span>, SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">bi = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">s[sn] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> sn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = read(str), bf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; <span class="keyword">if</span> (str[i] == <span class="string">'-'</span>) bf = <span class="number">-1</span>, i++; <span class="keyword">else</span> bf = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; i &lt; n; i++) x = x * <span class="number">10</span> + str[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span> (bf &lt; <span class="number">0</span>) x = -x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; <span class="comment">// 快速读入挂</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,p;</span><br><span class="line">&#125;emt[<span class="number">100007</span>];</span><br><span class="line"><span class="keyword">int</span> t,n,m;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">100007</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.val==b.val) <span class="keyword">return</span> a.p&lt;b.p;</span><br><span class="line">    <span class="keyword">return</span> a.val &lt; b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    while(~scanf("%d",&amp;n))&#123;</span></span><br><span class="line"><span class="comment">//        freopen("in.txt","r",stdin);</span></span><br><span class="line"><span class="comment">//        freopen("out.txt","w",stdout);</span></span><br><span class="line">        FI(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//            scanf("%d",&amp;emt[i].val);</span></span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            FI(a);</span><br><span class="line">            emt[i].val = a;</span><br><span class="line">            emt[i].p=i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(emt+<span class="number">1</span>,emt+<span class="number">1</span>+n,cmp);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(emt[i].p &gt; i)++cnt;</span><br><span class="line">            <span class="keyword">if</span>(vis[i])--cnt;</span><br><span class="line">            vis[emt[i].p] = <span class="literal">true</span>;</span><br><span class="line">            ans=max(ans,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
    
      <category term="刷题" scheme="http://www.jelech.cn/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="acm" scheme="http://www.jelech.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces Round 47 题解</title>
    <link href="http://www.jelech.cn/posts/40135/"/>
    <id>http://www.jelech.cn/posts/40135/</id>
    <published>2018-07-18T15:09:57.000Z</published>
    <updated>2018-12-01T13:40:35.835Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="Educational-Codeforces-Round-47-Rated-for-Div-2"><a href="#Educational-Codeforces-Round-47-Rated-for-Div-2" class="headerlink" title="Educational Codeforces Round 47 (Rated for Div. 2)"></a>Educational Codeforces Round 47 (Rated for Div. 2)</h2><blockquote><p><a href="https://codeforces.com/contest/1009/problem" target="_blank" rel="noopener">原文链接</a>ABCDEFG</p></blockquote><h3 id="A题意"><a href="#A题意" class="headerlink" title="A题意"></a>A题意</h3><blockquote><p>A题： 用钱包walt买价值emt的物品，顺序用钱，不找回，最多购买</p></blockquote><h3 id="A题解"><a href="#A题解" class="headerlink" title="A题解"></a>A题解</h3><blockquote><p>顺序扫一遍，有满足的就加，并后移。一种卡尺操作。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,emt[<span class="number">1007</span>],walt[<span class="number">1007</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;emt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;walt[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,j=<span class="number">0</span>;<span class="comment">// to the walt</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(walt[j] &gt;= emt[i])&#123;</span><br><span class="line">ans++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B题意"><a href="#B题意" class="headerlink" title="B题意"></a>B题意</h3><blockquote><p>B题：一个字符串只能交换0-1；1-2 问最小串</p></blockquote><h3 id="B题解"><a href="#B题解" class="headerlink" title="B题解"></a>B题解</h3><blockquote><p>看得出来1可以到任何位置，0和2的位置只能固定。所以，记录一下0，2的位置。<br>在输出完第一个2的前面的0之后，输出所有的1，再继续输出剩下的固定0,2位置。就是结果了。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m,emt[<span class="number">100007</span>][<span class="number">3</span>],len=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">memset</span>(emt,<span class="number">0</span>,<span class="keyword">sizeof</span>(emt));</span><br><span class="line"><span class="built_in">string</span> s,s2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>; <span class="comment">// 1 nums</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">'1'</span>) cnt++;</span><br><span class="line"><span class="keyword">else</span> s2 += s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s2[j]==<span class="string">'0'</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(cnt--)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;s2[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C题意"><a href="#C题意" class="headerlink" title="C题意"></a>C题意</h3><blockquote><p>C题：每次对一个序列输入x,d；每个数都+x,选择一个点j，向外扩散增加d，分别加到对应的位置上。问最大的平均数是多少？</p></blockquote><h3 id="C题解"><a href="#C题解" class="headerlink" title="C题解"></a>C题解</h3><blockquote><p>题也说的很清楚了。每次输入的值都加到一个总和里，最后在除n就行了。<br>二者，如果d大于0，则应该尽量让他递增更多，如果d小于0，则应该让j的位置尽量靠中间。公式化简一下，套进去就做出来了。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t,n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;d);</span><br><span class="line"><span class="keyword">if</span>(d&gt;<span class="number">0</span>) ans += n*x + d*(n<span class="number">-1</span>)*n/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> ans += n*x + d*(n-(n+<span class="number">1</span>)/<span class="number">2</span>)*((n+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.15f\n"</span>, <span class="number">1.0</span>*ans/n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D题意"><a href="#D题意" class="headerlink" title="D题意"></a>D题意</h3><blockquote><p>D题：问能否建立一个连通图，这个连通图的所有边的两端点互质，n个点m条边</p></blockquote><h3 id="D题解"><a href="#D题解" class="headerlink" title="D题解"></a>D题解</h3><blockquote><p>连通图首先得所有点都连上边。其次，所有数都和1互质，因此，直接判断一下n和m的关系，可以a掉部分数据。<br>然后跑一边所有的N个数，对每个数判断大于i的点是否互质，是就加到边几何中，最后判断一下所加的所有边数是否大于了m条边。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;emt[<span class="number">100007</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">int</span> len = m; <span class="comment">// 需要加的边数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= n &amp;&amp; len; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (__gcd(i,j)==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">len--;</span><br><span class="line">emt[len] = (node)&#123;i,j&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(len || n&gt;m+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Possible\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, emt[i].x,emt[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E题意"><a href="#E题意" class="headerlink" title="E题意"></a>E题意</h3><blockquote><p>E题： n千米，有n段路，共有n-1个可能可以休息的地方，则共有2^(n-1)种可能的休息方式; 计算 p⋅2^(n−1)</p></blockquote><h3 id="E题解"><a href="#E题解" class="headerlink" title="E题解"></a>E题解</h3><blockquote><p>这道题就是简单的数论问题。。。但是就是没读懂题。<br>这里的p代表的是期望，p<em>2^(n-1)也就是计算所有的可能的休息方式下的消耗之和。也就分别算出不同ai对结果的贡献就行。最终可以找到规律**a[i]出现的次数是 2^(n-i) + 2^(n-i-1) \</em> (n-i)**<br>但是我看了一下大神的代码，更简短，因此贴个大神的超短代码。5 5 </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,l,s,a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">l=(l*<span class="number">2</span>%p+b)%p;</span><br><span class="line">s=(s*<span class="number">2</span>%p+l+a)%p;</span><br><span class="line">b=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F题意"><a href="#F题意" class="headerlink" title="F题意"></a>F题意</h3><blockquote><p>A题： 用钱包walt买价值emt的物品，顺序用钱，不找回，最多购买</p></blockquote><h3 id="F题解"><a href="#F题解" class="headerlink" title="F题解"></a>F题解</h3><blockquote><p>F看题解说是用 DSU on tree。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="G题意"><a href="#G题意" class="headerlink" title="G题意"></a>G题意</h3><blockquote><p>A题： 用钱包walt买价值emt的物品，顺序用钱，不找回，最多购买</p></blockquote><h3 id="G题解"><a href="#G题解" class="headerlink" title="G题解"></a>G题解</h3><blockquote><p>顺序扫一遍，有满足的就加，并后移。一种卡尺操作。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="ACM竞赛" scheme="http://www.jelech.cn/categories/ACM%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="刷题" scheme="http://www.jelech.cn/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="acm" scheme="http://www.jelech.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>又是期末</title>
    <link href="http://www.jelech.cn/posts/50181/"/>
    <id>http://www.jelech.cn/posts/50181/</id>
    <published>2018-07-17T14:56:50.000Z</published>
    <updated>2018-12-01T13:41:48.295Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX184owhIbzmYMLyIWdD3pK0e82RPGfwyyC0RZB31rg2KYPqRGbWfH0JVRRz6qoL2GLBMjkma7hFzh6n8PLrSbAnyFoFpyWoZSjI+M14zn/axOC+X0UMKDdJW3PgaweSsRmwZkyfbYCx/b+ASUzyb5Z6+n0Um81uP8XmfukC/8sUlMoDUGKXavga3HFkfDB/3P/8w5twm8LwNeE9mxGbrxBCti4F8HRWvM9cW0+fZd5P+kz74hk8h8K05h7sis+Yh6nsdJkjbfAOiBkGlReb6BmzCkaJ/ExaWCUQ1G4HPUvvIEx78HNd8mIuTiHqgiqAi9TpKuFpDDptCVl6uFkahnWPznj2WEXFU1Ej9ELdP0nnJG9+KYZbKn9xSpkv0wpzp1p7AGCp29wqusui0nsCz9TCWN1HTlvMII2oGYu3amNFjOnepB5BQ7Xjm0iqsBMgQuBw1yahBzbwGJM2AuARv41ujVuJ5XBt5s2JP7tJPxir4AtYlGB2X0VDG0jPFTLrsPV9sKI/sPIhQlFZevOAvwW0DogvROHXGBqk2yMP1lvZpJdt9HRvpVQk3YbVCZ+HsBkHZX0BjYqZ07LTe+qEYC2Espof1lKwH3XKh9lSWx8LG5w0uxOu76vnjSs86hmRG0Tl+7NRgGf0/5H0AhdYHspeWbKJzet6rMz8Ka9YoOss/GJa7RaxMMz3470CztP/Emmu6HFXRXn4NHHiKhM0dQY7F1ICNhYIlF+E4btRgLNf2bfgkHT8dDyu34jqXYSyGxIVd1aFkkFT0QAGebF3yobbrgX8f3wYqfMIl/9P7MpzFOF/8/lndv7BCxsZQ93qr1znyFLQApgrJ8dQbpcPtcGoL7A0j0sqmLmyvFrU4HCq4sGUwnThYDcXiBfoJ4hIvrHr5ofu9a4kfFOPep96DLVe93uNNU4OLLGS5O0uah+hDLs10Tq/zXwpZchhw1ZEBekYWDAtsns1AW0thmJvDyihp5SLHdi022AwM9sCEsdzfzkl1kwnft8ed</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.jelech.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="日常" scheme="http://www.jelech.cn/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo + GitPage建立博客遇到的bug和解决办法</title>
    <link href="http://www.jelech.cn/posts/40608/"/>
    <id>http://www.jelech.cn/posts/40608/</id>
    <published>2018-06-17T02:45:53.000Z</published>
    <updated>2018-12-01T13:39:43.295Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><blockquote><p>Hexo可以将markdown+模板文件生成静态html页面，使用它可以快速的建立一个博客。但是这个过程中难免会遇到一些bug，这些bug时常是因为一些错误的操作，或者错误的参数导致的。这篇文章中我会逐一举出我遇到的问题，当然，也希望，如果你遇到的其他的问题，在下方评论区给我留言。</p></blockquote><h2 id="Deployer-not-fund"><a href="#Deployer-not-fund" class="headerlink" title="Deployer not fund  "></a><u>Deployer not fund</u>  <i class="fa fa-bug"><i></i></i></h2><p>这种bug出现是因为hexo找不到_config中提到的deployer。<br>就好比是向一个人指明了让他向北走，但是北方向并没有路，或者这条路被其他因素阻塞了。</p><ul><li>查看bug中提示的文件地址，会标注出出现错误的文件地址，根据这个地址找到错误的node_module，然后删除它，用<code>npm install</code>重装它</li><li>查看_config中的deploy选项，查看是否有写入的参数有错</li><li>查看node_module中的内容，看是否所有需要编译你各种文件的插件已经有了。<br>比如我的博客基础编译需要<code>hexo-renderer-sass</code> <code>hexo-renderer-pug</code></li></ul><h2 id="To-Be-Continue"><a href="#To-Be-Continue" class="headerlink" title="To Be Continue  "></a><u>To Be Continue</u>  <i class="fa fa-bug"><i></i></i></h2>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="BUG文档" scheme="http://www.jelech.cn/categories/BUG%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="刷题" scheme="http://www.jelech.cn/tags/%E5%88%B7%E9%A2%98/"/>
    
      <category term="acm" scheme="http://www.jelech.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>操作系统中的算法</title>
    <link href="http://www.jelech.cn/posts/27676/"/>
    <id>http://www.jelech.cn/posts/27676/</id>
    <published>2018-06-13T13:39:01.000Z</published>
    <updated>2018-12-01T13:39:05.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章还在更新中…</p></blockquote><!-- toc --><a id="more"></a><h2 id="算法一：RR时间片轮转"><a href="#算法一：RR时间片轮转" class="headerlink" title="算法一：RR时间片轮转"></a>算法一：RR时间片轮转</h2><blockquote><p>百度百科：<br>时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。调度程序所要做的就是维护一张就绪进程列表，当进程用完它的时间片后，它被移到队列的末尾。</p></blockquote><p>时间片轮转，从字面上理解就是会有个时间片定义，让每个进程都轮转，直到进程结束。<br>当新程序向OS提出要运行的时候，OS会给他分配适合的PCB头，成为进程的程序会先进入就绪队列，也就是排在队列的队尾。<br>新的一轮开始的时候，OS会给队首一个<strong>时间片长度</strong>，表示这个进程可以<strong>最多</strong>运行这么长的<strong>时间</strong>。</p><ul><li><strong>若</strong>当时间片用完，进程会进入就绪队列的队尾，如此循环，直到进程清空就绪队列。</li></ul><ul><li><strong>若</strong>进程结束，进程会进入伪退出状态，数据会写入虚拟内存(外存)。而此时会剩余一些时间片的时间，OS可以选择将它继续分配给下一个进程，减少不必要的等待。</li><li><strong>若</strong>进程应一些I/O请求等因素，OS也会中断进程，让其进入阻塞队列。只有请求结束后，才会让他重新进入就绪队列。</li></ul><h4 id="后来，又更新了一些方法对它进行改良。"><a href="#后来，又更新了一些方法对它进行改良。" class="headerlink" title="后来，又更新了一些方法对它进行改良。"></a>后来，又更新了一些方法对它进行改良。</h4><ol><li>带有优先级的时间片轮转法<br>因为在操作系统中，一些进程是比其他进程更需要提前完成的，因此在不同的进程里有不同的优先级。这里的优先级是静态的，意思是在进程进来前，OS以及对他进行了分析，得出了它相对于其他的进程的优先级高低。在新进程进入的时候，有可能是更高的优先级，让这个进程更有限的享用CPU，这里又分为了 &lt;基时钟中断：等待当前进程时间片结束&gt; &lt;立即抢占：等待当前进程出了临界区后立即中断进程&gt; 两种方式对现有的进程进行替换。</li><li>反馈调度法<br>这个算法是进程在调度时候的算法，普通的RR最初来自于页面置换算法中。反馈调度中提倡的是对进程已运行一部分和从未运行进行区分比较，也就是说，对于已经在队列中运行，较多次时间片的进程，优先级低于较少次时间片的进程。<br>因此在实现的时候，反馈调度算法使用了n个队列，而一般在设置的时候不同的队列的时间片也是不一样的。实现方面和RR类似，但是当有两个进程的时候，一个进程在这个队列运行完毕，会因为下一个进程的抢占，导致其进入了优先级更低的队列中。其他部分和RR算法类似，直到所有进程运行完毕。<br>其中，当有新的进程进入的时候，是插入到优先级最高的队列后面，按同样的方式，向下传播。</li></ol><h4 id="RR算法源代码"><a href="#RR算法源代码" class="headerlink" title="RR算法源代码"></a>RR算法源代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">OS algorithm of Time slice rotation</span></span><br><span class="line"><span class="comment">2018.5.15   jelech      start writing</span></span><br><span class="line"><span class="comment">2018.5.20   jelech      modify the algorithm</span></span><br><span class="line"><span class="comment">2018.5.31   jelech      modify the PCB</span></span><br><span class="line"><span class="comment">2018.6.5    jelech      modify the format</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    时间片的结构体定义</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PCB</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];      <span class="comment">// 进程名称</span></span><br><span class="line">    <span class="keyword">int</span> arrivelTime;    <span class="comment">// 到达时间</span></span><br><span class="line">    <span class="keyword">int</span> runTime;        <span class="comment">// 服务时间</span></span><br><span class="line">    <span class="keyword">int</span> timeLeft;       <span class="comment">// 剩余时间</span></span><br><span class="line">    <span class="keyword">char</span> *state;        <span class="comment">// 所处状态</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">next</span>;</span>   <span class="comment">// 链表队列</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    输入函数：输入PCB相关数据</span></span><br><span class="line"><span class="comment">    返回：就绪队列</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function">PCB *<span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">head</span>, *<span class="title">rear</span>;</span><span class="comment">// 定义队首、队尾</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p</span>, *<span class="title">q</span>, *<span class="title">t</span>;</span><span class="comment">// p是队尾指针，q是队首指针，t是执行时间</span></span><br><span class="line">    head = rear = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入进程数目："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (struct PCB *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct PCB));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个进程的名字、到达时间、服务时间：\n"</span>, i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>, p-&gt;name, &amp;p-&gt;arrivelTime, &amp;p-&gt;runTime);</span><br><span class="line">        p-&gt;timeLeft = p-&gt;runTime;</span><br><span class="line">        p-&gt;state = <span class="string">"就绪"</span>;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当输入结束时，把p的数据放到队首，以便下一步执行</span></span><br><span class="line">        <span class="comment">// 否则执行时间为空，队首变成q</span></span><br><span class="line">        <span class="keyword">if</span>(rear == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head = p;</span><br><span class="line">            p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            rear = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            t = <span class="literal">NULL</span>;</span><br><span class="line">            q = head;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 若q和q的到达时间小于p的到达时间时，把执行时间给q</span></span><br><span class="line">            <span class="keyword">while</span>(q &amp;&amp; q-&gt;arrivelTime &lt; p-&gt;arrivelTime)</span><br><span class="line">            &#123;</span><br><span class="line">                t = q;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当q是队首时，则下一个队首变成p,以便每个进程都能够得到时间片</span></span><br><span class="line">            <span class="comment">// 或执行时间片到达队尾时（执行完成），返回给队首p</span></span><br><span class="line">            <span class="comment">// 否则给队首p占用执行时间，p执行完后到q</span></span><br><span class="line">            <span class="keyword">if</span>(q == head)</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;next = head;</span><br><span class="line">                head = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(t == rear)</span><br><span class="line">            &#123;</span><br><span class="line">                rear-&gt;next = p;</span><br><span class="line">                p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                rear = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                t-&gt;next = p;</span><br><span class="line">                p-&gt;next = q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">   运行函数</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(struct PCB *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">p</span>, *<span class="title">t</span>, *<span class="title">r</span>;</span></span><br><span class="line">    <span class="keyword">int</span> num,nowTime=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec_out;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入时间片："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当队首不为空时，把p给队首</span></span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r = p = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把执行时间给队首</span></span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t = head;</span><br><span class="line">            <span class="keyword">if</span>(cnt!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;timeLeft = p-&gt;timeLeft - cnt;</span><br><span class="line">                nowTime += cnt;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;timeLeft = p-&gt;timeLeft - num;</span><br><span class="line">                nowTime += num;</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;state = <span class="string">"运行"</span>;</span><br><span class="line">            <span class="built_in">string</span> s = p-&gt;name;</span><br><span class="line">            vec_out.push_back(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当p运行完，即剩余时间小于0时，仍然把它当做0处理</span></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;timeLeft &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt = <span class="number">-1</span>*p-&gt;timeLeft;</span><br><span class="line">                p-&gt;timeLeft = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n\n----------%d时刻各进程运行状态----------\n"</span>, nowTime);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"进程  到达时间 服务时间  剩余时间  当前状态\n"</span>);</span><br><span class="line">            <span class="keyword">while</span>(t != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%2s %8d %8d %8d %10s\n"</span>, t-&gt;name, t-&gt;arrivelTime, t-&gt;runTime, t-&gt;timeLeft, t-&gt;state);</span><br><span class="line">                t = t-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;timeLeft == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p == head)</span><br><span class="line">                &#123;</span><br><span class="line">                    head = p-&gt;next;</span><br><span class="line">                    <span class="built_in">free</span>(p);</span><br><span class="line">                    p = head;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    r-&gt;next = p-&gt;next;</span><br><span class="line">                    p = r-&gt;next;</span><br><span class="line">                    r = p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                r = p;</span><br><span class="line">                p-&gt;state = <span class="string">"就绪"</span>;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"执行顺序为：\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, vec_out[<span class="number">0</span>].c_str());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; vec_out.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"--&gt;%s"</span>, vec_out[i].c_str());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    时间片轮转算法入口</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RR_MAIN</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">head</span>;</span></span><br><span class="line">    head = input();</span><br><span class="line">    run(head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    主函数</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RR_MAIN();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="算法二：银行家算法"><a href="#算法二：银行家算法" class="headerlink" title="算法二：银行家算法"></a>算法二：银行家算法</h3><blockquote><p>百度百科：银行家算法是一种最有代表性的避免死锁的算法。在避免死锁方法中允许进程动态地申请资源，但系统在进行资源分配之前，应先计算此次分配资源的安全性，若分配不会导致系统进入不安全状态，则分配，否则等待。为实现银行家算法，系统必须设置若干数据结构。</p></blockquote><p>银行家算法是为了解决在进程抢占临界区资源时候，OS能让所有进程顺利运行结束。算法主体思想是深搜，直到能找到可以把所有进程都运行完毕的，一个安全序列。<br>模拟一下大概的过程</p><ul><li>找到进程进一步需要的资源数，能满足小于现在所有剩余可用的资源数，的进程。这代表着这个进程可以正常运行结束。</li><li>然后模拟释放进程，将它之前占用的资源附加给剩余可用资源数。</li><li>循环下去，直到所有的进程都运行完毕。</li></ul><h4 id="银行家算法源代码"><a href="#银行家算法源代码" class="headerlink" title="银行家算法源代码"></a>银行家算法源代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">OS algorithm of The Banker's Algorithm</span></span><br><span class="line"><span class="comment">2018.6.6    jelech      start writing</span></span><br><span class="line"><span class="comment">2018.6.7jelechmodify algorithm</span></span><br><span class="line"><span class="comment">2018.6.10jelechmodify output</span></span><br><span class="line"><span class="comment">2018.6.12jelechmodify the file</span></span><br><span class="line"><span class="comment">2018.6.12jelechending the file</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    资源数定义</span></span><br><span class="line"><span class="comment">    进程数定义</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_PROCESS 10 <span class="comment">//进程数上限</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_RESOURCE_KIND 10 <span class="comment">//资源种类上限</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_RESOURCE_NUM 20<span class="comment">//每种资源可用数上限</span></span></span><br><span class="line"><span class="keyword">int</span> resource;<span class="comment">//实际资源种类数</span></span><br><span class="line"><span class="keyword">int</span> process;<span class="comment">//实际进程数</span></span><br><span class="line"><span class="keyword">int</span> safe_list[MAX_PROCESS];<span class="comment">//安全序列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    可用资源向量</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AVAILABLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> resource_number; <span class="comment">//资源数目</span></span><br><span class="line"><span class="keyword">int</span> work;<span class="comment">//工作向量</span></span><br><span class="line">&#125;Resource[MAX_RESOURCE_KIND], R_backup[MAX_RESOURCE_KIND];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    进程数据向量表</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PROC</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> max[MAX_RESOURCE_KIND];<span class="comment">//最大需求矩阵</span></span><br><span class="line"><span class="keyword">int</span> allocation[MAX_RESOURCE_KIND];<span class="comment">//分配矩阵</span></span><br><span class="line"><span class="keyword">int</span> need[MAX_RESOURCE_KIND];<span class="comment">//需求矩阵</span></span><br><span class="line"><span class="keyword">bool</span> finish;<span class="comment">//满足标记</span></span><br><span class="line">&#125;Process[MAX_PROCESS], P_backup[MAX_PROCESS];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zero</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_me</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_allocation</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backup</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">re_backup</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">allocation</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">one_allocation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_safe</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">void</span> _isSafe();</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">banker</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    清零函数:对所有矩阵进行初始化</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zero</span><span class="params">()</span> </span>&#123;<span class="comment">//清零</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;MAX_RESOURCE_KIND; i++) &#123;</span><br><span class="line">Resource[i].resource_number = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;MAX_RESOURCE_KIND; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt; MAX_RESOURCE_KIND; j++) &#123;</span><br><span class="line">Process[i].max[j] = <span class="number">0</span>;</span><br><span class="line">Process[i].allocation[j] = <span class="number">0</span>;</span><br><span class="line">Process[i].need[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    绘制中间矩阵:绘制可用矩阵、最大资源矩阵、已用矩阵、需要资源矩阵</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_me</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n---------------------------------\n"</span></span><br><span class="line"><span class="string">"可用资源矩阵"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; resource; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, Resource[i].resource_number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n最大资源矩阵"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_RESOURCE_KIND *<span class="number">2</span><span class="number">-14</span>; i++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"已用资源矩阵"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_RESOURCE_KIND * <span class="number">2</span> <span class="number">-14</span>; i++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"需要资源矩阵"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_RESOURCE_KIND * <span class="number">2</span> - <span class="number">8</span>; i++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;process; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n  "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;resource; j++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, Process[i].max[j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_RESOURCE_KIND * <span class="number">2</span> - resource*<span class="number">2</span>; i++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;resource; j++)<span class="built_in">printf</span>(<span class="string">"%d "</span>, Process[i].allocation[j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_RESOURCE_KIND * <span class="number">2</span> - resource * <span class="number">2</span>; i++) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;resource; j++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, Process[i].need[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    初始化:输入进程个数、资源个数、进程最大需求，当前分配状态</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n请输入资源数  "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">resource = n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n请输入资源数量序列, 空格隔开  "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;resource; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">Resource[i].resource_number = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n----------------------------------"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n请输入进程数  "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">process = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;process; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a, flag;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n输入进程%d对资源最大需求,空格隔开  "</span>, i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;resource; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">Process[i].max[j] = a;</span><br><span class="line"><span class="keyword">if</span> (a&gt;Resource[j].resource_number) flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">i--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n需求超过资源上限,驳回请求,请重新输入\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    初始化分配状态:输入进程当前资源分配状态</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_allocation</span><span class="params">()</span> </span>&#123;<span class="comment">//初始分配状态</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;process; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a, flag;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n输入进程%d当前资源分配状态, 空格隔开  "</span>, i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;resource; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">Process[i].allocation[j] = a;</span><br><span class="line"><span class="keyword">if</span> (a&gt;Resource[j].resource_number || a&gt;Process[i].max[j]) flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">i--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n当前资源占用超过资源上限请重新输入\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    更新需求矩阵和资源数目向量</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;process; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;resource; j++) &#123;</span><br><span class="line">Process[i].need[j] = Process[i].max[j] - Process[i].allocation[j];</span><br><span class="line">Resource[j].resource_number -= Process[i].allocation[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    新资源状态分配:进程请求新的要求</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">allocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">backup();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n请输入进程号以及对应资源所分配的数目用空格隔开\n"</span>);</span><br><span class="line"><span class="keyword">int</span> pro_num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pro_num);</span><br><span class="line"><span class="keyword">int</span> aff[MAX_RESOURCE_KIND];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; resource; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;aff[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; resource; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (one_allocation(pro_num<span class="number">-1</span>, i, aff[i]) == <span class="literal">false</span>) &#123;<span class="comment">//调用单次分配函数尝试分配</span></span><br><span class="line">re_backup();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    附属：新资源状态分配</span></span><br><span class="line"><span class="comment">    单次分配</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">one_allocation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c&gt;Process[a].need[b]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"要求超过所需上限，请求失败\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c&gt;Resource[b].resource_number) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"无足够资源，请求失败\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Resource[b].resource_number -= c;</span><br><span class="line">Process[a].need[b] -= c;</span><br><span class="line">Process[a].allocation[b] += c;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    数据备份：方便在检查后安全性后更新是否合格</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; process; i++) &#123;</span><br><span class="line">P_backup[i] = Process[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; resource; i++) &#123;</span><br><span class="line">R_backup[i] = Resource[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    初始化分配状态:输入进程当前资源分配状态</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">re_backup</span><span class="params">()</span> </span>&#123;<span class="comment">//数据还原</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; process; i++) &#123;</span><br><span class="line">Process[i] = P_backup[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; resource; i++) &#123;</span><br><span class="line">Resource[i] = R_backup[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    安全性检测算法</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_safe</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; resource; i++) &#123;</span><br><span class="line">Resource[i].work = Resource[i].resource_number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; process; i++) &#123;</span><br><span class="line">Process[i].finish = <span class="literal">false</span>;</span><br><span class="line">safe_list[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">_isSafe();</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; process; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (Process[i].finish == <span class="literal">false</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n系统状态安全，安全序列为  "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; process; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,safe_list[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n系统状态不安全, 无法完成任务"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    //安全性算法的递归分支</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="keyword">void</span> _isSafe()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; process; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (Process[i].finish == <span class="literal">false</span>) <span class="comment">//该进程分配未结束</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; resource; j++)<span class="comment">//查找是否可用资源够这个进程使用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Process[i].need[j] &gt; Resource[j].work)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">true</span>)<span class="comment">//够分配</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; resource; j++)</span><br><span class="line">&#123;</span><br><span class="line">Resource[j].work += Process[i].allocation[j];</span><br><span class="line">Process[i].finish = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; process; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (safe_list[k] == <span class="number">0</span>) &#123;</span><br><span class="line">safe_list[k] = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// update();</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;resource; j++)<span class="comment">// i进程 更新所有资源</span></span><br><span class="line">&#123;</span><br><span class="line">Resource[j].resource_number += Process[i].allocation[j];</span><br><span class="line">Process[i].allocation[j] = <span class="number">0</span>;</span><br><span class="line">Process[i].need[j] = Process[i].max[j];</span><br><span class="line">&#125;</span><br><span class="line">show_me();</span><br><span class="line">_isSafe();<span class="comment">//递归处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    银行家算法入口</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">banker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">backup();</span><br><span class="line"><span class="keyword">if</span> (allocation() == <span class="literal">false</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (is_safe()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n分配成功！"</span></span><br><span class="line">        <span class="string">"\n----------------------------------"</span>);</span><br><span class="line">        show_me();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">re_backup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    主程序入口</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">zero();</span><br><span class="line">init();</span><br><span class="line">init_allocation();</span><br><span class="line">show_me();</span><br><span class="line">backup();</span><br><span class="line">is_safe();</span><br><span class="line">re_backup();</span><br><span class="line">banker();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">printf</span>(<span class="string">"\n若需继续分配"</span>))</span><br><span class="line">        banker();</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法三：LRU页面置换算法"><a href="#算法三：LRU页面置换算法" class="headerlink" title="算法三：LRU页面置换算法"></a>算法三：LRU页面置换算法</h3><blockquote><p>百度百科：它的实质是，当需要置换一页时，选择在之前一段时间里最久没有使用过的页面予以置换。这种算法就称为最久未使用算法</p></blockquote><h4 id="页面置换是什么"><a href="#页面置换是什么" class="headerlink" title="页面置换是什么"></a>页面置换是什么</h4><p>页面置换是指进程一部分在内存中，一部分在外存中，在cup需要调用外存中的一些内容时候，需要进行页面置换操作，而LRU置换算法根据的是在之前的调换序列中总结出的规律，并加以预测。<br>最近最久未使用比较的是<strong>当前页框中</strong>的所有进程，在这次调用之前最后一个第一次被用到的是谁，换句话说<strong>在一段时间内没有使用过的进程会被换走</strong>，这样的操作的优点是系统观察到最近使用到的进程很可能会再次被使用到，因此会换掉很久没有使用到的页面。</p><p>它的<strong>缺点</strong>是需要大量硬件的支持，并且很有可以在调换后刚好久使用到了这个页面，容易造成循环多次替换<br><strong>优点</strong>是简单有效，寻找的速度相对较快，节省了查找的时间。</p><h4 id="LRU源代码"><a href="#LRU源代码" class="headerlink" title="LRU源代码"></a>LRU源代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">OS algorithm of Least Recently Used</span></span><br><span class="line"><span class="comment">2018.6.13   jelech      start writing</span></span><br><span class="line"><span class="comment">2018.6.14   jelech      add the OP algorithm</span></span><br><span class="line"><span class="comment">2018.6.19   jelech      modify the algorithm</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    数据定义</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_PROC_NUM = <span class="number">25</span>;<span class="comment">//定义最大进程数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_PHYB_NUM = <span class="number">5</span>;<span class="comment">//定义最大物理块数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PhysicalBlockList</span>// 输入的进程序列</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> runArray[MAX_PROC_NUM];</span><br><span class="line">&#125;PBL;</span><br><span class="line"><span class="keyword">int</span> phyBlockNum;<span class="comment">// 物理块数</span></span><br><span class="line"><span class="keyword">int</span> L[MAX_PHYB_NUM];<span class="comment">//物理块几何</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intput</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    输入函数：对物理块数、进程序列、进程数的输入函数</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入物理块数："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;phyBlockNum);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入序列总数："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;PBL.num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n请输入访问序列:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= PBL.num; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;PBL.runArray[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    打印当前页框序列</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= phyBlockNum; ++i)<span class="comment">// 遍历当前页框中的所有进程代码</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, L[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    最近最久未使用算法</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solvebylru</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> replacePos = <span class="number">1</span>; <span class="comment">// 替代位置</span></span><br><span class="line"><span class="keyword">int</span> zeroPos = <span class="number">1</span>;<span class="comment">//是否满了的位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"LRU算法序列:\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= PBL.num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;<span class="comment">// 标志为是否找到了进程的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= phyBlockNum; ++j)<span class="comment">// 找到这个进程的位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(PBL.runArray[i] == L[j])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">replacePos++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)<span class="comment">//没有找到</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(zeroPos &lt;= phyBlockNum)<span class="comment">// 如果首次加入页框还没有满，直接加入</span></span><br><span class="line">&#123;</span><br><span class="line">L[zeroPos] = PBL.runArray[i];</span><br><span class="line">zeroPos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">//遍历所有的页框中的进程，找到也框中应该被替换掉的位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= phyBlockNum; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L[j] == PBL.runArray[replacePos])</span><br><span class="line">&#123;</span><br><span class="line">L[j] = PBL.runArray[i];</span><br><span class="line">replacePos++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法四：磁盘调度算法"><a href="#算法四：磁盘调度算法" class="headerlink" title="算法四：磁盘调度算法"></a>算法四：磁盘调度算法</h3><blockquote><p>百度百科：磁盘调度在多道程序设计的计算机系统中，各个进程可能会不断提出不同的对磁盘进行读/写操作的请求。由于有时候这些进程的发送请求的速度比磁盘响应的还要快，因此我们有必要为每个磁盘设备建立一个等待队列</p></blockquote><h4 id="什么是磁盘调度"><a href="#什么是磁盘调度" class="headerlink" title="什么是磁盘调度"></a>什么是磁盘调度</h4><p>现在的机械硬盘大部分可以形容为许多片结合而成，在进程访问的时候，硬盘的磁盘指针就会寻找到指定的位置进行读取数据。我们这里简单的把它理解为一个光盘的读取，因此，每次访问的时候，会传送给它一个序列，每个值都代表着要访问的指定的位置。<br>然而，如果按照这个普通序列进行访问的话，就会造成指针反复的划过，时间大部分流失在了这里。因此构造一个良好的算法来保证他能快速的调用。</p><p><strong>电梯扫描算法(Scan)</strong>正如他的名字一样，它会像电梯一样上升和下降。在算法的第一步会将这个序列进行排序，与当前指针进行比较，选择上升还是下降，在按照这个方向，一直走到头，在反向进行访问。这就是Scan算法。</p><h4 id="Scan算法源代码"><a href="#Scan算法源代码" class="headerlink" title="Scan算法源代码"></a>Scan算法源代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">OS algorithm of Disk scheduling algorithm</span></span><br><span class="line"><span class="comment">2018.6.20   jelech      start writing</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    数据定义</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_PROC_NUM = <span class="number">50</span>;<span class="comment">// 最大进程数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mgnum;<span class="comment">//磁盘访问数</span></span><br><span class="line"><span class="keyword">int</span> PBL[MAX_PROC_NUM];<span class="comment">//磁盘访问序列:存放位置信息</span></span><br><span class="line"><span class="keyword">int</span> PBL_bk[MAX_PROC_NUM];<span class="comment">//磁盘访问序列:存放位置信息(备份)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mgpos=<span class="number">0</span>;<span class="comment">// 初始磁头位置</span></span><br><span class="line"><span class="keyword">int</span> putArray[MAX_PROC_NUM];<span class="comment">// 输出序列</span></span><br><span class="line"><span class="keyword">int</span> mvsum=<span class="number">0</span>;<span class="comment">// 总移动数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    数据输入</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入磁盘访问数:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;mgnum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入访问序列:"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= mgnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;PBL[i]);</span><br><span class="line">        PBL_bk[i] = PBL[i]; <span class="comment">// 输入时，进行备份</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入磁头位置:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;mgpos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    数据输出</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n总寻道长度：%d\t平均寻道长度：%.2f\n寻道序列："</span>, mvsum, mvsum*<span class="number">1.0</span>/mgnum);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mgnum; ++i)    <span class="comment">// 遍历所有序列进行输出</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(i != mgnum<span class="number">-1</span> ? <span class="string">"%d "</span>:<span class="string">"%d\n"</span>, putArray[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*=================================================================</span></span><br><span class="line"><span class="comment">    主函数入口</span></span><br><span class="line"><span class="comment">=================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solvebyScan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mgnum; ++i)</span><br><span class="line">&#123;</span><br><span class="line">PBL[i] = PBL_bk[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(PBL+<span class="number">1</span>, PBL+<span class="number">1</span>+mgnum);</span><br><span class="line"><span class="keyword">int</span> rpl = <span class="number">1</span>, rpr = mgnum;<span class="comment">// 下一次要替换的位置：左、右</span></span><br><span class="line">  <span class="keyword">while</span>(PBL[rpl] &lt; mgpos) rpl++;</span><br><span class="line">  rpr = rpl;<span class="comment">//找到的是比初始指针大的第一个</span></span><br><span class="line">  rpl = rpr<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  mvsum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> mlen = mgpos;</span><br><span class="line">  <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(rpr &lt;= mgnum)&#123;<span class="comment">// 默认先向上</span></span><br><span class="line">    putArray[pos] = PBL[rpr];</span><br><span class="line">    rpr++,pos++;</span><br><span class="line">  &#125;</span><br><span class="line">  mvsum += (PBL[rpr<span class="number">-1</span>] - mgpos);</span><br><span class="line">  <span class="keyword">while</span>(rpl &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    putArray[pos] = PBL[rpl];</span><br><span class="line">    rpl--,pos++;</span><br><span class="line">  &#125;</span><br><span class="line">  mvsum += (mgpos + PBL[rpl+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\nSCAN算法："</span>);</span><br><span class="line">  print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="专用术语"><a href="#专用术语" class="headerlink" title="专用术语"></a>专用术语</h3><p>系统吞吐量(system throughput)    并行(paralled)    并发(concurrence)    同步 (Synchronization)<br>临界资源(critical resource)    临界区(critical section)    进程互斥(process mutualexclusion)    地址映射(address mapping)</p><p>碎片(fragmentation)    多程序设计(Multiprogramming)    分段(Segmentation)    批处理技术(batch processing technic)</p><p>异步(asynchronism)    模块化(modularization)    内聚性(cohesion)    耦合度(coupling)</p><p>分层结构(layered architecture)    命令接口(command  interface)    顺序文件(sequential file)    异步操作(asynchronous operation)</p><p>直接存储器存取(Direct Memory Address)    动态(Dynamic)    抖动(thrashing)    时间片(time slicing)(Quantum)</p><p>文件扩展名 (File Extension)    文件属性 (Attribute)    互斥(Mutexes)    引导程序 (Bootstrap)</p><p>位示图 (Bitmaps)    引导参数 Boot Parameter    规范模式 Canonical Mode    请调 Demand Paging</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章还在更新中…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- toc --&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.jelech.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.jelech.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="算法" scheme="http://www.jelech.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>最近的一篇随笔</title>
    <link href="http://www.jelech.cn/posts/43282/"/>
    <id>http://www.jelech.cn/posts/43282/</id>
    <published>2018-06-10T14:26:26.000Z</published>
    <updated>2018-12-01T13:41:54.455Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)" />    <label for="pass">欢迎参观我的博客，这篇文章需要密码才能阅读哦 O(∩_∩)O(点我一下)</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      欢迎参观我的博客，O(∩_∩)O但是这篇文章是私有的哦&lt;/br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.jelech.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://www.jelech.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="烦恼" scheme="http://www.jelech.cn/tags/%E7%83%A6%E6%81%BC/"/>
    
  </entry>
  
</feed>
